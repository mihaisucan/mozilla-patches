# HG changeset patch
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1338718636 -10800
# Node ID 517f806346ee29dcf32ecf2574176da8feda070d
# Parent  329aa567fec9b634602db7dcfaf47a81bc5bf7eb
Bug 664688 - JavaScript evaluation "permission denied" after navigation to a different domain; try: -b do -p linux,linuxqt,linux64,macosx64,win32,macosx -u mochitest-o -t none

diff --git a/browser/devtools/webconsole/HUDService-content.js b/browser/devtools/webconsole/HUDService-content.js
--- a/browser/devtools/webconsole/HUDService-content.js
+++ b/browser/devtools/webconsole/HUDService-content.js
@@ -34,17 +34,16 @@ let activityDistributor = Cc["@mozilla.o
 
 let _alive = true; // Track if this content script should still be alive.
 
 /**
  * The Web Console content instance manager.
  */
 let Manager = {
   get window() content,
-  sandbox: null,
   hudId: null,
   _sequence: 0,
   _messageListeners: ["WebConsole:Init", "WebConsole:EnableFeature",
                       "WebConsole:DisableFeature", "WebConsole:SetPreferences",
                       "WebConsole:GetPreferences", "WebConsole:Destroy"],
   _messageHandlers: null,
   _enabledFeatures: null,
   _prefs: { },
@@ -733,16 +732,17 @@ let JSTerm = {
   get window() Manager.window,
   get console() this.window.console,
 
   /**
    * The Cu.Sandbox() object where code is evaluated.
    */
   sandbox: null,
 
+  _sandboxLocation: null,
   _messageHandlers: {},
 
   /**
    * Evaluation result objects are cached in this object. The chrome process can
    * request any object based on its ID.
    */
   _objectCache: null,
 
@@ -769,18 +769,16 @@ let JSTerm = {
       "JSTerm:ClearObjectCache": this.handleClearObjectCache,
     };
 
     for (let name in this._messageHandlers) {
       let handler = this._messageHandlers[name].bind(this);
       Manager.addMessageHandler(name, handler);
     }
 
-    this._createSandbox();
-
     if (aMessage && aMessage.notifyNonNativeConsoleAPI) {
       let consoleObject = WebConsoleUtils.unwrap(this.window).console;
       if (!("__mozillaConsole__" in consoleObject)) {
         Manager.sendMessage("JSTerm:NonNativeConsoleAPI", {});
       }
     }
   },
 
@@ -981,36 +979,43 @@ let JSTerm = {
   },
 
   /**
    * Create the JavaScript sandbox where user input is evaluated.
    * @private
    */
   _createSandbox: function JST__createSandbox()
   {
+    this._sandboxLocation = this.window.location;
     this.sandbox = new Cu.Sandbox(this.window, {
       sandboxPrototype: this.window,
       wantXrays: false,
     });
 
     this.sandbox.console = this.console;
 
     JSTermHelper(this);
   },
 
   /**
    * Evaluates a string in the sandbox.
    *
    * @param string aString
    *        String to evaluate in the sandbox.
-   * @returns something
-   *          The result of the evaluation.
+   * @return mixed
+   *         The result of the evaluation.
    */
   evalInSandbox: function JST_evalInSandbox(aString)
   {
+    // If the user changed to a different location, we need to update the
+    // sandbox.
+    if (this._sandboxLocation !== this.window.location) {
+      this._createSandbox();
+    }
+
     // The help function needs to be easy to guess, so we make the () optional
     if (aString.trim() == "help" || aString.trim() == "?") {
       aString = "help()";
     }
 
     let window = WebConsoleUtils.unwrap(this.sandbox.window);
     let $ = null, $$ = null;
 
@@ -1043,16 +1048,17 @@ let JSTerm = {
    */
   destroy: function JST_destroy()
   {
     for (let name in this._messageHandlers) {
       Manager.removeMessageHandler(name);
     }
 
     delete this.sandbox;
+    delete this._sandboxLocation;
     delete this._messageHandlers;
     delete this._objectCache;
   },
 };
 
 ///////////////////////////////////////////////////////////////////////////////
 // The window.console API observer
 ///////////////////////////////////////////////////////////////////////////////
diff --git a/browser/devtools/webconsole/test/Makefile.in b/browser/devtools/webconsole/test/Makefile.in
--- a/browser/devtools/webconsole/test/Makefile.in
+++ b/browser/devtools/webconsole/test/Makefile.in
@@ -103,16 +103,17 @@ include $(topsrcdir)/config/rules.mk
 	browser_webconsole_bug_653531_highlighter_console_helper.js \
 	browser_webconsole_bug_659907_console_dir.js \
 	browser_webconsole_bug_664131_console_group.js \
 	browser_webconsole_bug_704295.js \
 	browser_webconsole_bug_658368_time_methods.js \
 	browser_webconsole_bug_622303_persistent_filters.js \
 	browser_webconsole_window_zombie.js \
 	browser_cached_messages.js \
+	browser_bug664688_sandbox_update_after_navigation.js \
 	head.js \
 	$(NULL)
 
 _BROWSER_TEST_PAGES = \
 	test-console.html \
 	test-network.html \
 	test-network-request.html \
 	test-mutation.html \
diff --git a/browser/devtools/webconsole/test/browser_bug664688_sandbox_update_after_navigation.js b/browser/devtools/webconsole/test/browser_bug664688_sandbox_update_after_navigation.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/webconsole/test/browser_bug664688_sandbox_update_after_navigation.js
@@ -0,0 +1,123 @@
+/* vim:set ts=2 sw=2 sts=2 et: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+// Tests if the JSTerm sandbox is updated when the user navigates from one
+// domain to another, in order to avoid permission denied errors with a sandbox
+// created for a different origin.
+
+function test()
+{
+  const TEST_URI1 = "http://example.com/browser/browser/devtools/webconsole/test/test-console.html";
+  const TEST_URI2 = "http://example.org/browser/browser/devtools/webconsole/test/test-console.html";
+
+  let hud;
+
+  waitForExplicitFinish();
+
+  gBrowser.selectedTab = gBrowser.addTab(TEST_URI1);
+  gBrowser.selectedBrowser.addEventListener("load", function onLoad() {
+    gBrowser.selectedBrowser.removeEventListener("load", onLoad, true);
+    openConsole(gBrowser.selectedTab, pageLoad1);
+  }, true);
+
+
+  function pageLoad1(aHud)
+  {
+    hud = aHud;
+
+    hud.jsterm.clearOutput();
+    hud.jsterm.execute("window.location.href");
+
+    waitForSuccess(waitForLocation1);
+  }
+
+  let waitForLocation1 = {
+    name: "window.location.href result is displayed",
+    validatorFn: function()
+    {
+      let node = hud.outputNode.getElementsByClassName("webconsole-msg-output")[0];
+      return node && node.textContent.indexOf(TEST_URI1) > -1;
+    },
+    successFn: function()
+    {
+      let node = hud.outputNode.getElementsByClassName("webconsole-msg-input")[0];
+      isnot(node.textContent.indexOf("window.location.href"), -1,
+            "jsterm input is also displayed");
+
+      is(hud.outputNode.textContent.indexOf("Permission denied"), -1,
+         "no permission denied errors");
+
+      gBrowser.selectedBrowser.addEventListener("load", onPageLoad2, true);
+      content.location = TEST_URI2;
+    },
+    failureFn: finishTest,
+  };
+
+  function onPageLoad2() {
+    gBrowser.selectedBrowser.removeEventListener("load", onPageLoad2, true);
+
+    hud.jsterm.clearOutput();
+    hud.jsterm.execute("window.location.href");
+
+    waitForSuccess(waitForLocation2);
+  }
+
+  let waitForLocation2 = {
+    name: "window.location.href result is displayed after page navigation",
+    validatorFn: function()
+    {
+      let node = hud.outputNode.getElementsByClassName("webconsole-msg-output")[0];
+      return node && node.textContent.indexOf(TEST_URI2) > -1;
+    },
+    successFn: function()
+    {
+      let node = hud.outputNode.getElementsByClassName("webconsole-msg-input")[0];
+      isnot(node.textContent.indexOf("window.location.href"), -1,
+            "jsterm input is also displayed");
+      is(hud.outputNode.textContent.indexOf("Permission denied"), -1,
+         "no permission denied errors");
+
+      gBrowser.goBack();
+      waitForSuccess(waitForBack);
+    },
+    failureFn: finishTest,
+  };
+
+  let waitForBack = {
+    name: "go back",
+    validatorFn: function()
+    {
+      return content.location.href == TEST_URI1;
+    },
+    successFn: function()
+    {
+      hud.jsterm.clearOutput();
+      hud.jsterm.execute("window.location.href");
+
+      waitForSuccess(waitForLocation3);
+    },
+    failureFn: finishTest,
+  };
+
+  let waitForLocation3 = {
+    name: "window.location.href result is displayed after goBack()",
+    validatorFn: function()
+    {
+      let node = hud.outputNode.getElementsByClassName("webconsole-msg-output")[0];
+      return node && node.textContent.indexOf(TEST_URI1) > -1;
+    },
+    successFn: function()
+    {
+      let node = hud.outputNode.getElementsByClassName("webconsole-msg-input")[0];
+      isnot(node.textContent.indexOf("window.location.href"), -1,
+            "jsterm input is also displayed");
+      is(hud.outputNode.textContent.indexOf("Permission denied"), -1,
+         "no permission denied errors");
+
+      executeSoon(finishTest);
+    },
+    failureFn: finishTest,
+  };
+}
