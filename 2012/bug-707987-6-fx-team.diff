# HG changeset patch
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1329562734 -7200
# Node ID e6c66856051b3bd4f8b7c88512924e985cc4a0c9
# Parent  85aa435bba08702f2a57e40c0b8ac6107548b0fc
Bug 707987 - Ability to set breakpoints in the Source Editor (orion)

diff --git a/browser/devtools/scratchpad/scratchpad.js b/browser/devtools/scratchpad/scratchpad.js
--- a/browser/devtools/scratchpad/scratchpad.js
+++ b/browser/devtools/scratchpad/scratchpad.js
@@ -801,17 +801,17 @@ var Scratchpad = {
       initialText = state.text;
     }
 
     this.editor = new SourceEditor();
 
     let config = {
       mode: SourceEditor.MODES.JAVASCRIPT,
       showLineNumbers: true,
-      placeholderText: initialText
+      initialText: initialText,
     };
 
     let editorPlaceholder = document.getElementById("scratchpad-editor");
     this.editor.init(editorPlaceholder, config, this.onEditorLoad.bind(this));
   },
 
   /**
    * The load event handler for the source editor. This method does post-load
diff --git a/browser/devtools/sourceeditor/source-editor-orion.jsm b/browser/devtools/sourceeditor/source-editor-orion.jsm
--- a/browser/devtools/sourceeditor/source-editor-orion.jsm
+++ b/browser/devtools/sourceeditor/source-editor-orion.jsm
@@ -49,33 +49,35 @@ Cu.import("resource:///modules/source-ed
 
 XPCOMUtils.defineLazyServiceGetter(this, "clipboardHelper",
                                    "@mozilla.org/widget/clipboardhelper;1",
                                    "nsIClipboardHelper");
 
 const ORION_SCRIPT = "chrome://browser/content/orion.js";
 const ORION_IFRAME = "data:text/html;charset=utf8,<!DOCTYPE html>" +
   "<html style='height:100%' dir='ltr'>" +
+  "<head><link rel='stylesheet'" +
+  " href='chrome://browser/skin/devtools/orion-container.css'></head>" +
   "<body style='height:100%;margin:0;overflow:hidden'>" +
   "<div id='editor' style='height:100%'></div>" +
   "</body></html>";
 
 const XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
 
 /**
  * Predefined themes for syntax highlighting. This objects maps
  * SourceEditor.THEMES to Orion CSS files.
  */
 const ORION_THEMES = {
   mozilla: ["chrome://browser/skin/devtools/orion.css"],
 };
 
 /**
- * Known editor events you can listen for. This object maps SourceEditor.EVENTS
- * to Orion events.
+ * Known Orion editor events you can listen for. This object maps several of the
+ * SourceEditor.EVENTS to Orion events.
  */
 const ORION_EVENTS = {
   ContextMenu: "ContextMenu",
   TextChanged: "ModelChanged",
   Selection: "Selection",
   Focus: "Focus",
   Blur: "Blur",
   MouseOver: "MouseOver",
@@ -84,16 +86,18 @@ const ORION_EVENTS = {
 };
 
 /**
  * Known Orion annotation types.
  */
 const ORION_ANNOTATION_TYPES = {
   currentBracket: "orion.annotation.currentBracket",
   matchingBracket: "orion.annotation.matchingBracket",
+  breakpoint: "orion.annotation.breakpoint",
+  task: "orion.annotation.task",
 };
 
 /**
  * Default key bindings in the Orion editor.
  */
 const DEFAULT_KEYBINDINGS = [
   {
     action: "undo",
@@ -122,40 +126,46 @@ var EXPORTED_SYMBOLS = ["SourceEditor"];
  *
  * The editor used here is Eclipse Orion (see http://www.eclipse.org/orion).
  *
  * @constructor
  */
 function SourceEditor() {
   // Update the SourceEditor defaults from user preferences.
 
-  SourceEditor.DEFAULTS.TAB_SIZE =
+  SourceEditor.DEFAULTS.tabSize =
     Services.prefs.getIntPref(SourceEditor.PREFS.TAB_SIZE);
-  SourceEditor.DEFAULTS.EXPAND_TAB =
+  SourceEditor.DEFAULTS.expandTab =
     Services.prefs.getBoolPref(SourceEditor.PREFS.EXPAND_TAB);
 
   this._onOrionSelection = this._onOrionSelection.bind(this);
 
+  this._eventTarget = {};
+  this._eventListenersQueue = [];
   this.ui = new SourceEditorUI(this);
 }
 
 SourceEditor.prototype = {
   _view: null,
   _iframe: null,
   _model: null,
   _undoStack: null,
   _linesRuler: null,
+  _annotationRuler: null,
+  _overviewRuler: null,
   _styler: null,
   _annotationStyler: null,
   _annotationModel: null,
   _dragAndDrop: null,
   _mode: null,
   _expandTab: null,
   _tabSize: null,
   _iframeWindow: null,
+  _eventTarget: null,
+  _eventListenersQueue: null,
 
   /**
    * The Source Editor user interface manager.
    * @type object
    *       An instance of the SourceEditorUI.
    */
   ui: null,
 
@@ -166,40 +176,22 @@ SourceEditor.prototype = {
   parentElement: null,
 
   /**
    * Initialize the editor.
    *
    * @param nsIDOMElement aElement
    *        The DOM element where you want the editor to show.
    * @param object aConfig
-   *        Editor configuration object. Properties:
-   *          - placeholderText - the text you want to be shown by default.
-   *          - theme - the syntax highlighting theme you want. You can use one
-   *          of the predefined themes, or you can point to your CSS file.
-   *          - mode - the editor mode, based on the file type you want to edit.
-   *          You can use one of the predefined modes.
-   *          - tabSize - define how many spaces to use for a tab character.
-   *          - expandTab - tells if you want tab characters to be expanded to
-   *          spaces.
-   *          - readOnly - make the editor read only.
-   *          - showLineNumbers - display the line numbers gutter.
-   *          - undoLimit - how many steps should the undo stack hold.
-   *          - keys - is an array of objects that allows you to define custom
-   *          editor keyboard bindings. Each object can have:
-   *              - action - name of the editor action to invoke.
-   *              - code - keyCode for the shortcut.
-   *              - accel - boolean for the Accel key (cmd/ctrl).
-   *              - shift - boolean for the Shift key.
-   *              - alt - boolean for the Alt key.
-   *              - callback - optional function to invoke, if the action is not
-   *              predefined in the editor.
+   *        Editor configuration object. See SourceEditor.DEFAULTS for the
+   *        available configuration options.
    * @param function [aCallback]
    *        Function you want to execute once the editor is loaded and
    *        initialized.
+   * @see SourceEditor.DEFAULTS
    */
   init: function SE_init(aElement, aConfig, aCallback)
   {
     if (this._iframe) {
       throw new Error("SourceEditor is already initialized!");
     }
 
     let doc = aElement.ownerDocument;
@@ -213,17 +205,31 @@ SourceEditor.prototype = {
     }).bind(this);
 
     this._iframe.addEventListener("load", onIframeLoad, true);
 
     this._iframe.setAttribute("src", ORION_IFRAME);
 
     aElement.appendChild(this._iframe);
     this.parentElement = aElement;
-    this._config = aConfig;
+
+    this._config = {};
+    for (let key in SourceEditor.DEFAULTS) {
+      this._config[key] = key in aConfig ?
+                          aConfig[key] :
+                          SourceEditor.DEFAULTS[key];
+    }
+
+    // TODO: Bug 725677 - Remove the deprecated placeholderText option from the
+    // Source Editor initialization.
+    if (aConfig.placeholderText) {
+      this._config.initialText = aConfig.placeholderText;
+      Services.console.logStringMessage("SourceEditor.init() was called with the placeholderText option which is deprecated, please use initialText.");
+    }
+
     this._onReadyCallback = aCallback;
     this.ui.init();
   },
 
   /**
    * The editor iframe load event handler.
    * @private
    */
@@ -233,24 +239,23 @@ SourceEditor.prototype = {
     let window = this._iframeWindow;
     let config = this._config;
 
     Services.scriptloader.loadSubScript(ORION_SCRIPT, window, "utf8");
 
     let TextModel = window.require("orion/textview/textModel").TextModel;
     let TextView = window.require("orion/textview/textView").TextView;
 
-    this._expandTab = typeof config.expandTab != "undefined" ?
-                      config.expandTab : SourceEditor.DEFAULTS.EXPAND_TAB;
-    this._tabSize = config.tabSize || SourceEditor.DEFAULTS.TAB_SIZE;
+    this._expandTab = config.expandTab;
+    this._tabSize = config.tabSize;
 
-    let theme = config.theme || SourceEditor.DEFAULTS.THEME;
+    let theme = config.theme;
     let stylesheet = theme in ORION_THEMES ? ORION_THEMES[theme] : theme;
 
-    this._model = new TextModel(config.placeholderText);
+    this._model = new TextModel(config.initialText);
     this._view = new TextView({
       model: this._model,
       parent: "editor",
       stylesheet: stylesheet,
       tabSize: this._tabSize,
       expandTab: this._expandTab,
       readonly: config.readOnly,
       themeClass: "mozilla" + (config.readOnly ? " readonly" : ""),
@@ -263,34 +268,66 @@ SourceEditor.prototype = {
 
     this._view.addEventListener("Load", onOrionLoad);
     if (Services.appinfo.OS == "Linux") {
       this._view.addEventListener("Selection", this._onOrionSelection);
     }
 
     let KeyBinding = window.require("orion/textview/keyBinding").KeyBinding;
     let TextDND = window.require("orion/textview/textDND").TextDND;
-    let LineNumberRuler = window.require("orion/textview/rulers").LineNumberRuler;
+    let Rulers = window.require("orion/textview/rulers");
+    let LineNumberRuler = Rulers.LineNumberRuler;
+    let AnnotationRuler = Rulers.AnnotationRuler;
+    let OverviewRuler = Rulers.OverviewRuler;
     let UndoStack = window.require("orion/textview/undoStack").UndoStack;
     let AnnotationModel = window.require("orion/textview/annotations").AnnotationModel;
 
     this._annotationModel = new AnnotationModel(this._model);
 
+    if (config.showAnnotationRuler) {
+      this._annotationRuler = new AnnotationRuler(this._annotationModel, "left",
+        {styleClass: "ruler annotations"});
+      this._annotationRuler.onClick = this._annotationRulerClick.bind(this);
+      this._annotationRuler.addAnnotationType(ORION_ANNOTATION_TYPES.breakpoint);
+      this._annotationRuler.setMultiAnnotation({
+        html: "<div class='annotationHTML multiple'></div>"
+      });
+      this._annotationRuler.setMultiAnnotationOverlay({
+        html: "<div class='annotationHTML overlay'></div>"
+      });
+      this._view.addRuler(this._annotationRuler);
+    }
+
     if (config.showLineNumbers) {
+      let rulerClass = this._annotationRuler ?
+                       "ruler lines linesWithAnnotations" :
+                       "ruler lines";
+
       this._linesRuler = new LineNumberRuler(this._annotationModel, "left",
-        {styleClass: "rulerLines"}, {styleClass: "rulerLine odd"},
-        {styleClass: "rulerLine even"});
+        {styleClass: rulerClass}, {styleClass: "rulerLines odd"},
+        {styleClass: "rulerLines even"});
 
       this._view.addRuler(this._linesRuler);
     }
 
-    this.setMode(config.mode || SourceEditor.DEFAULTS.MODE);
+    if (config.showOverviewRuler) {
+      this._overviewRuler = new OverviewRuler(this._annotationModel, "right",
+        {styleClass: "ruler overview"});
+      this._overviewRuler.onClick = this._overviewRulerClick.bind(this);
 
-    this._undoStack = new UndoStack(this._view,
-      config.undoLimit || SourceEditor.DEFAULTS.UNDO_LIMIT);
+      this._overviewRuler.addAnnotationType(ORION_ANNOTATION_TYPES.matchingBracket);
+      this._overviewRuler.addAnnotationType(ORION_ANNOTATION_TYPES.currentBracket);
+      this._overviewRuler.addAnnotationType(ORION_ANNOTATION_TYPES.breakpoint);
+      this._overviewRuler.addAnnotationType(ORION_ANNOTATION_TYPES.task);
+      this._view.addRuler(this._overviewRuler);
+    }
+
+    this.setMode(config.mode);
+
+    this._undoStack = new UndoStack(this._view, config.undoLimit);
 
     this._dragAndDrop = new TextDND(this._view, this._undoStack);
 
     let actions = {
       "undo": [this.undo, this],
       "redo": [this.redo, this],
       "tab": [this._doTab, this],
       "Unindent Lines": [this._doUnindentLines, this],
@@ -310,16 +347,53 @@ SourceEditor.prototype = {
     keys.forEach(function(aKey) {
       let binding = new KeyBinding(aKey.code, aKey.accel, aKey.shift, aKey.alt);
       this._view.setKeyBinding(binding, aKey.action);
 
       if (aKey.callback) {
         this._view.setAction(aKey.action, aKey.callback);
       }
     }, this);
+
+    this._initEventTarget();
+  },
+
+  /**
+   * Initialize the private Orion EventTarget object. This is used for tracking
+   * our own event listeners for events outside of Orion's scope.
+   * @private
+   */
+  _initEventTarget: function SE__initEventTarget()
+  {
+    let EventTarget =
+      this._iframeWindow.require("orion/textview/eventTarget").EventTarget;
+    EventTarget.addMixin(this._eventTarget);
+
+    this._eventListenersQueue.forEach(function(aRequest) {
+      if (aRequest[0] == "add") {
+        this.addEventListener(aRequest[1], aRequest[2]);
+      } else {
+        this.removeEventListener(aRequest[1], aRequest[2]);
+      }
+    }, this);
+
+    this._eventListenersQueue = [];
+  },
+
+  /**
+   * Dispatch an event to the SourceEditor event listeners. This covers only the
+   * SourceEditor-specific events.
+   *
+   * @private
+   * @param object aEvent
+   *        The event object to dispatch to all listeners.
+   */
+  _dispatchEvent: function SE__dispatchEvent(aEvent)
+  {
+    this._eventTarget.dispatchEvent(aEvent);
   },
 
   /**
    * The Orion "Load" event handler. This is called when the Orion editor
    * completes the initialization.
    * @private
    */
   _onOrionLoad: function SE__onOrionLoad()
@@ -488,16 +562,122 @@ SourceEditor.prototype = {
       return;
     }
 
     clipboardHelper.copyStringToClipboard(text,
                                           Ci.nsIClipboard.kSelectionClipboard);
   },
 
   /**
+   * Highlight the Orion annotations. This updates the annotation styler as
+   * needed.
+   * @private
+   */
+  _highlightAnnotations: function SE__highlightAnnotations()
+  {
+    if (this._annotationStyler) {
+      this._annotationStyler.destroy();
+      this._annotationStyler = null;
+    }
+
+    let AnnotationStyler =
+      this._iframeWindow.require("orion/textview/annotations").AnnotationStyler;
+
+    let styler = new AnnotationStyler(this._view, this._annotationModel);
+    this._annotationStyler = styler;
+
+    styler.addAnnotationType(ORION_ANNOTATION_TYPES.matchingBracket);
+    styler.addAnnotationType(ORION_ANNOTATION_TYPES.currentBracket);
+    styler.addAnnotationType(ORION_ANNOTATION_TYPES.task);
+  },
+
+  /**
+   * Retrieve the list of Orion Annotations filtered by type for the given text range.
+   *
+   * @private
+   * @param string aType
+   *        The annotation type to filter annotations for.
+   * @param number aStart
+   *        Offset from where to start finding the annotations.
+   * @param number aEnd
+   *        End offset for retrieving the annotations.
+   * @return array
+   *         The array of annotations, filtered by type, within the given text
+   *         range.
+   */
+  _getAnnotationsByType: function SE__getAnnotationsByType(aType, aStart, aEnd)
+  {
+    let annotations = this._annotationModel.getAnnotations(aStart, aEnd);
+    let annotation, result = [];
+    while (annotation = annotations.next()) {
+      if (annotation.type == ORION_ANNOTATION_TYPES[aType]) {
+        result.push(annotation);
+      }
+    }
+
+    return result;
+  },
+
+  /**
+   * The click event handler for the annotation ruler.
+   *
+   * @private
+   * @param number aLineIndex
+   *        The line index where the click event occurred.
+   * @param object aEvent
+   *        The DOM click event object.
+   */
+  _annotationRulerClick: function SE__annotationRulerClick(aLineIndex, aEvent)
+  {
+    if (aLineIndex === undefined || aLineIndex == -1) {
+      return;
+    }
+
+    let lineStart = this._model.getLineStart(aLineIndex);
+    let lineEnd = this._model.getLineEnd(aLineIndex);
+    let annotations = this._getAnnotationsByType("breakpoint", lineStart, lineEnd);
+    if (annotations.length > 0) {
+      this.removeBreakpoint(aLineIndex);
+    } else {
+      this.addBreakpoint(aLineIndex);
+    }
+  },
+
+  /**
+   * The click event handler for the overview ruler. When the user clicks on an
+   * annotation the editor jumps to the associated line.
+   *
+   * @private
+   * @param number aLineIndex
+   *        The line index where the click event occurred.
+   * @param object aEvent
+   *        The DOM click event object.
+   */
+  _overviewRulerClick: function SE__overviewRulerClick(aLineIndex, aEvent)
+  {
+    if (aLineIndex === undefined || aLineIndex == -1) {
+      return;
+    }
+
+    let model = this._model;
+    let lineStart = model.getLineStart(aLineIndex);
+    let lineEnd = model.getLineEnd(aLineIndex);
+    let annotations = this._annotationModel.getAnnotations(lineStart, lineEnd);
+    let annotation = annotations.next();
+
+    // Jump to the line where annotation is. If the annotation is specific to
+    // a substring part of the line, then select the substring.
+    if (!annotation || lineStart == annotation.start && lineEnd == annotation.end) {
+      this.setSelection(lineStart, lineStart);
+    } else {
+      this.setSelection(annotation.start, annotation.end);
+    }
+  },
+
+  /**
    * Get the editor element.
    *
    * @return nsIDOMElement
    *         In this implementation a xul:iframe holds the editor.
    */
   get editorElement() {
     return this._iframe;
   },
@@ -507,46 +687,46 @@ SourceEditor.prototype = {
    *
    * @see SourceEditor.EVENTS
    *
    * @param string aEventType
    *        The event type you want to listen for.
    * @param function aCallback
    *        The function you want executed when the event is triggered.
    */
-  addEventListener:
-  function SE_addEventListener(aEventType, aCallback)
+  addEventListener: function SE_addEventListener(aEventType, aCallback)
   {
-    if (aEventType in ORION_EVENTS) {
+    if (this._view && aEventType in ORION_EVENTS) {
       this._view.addEventListener(ORION_EVENTS[aEventType], aCallback);
+    } else if (this._eventTarget.addEventListener) {
+      this._eventTarget.addEventListener(aEventType, aCallback);
     } else {
-      throw new Error("SourceEditor.addEventListener() unknown event " +
-                      "type " + aEventType);
+      this._eventListenersQueue.push(["add", aEventType, aCallback]);
     }
   },
 
   /**
    * Remove an event listener from the editor. You can use one of the known
    * events.
    *
    * @see SourceEditor.EVENTS
    *
    * @param string aEventType
    *        The event type you have a listener for.
    * @param function aCallback
    *        The function you have as the event handler.
    */
-  removeEventListener:
-  function SE_removeEventListener(aEventType, aCallback)
+  removeEventListener: function SE_removeEventListener(aEventType, aCallback)
   {
-    if (aEventType in ORION_EVENTS) {
+    if (this._view && aEventType in ORION_EVENTS) {
       this._view.removeEventListener(ORION_EVENTS[aEventType], aCallback);
+    } else if (this._eventTarget.removeEventListener) {
+      this._eventTarget.removeEventListener(aEventType, aCallback);
     } else {
-      throw new Error("SourceEditor.removeEventListener() unknown event " +
-                      "type " + aEventType);
+      this._eventListenersQueue.push(["remove", aEventType, aCallback]);
     }
   },
 
   /**
    * Undo a change in the editor.
    */
   undo: function SE_undo()
   {
@@ -836,54 +1016,41 @@ SourceEditor.prototype = {
    *        One of the predefined SourceEditor.MODES.
    */
   setMode: function SE_setMode(aMode)
   {
     if (this._styler) {
       this._styler.destroy();
       this._styler = null;
     }
-    if (this._annotationStyler) {
-      this._annotationStyler.destroy();
-      this._annotationStyler = null;
-    }
 
     let window = this._iframeWindow;
 
     switch (aMode) {
       case SourceEditor.MODES.JAVASCRIPT:
       case SourceEditor.MODES.CSS:
         let TextStyler =
           window.require("examples/textview/textStyler").TextStyler;
 
         this._styler = new TextStyler(this._view, aMode, this._annotationModel);
         this._styler.setFoldingEnabled(false);
         this._styler.setHighlightCaretLine(true);
-
-        let AnnotationStyler =
-          window.require("orion/textview/annotations").AnnotationStyler;
-
-        this._annotationStyler =
-          new AnnotationStyler(this._view, this._annotationModel);
-        this._annotationStyler.
-          addAnnotationType(ORION_ANNOTATION_TYPES.matchingBracket);
-        this._annotationStyler.
-          addAnnotationType(ORION_ANNOTATION_TYPES.currentBracket);
         break;
 
       case SourceEditor.MODES.HTML:
       case SourceEditor.MODES.XML:
         let TextMateStyler =
           window.require("orion/editor/textMateStyler").TextMateStyler;
         let HtmlGrammar =
           window.require("orion/editor/htmlGrammar").HtmlGrammar;
         this._styler = new TextMateStyler(this._view, new HtmlGrammar());
         break;
     }
 
+    this._highlightAnnotations();
     this._mode = aMode;
   },
 
   /**
    * Get the current source editor mode.
    *
    * @return string
    *         Returns one of the predefined SourceEditor.MODES.
@@ -911,16 +1078,116 @@ SourceEditor.prototype = {
    * @type boolean
    */
   get readOnly()
   {
     return this._view.getOptions("readonly");
   },
 
   /**
+   * Add a breakpoint at the given line index.
+   *
+   * @param number aLineIndex
+   *        Line index where to add the breakpoint (starts from 0).
+   * @param string [aCondition]
+   *        Optional breakpoint condition.
+   */
+  addBreakpoint: function SE_addBreakpoint(aLineIndex, aCondition)
+  {
+    let lineStart = this._model.getLineStart(aLineIndex);
+    let lineEnd = this._model.getLineEnd(aLineIndex);
+
+    let annotations = this._getAnnotationsByType("breakpoint", lineStart, lineEnd);
+    if (annotations.length > 0) {
+      return;
+    }
+
+    let lineText = this._model.getLine(aLineIndex);
+    let title = SourceEditorUI.strings.
+                formatStringFromName("annotation.breakpoint.title",
+                                     [lineText], 1);
+
+    let annotation = {
+      type: ORION_ANNOTATION_TYPES.breakpoint,
+      start: lineStart,
+      end: lineEnd,
+      breakpointCondition: aCondition,
+      title: title,
+      style: {styleClass: "annotation breakpoint"},
+      html: "<div class='annotationHTML breakpoint'></div>",
+      overviewStyle: {styleClass: "annotationOverview breakpoint"},
+      rangeStyle: {styleClass: "annotationRange breakpoint"}
+    };
+    this._annotationModel.addAnnotation(annotation);
+
+    let event = {
+      type: SourceEditor.EVENTS.BREAKPOINT_CHANGE,
+      added: [{line: aLineIndex, condition: aCondition}],
+      removed: [],
+    };
+
+    this._dispatchEvent(event);
+  },
+
+  /**
+   * Remove the current breakpoint from the given line index.
+   *
+   * @param number aLineIndex
+   *        Line index from where to remove the breakpoint (starts from 0).
+   * @return boolean
+   *         True if a breakpoint was removed, false otherwise.
+   */
+  removeBreakpoint: function SE_removeBreakpoint(aLineIndex)
+  {
+    let lineStart = this._model.getLineStart(aLineIndex);
+    let lineEnd = this._model.getLineEnd(aLineIndex);
+
+    let event = {
+      type: SourceEditor.EVENTS.BREAKPOINT_CHANGE,
+      added: [],
+      removed: [],
+    };
+
+    let annotations = this._getAnnotationsByType("breakpoint", lineStart, lineEnd);
+
+    annotations.forEach(function(annotation) {
+      this._annotationModel.removeAnnotation(annotation);
+      event.removed.push({line: aLineIndex,
+                          condition: annotation.breakpointCondition});
+    }, this);
+
+    if (event.removed.length > 0) {
+      this._dispatchEvent(event);
+    }
+
+    return event.removed.length > 0;
+  },
+
+  /**
+   * Get the list of breakpoints in the Source Editor instance.
+   *
+   * @return array
+   *         The array of breakpoints. Each item is an object with two
+   *         properties: line and condition.
+   */
+  getBreakpoints: function SE_getBreakpoints()
+  {
+    let annotations = this._getAnnotationsByType("breakpoint", 0,
+                                                 this.getCharCount());
+    let breakpoints = [];
+
+    annotations.forEach(function(annotation) {
+      breakpoints.push({line: this._model.getLineAtOffset(annotation.start),
+                        condition: annotation.breakpointCondition});
+    }, this);
+
+    return breakpoints;
+  },
+
+  /**
    * Destroy/uninitialize the editor.
    */
   destroy: function SE_destroy()
   {
     if (Services.appinfo.OS == "Linux") {
       this._view.removeEventListener("Selection", this._onOrionSelection);
     }
     this._onOrionSelection = null;
@@ -931,17 +1198,21 @@ SourceEditor.prototype = {
 
     this.parentElement.removeChild(this._iframe);
     this.parentElement = null;
     this._iframeWindow = null;
     this._iframe = null;
     this._undoStack = null;
     this._styler = null;
     this._linesRuler = null;
+    this._annotationRuler = null;
+    this._overviewRuler = null;
     this._dragAndDrop = null;
     this._annotationModel = null;
     this._annotationStyler = null;
+    this._eventTarget = null;
+    this._eventListenersQueue = null;
     this._view = null;
     this._model = null;
     this._config = null;
     this._lastFind = null;
   },
 };
diff --git a/browser/devtools/sourceeditor/source-editor.jsm b/browser/devtools/sourceeditor/source-editor.jsm
--- a/browser/devtools/sourceeditor/source-editor.jsm
+++ b/browser/devtools/sourceeditor/source-editor.jsm
@@ -101,23 +101,103 @@ SourceEditor.MODES = {
  * Predefined themes for syntax highlighting.
  */
 SourceEditor.THEMES = {
   MOZILLA: "mozilla",
 };
 
 /**
  * Source editor configuration defaults.
+ * @see SourceEditor.init
  */
 SourceEditor.DEFAULTS = {
-  MODE: SourceEditor.MODES.TEXT,
-  THEME: SourceEditor.THEMES.MOZILLA,
-  UNDO_LIMIT: 200,
-  TAB_SIZE: 4, // overriden by pref
-  EXPAND_TAB: true, // overriden by pref
+  /**
+   * The text you want shown when the editor opens up.
+   * @type string
+   */
+  initialText: "",
+
+  /**
+   * The editor mode, based on the file type you want to edit. You can use one of
+   * the predefined modes.
+   *
+   * @see SourceEditor.MODES
+   * @type string
+   */
+  mode: SourceEditor.MODES.TEXT,
+
+  /**
+   * The syntax highlighting theme you want. You can use one of the predefined
+   * themes, or you can point to your CSS file.
+   *
+   * @see SourceEditor.THEMES.
+   * @type string
+   */
+  theme: SourceEditor.THEMES.MOZILLA,
+
+  /**
+   * How many steps should the undo stack hold.
+   * @type number
+   */
+  undoLimit: 200,
+
+  /**
+   * Define how many spaces to use for a tab character. This value is overridden
+   * by a user preference, see SourceEditor.PREFS.TAB_SIZE.
+   *
+   * @type number
+   */
+  tabSize: 4,
+
+  /**
+   * Tells if you want tab characters to be expanded to spaces. This value is
+   * overridden by a user preference, see SourceEditor.PREFS.EXPAND_TAB.
+   * @type boolean
+   */
+  expandTab: true,
+
+  /**
+   * Tells if you want the editor to be read only or not.
+   * @type boolean
+   */
+  readOnly: false,
+
+  /**
+   * Display the line numbers gutter.
+   * @type boolean
+   */
+  showLineNumbers: false,
+
+  /**
+   * Display the annotations gutter/ruler. This gutter currently supports
+   * annotations of breakpoint type.
+   * @type boolean
+   */
+  showAnnotationRuler: false,
+
+  /**
+   * Display the overview gutter/ruler. This gutter presents an overview of the
+   * current annotations in the editor, for example the breakpoints.
+   * @type boolean
+   */
+  showOverviewRuler: false,
+
+  /**
+   * An array of objects that allows you to define custom editor keyboard
+   * bindings. Each object can have:
+   *   - action - name of the editor action to invoke.
+   *   - code - keyCode for the shortcut.
+   *   - accel - boolean for the Accel key (Cmd on Macs, Ctrl on Linux/Windows).
+   *   - shift - boolean for the Shift key.
+   *   - alt - boolean for the Alt key.
+   *   - callback - optional function to invoke, if the action is not predefined
+   *   in the editor.
+   * @type array
+   */
+  keys: null,
 };
 
 /**
  * Known editor events you can listen for.
  */
 SourceEditor.EVENTS = {
   /**
    * The contextmenu event is fired when the editor context menu is invoked. The
@@ -180,16 +260,27 @@ SourceEditor.EVENTS = {
 
   /**
    * This MouseOut event is sent when the mouse pointer exits a line
    * annotation. The event object properties:
    *   - event - the DOM mouseout event object.
    *   - x and y - the mouse coordinates relative to the document being edited.
    */
   MOUSE_OUT: "MouseOut",
+
+  /**
+   * The BreakpointChange event is fired when a new breakpoint is added or when
+   * a breakpoint is removed - either through API use or through the editor UI.
+   * Event object properties:
+   *   - added - array that holds the new breakpoints.
+   *   - removed - array that holds the breakpoints that have been removed.
+   * Each object in the added/removed arrays holds two properties: line and
+   * condition.
+   */
+  BREAKPOINT_CHANGE: "BreakpointChange",
 };
 
 /**
  * Extend a destination object with properties from a source object.
  *
  * @param object aDestination
  * @param object aSource
  */
diff --git a/browser/devtools/sourceeditor/test/Makefile.in b/browser/devtools/sourceeditor/test/Makefile.in
--- a/browser/devtools/sourceeditor/test/Makefile.in
+++ b/browser/devtools/sourceeditor/test/Makefile.in
@@ -51,12 +51,13 @@ include $(topsrcdir)/config/rules.mk
 		browser_bug687568_pagescroll.js \
 		browser_bug687580_drag_and_drop.js \
 		browser_bug684546_reset_undo.js \
 		browser_bug695035_middle_click_paste.js \
 		browser_bug687160_line_api.js \
 		browser_bug650345_find.js \
 		browser_bug703692_focus_blur.js \
 		browser_bug725388_mouse_events.js \
+		browser_bug707987_debugger_breakpoints.js \
 		head.js \
 
 libs:: $(_BROWSER_TEST_FILES)
 	$(INSTALL) $(foreach f,$^,"$f") $(DEPTH)/_tests/testing/mochitest/browser/$(relativesrcdir)
diff --git a/browser/devtools/sourceeditor/test/browser_bug687573_vscroll.js b/browser/devtools/sourceeditor/test/browser_bug687573_vscroll.js
--- a/browser/devtools/sourceeditor/test/browser_bug687573_vscroll.js
+++ b/browser/devtools/sourceeditor/test/browser_bug687573_vscroll.js
@@ -43,17 +43,17 @@ function initEditor()
              "abbaabbaabbaabbaabbaabbaabbaabbaabbaabba\n" +
              "abbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabba\n" +
              "abbaabbaabbaabbaabbaabbaabbaabbaabbaabba\n" +
              "\n" +
              "abba\n";
 
   let config = {
     showLineNumbers: true,
-    placeholderText: text,
+    initialText: text,
   };
 
   editor = new SourceEditor();
   editor.init(box, config, editorLoaded);
 }
 
 function editorLoaded()
 {
diff --git a/browser/devtools/sourceeditor/test/browser_bug707987_debugger_breakpoints.js b/browser/devtools/sourceeditor/test/browser_bug707987_debugger_breakpoints.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/sourceeditor/test/browser_bug707987_debugger_breakpoints.js
@@ -0,0 +1,169 @@
+/* vim: set ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+function test() {
+
+  let temp = {};
+  Cu.import("resource:///modules/source-editor.jsm", temp);
+  let SourceEditor = temp.SourceEditor;
+
+  let component = Services.prefs.getCharPref(SourceEditor.PREFS.COMPONENT);
+  if (component == "textarea") {
+    ok(true, "skip test for bug 707987: only applicable for non-textarea components");
+    return;
+  }
+
+  waitForExplicitFinish();
+
+  let editor;
+
+  const windowUrl = "data:text/xml,<?xml version='1.0'?>" +
+    "<window xmlns='http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul'" +
+    " title='test for bug 707987' width='600' height='500'><hbox flex='1'/></window>";
+  const windowFeatures = "chrome,titlebar,toolbar,centerscreen,resizable,dialog=no";
+
+  let testWin = Services.ww.openWindow(null, windowUrl, "_blank", windowFeatures, null);
+  testWin.addEventListener("load", function onWindowLoad() {
+    testWin.removeEventListener("load", onWindowLoad, false);
+    waitForFocus(initEditor, testWin);
+  }, false);
+
+  function initEditor()
+  {
+    let hbox = testWin.document.querySelector("hbox");
+    editor = new SourceEditor();
+    editor.init(hbox, {showAnnotationRuler: true}, editorLoaded);
+  }
+
+  function editorLoaded()
+  {
+    editor.focus();
+
+    editor.setText("line1\nline2\nline3\nline4");
+
+    is(editor.getBreakpoints().length, 0, "no breakpoints");
+
+    let event = null;
+    let eventHandler = function(aEvent) {
+      event = aEvent;
+    };
+    editor.addEventListener(SourceEditor.EVENTS.BREAKPOINT_CHANGE, eventHandler);
+
+    // Add breakpoint at line 0
+
+    editor.addBreakpoint(0);
+
+    let breakpoints = editor.getBreakpoints();
+    is(breakpoints.length, 1, "one breakpoint added");
+    is(breakpoints[0].line, 0, "breakpoint[0].line is correct");
+    ok(!breakpoints[0].condition, "breakpoint[0].condition is correct");
+
+    ok(event, "breakpoint event fired");
+    is(event.added.length, 1, "one breakpoint added (confirmed)");
+    is(event.removed.length, 0, "no breakpoint removed");
+    is(event.added[0].line, 0, "event added[0].line is correct");
+    ok(!event.added[0].condition, "event added[0].condition is correct");
+
+    // Add breakpoint at line 3
+
+    event = null;
+    editor.addBreakpoint(3, "foo == 'bar'");
+
+    breakpoints = editor.getBreakpoints();
+    is(breakpoints.length, 2, "another breakpoint added");
+    is(breakpoints[0].line, 0, "breakpoint[0].line is correct");
+    ok(!breakpoints[0].condition, "breakpoint[0].condition is correct");
+    is(breakpoints[1].line, 3, "breakpoint[1].line is correct");
+    is(breakpoints[1].condition, "foo == 'bar'",
+       "breakpoint[1].condition is correct");
+
+    ok(event, "breakpoint event fired");
+    is(event.added.length, 1, "another breakpoint added (confirmed)");
+    is(event.removed.length, 0, "no breakpoint removed");
+    is(event.added[0].line, 3, "event added[0].line is correct");
+    is(event.added[0].condition, "foo == 'bar'",
+       "event added[0].condition is correct");
+
+    // Try to add another breakpoint at line 0
+
+    event = null;
+    editor.addBreakpoint(0);
+
+    is(editor.getBreakpoints().length, 2, "no breakpoint added");
+    is(event, null, "no breakpoint event fired");
+
+    // Try to remove a breakpoint from line 1
+
+    is(editor.removeBreakpoint(1), false, "removeBreakpoint(1) returns false");
+    is(editor.getBreakpoints().length, 2, "no breakpoint removed");
+    is(event, null, "no breakpoint event fired");
+
+    // Remove the breakpoint from line 0
+
+    is(editor.removeBreakpoint(0), true, "removeBreakpoint(0) returns true");
+
+    breakpoints = editor.getBreakpoints();
+    is(breakpoints[0].line, 3, "breakpoint[0].line is correct");
+    is(breakpoints[0].condition, "foo == 'bar'",
+       "breakpoint[0].condition is correct");
+
+    ok(event, "breakpoint event fired");
+    is(event.added.length, 0, "no breakpoint added");
+    is(event.removed.length, 1, "one breakpoint removed");
+    is(event.removed[0].line, 0, "event removed[0].line is correct");
+    ok(!event.removed[0].condition, "event removed[0].condition is correct");
+
+    // Remove the breakpoint from line 3
+
+    event = null;
+    is(editor.removeBreakpoint(3), true, "removeBreakpoint(3) returns true");
+
+    is(editor.getBreakpoints().length, 0, "no breakpoints");
+    ok(event, "breakpoint event fired");
+    is(event.added.length, 0, "no breakpoint added");
+    is(event.removed.length, 1, "one breakpoint removed");
+    is(event.removed[0].line, 3, "event removed[0].line is correct");
+    is(event.removed[0].condition, "foo == 'bar'",
+       "event removed[0].condition is correct");
+
+    // Add a breakpoint with the mouse
+
+    event = null;
+    EventUtils.synthesizeMouse(editor.editorElement, 10, 10, {}, testWin);
+
+    breakpoints = editor.getBreakpoints();
+    is(breakpoints.length, 1, "one breakpoint added");
+    is(breakpoints[0].line, 0, "breakpoint[0].line is correct");
+    ok(!breakpoints[0].condition, "breakpoint[0].condition is correct");
+
+    ok(event, "breakpoint event fired");
+    is(event.added.length, 1, "one breakpoint added (confirmed)");
+    is(event.removed.length, 0, "no breakpoint removed");
+    is(event.added[0].line, 0, "event added[0].line is correct");
+    ok(!event.added[0].condition, "event added[0].condition is correct");
+
+    // Remove a breakpoint with the mouse
+
+    event = null;
+    EventUtils.synthesizeMouse(editor.editorElement, 10, 10, {}, testWin);
+
+    breakpoints = editor.getBreakpoints();
+    is(breakpoints.length, 0, "one breakpoint removed");
+
+    ok(event, "breakpoint event fired");
+    is(event.added.length, 0, "no breakpoint added");
+    is(event.removed.length, 1, "one breakpoint removed (confirmed)");
+    is(event.removed[0].line, 0, "event removed[0].line is correct");
+    ok(!event.removed[0].condition, "event removed[0].condition is correct");
+
+    editor.destroy();
+
+    testWin.close();
+    testWin = editor = null;
+
+    waitForFocus(finish, window);
+  }
+}
diff --git a/browser/devtools/sourceeditor/test/browser_sourceeditor_initialization.js b/browser/devtools/sourceeditor/test/browser_sourceeditor_initialization.js
--- a/browser/devtools/sourceeditor/test/browser_sourceeditor_initialization.js
+++ b/browser/devtools/sourceeditor/test/browser_sourceeditor_initialization.js
@@ -32,34 +32,34 @@ function initEditor()
 {
   testDoc = testWin.document;
 
   let hbox = testDoc.querySelector("hbox");
 
   editor = new SourceEditor();
   let config = {
     showLineNumbers: true,
-    placeholderText: "foobarbaz",
+    initialText: "foobarbaz",
     tabSize: 7,
     expandTab: true,
   };
 
   editor.init(hbox, config, editorLoaded);
 }
 
 function editorLoaded()
 {
   ok(editor.editorElement, "editor loaded");
 
   is(editor.parentElement, testDoc.querySelector("hbox"),
      "parentElement is correct");
 
   editor.focus();
 
-  is(editor.getMode(), SourceEditor.DEFAULTS.MODE, "default editor mode");
+  is(editor.getMode(), SourceEditor.DEFAULTS.mode, "default editor mode");
 
   // Test general editing methods.
 
   ok(!editor.canUndo(), "canUndo() works (nothing to undo), just loaded");
 
   ok(!editor.readOnly, "editor is not read-only");
 
   is(editor.getText(), "foobarbaz", "placeholderText works");
diff --git a/browser/devtools/styleeditor/StyleEditor.jsm b/browser/devtools/styleeditor/StyleEditor.jsm
--- a/browser/devtools/styleeditor/StyleEditor.jsm
+++ b/browser/devtools/styleeditor/StyleEditor.jsm
@@ -217,17 +217,17 @@ StyleEditor.prototype = {
     // attach to new input element
     this.window.addEventListener("unload", this._onWindowUnloadBinding, false);
     this._focusOnSourceEditorReady = false;
 
     this._sourceEditor = null; // set it only when ready (safe to use)
 
     let sourceEditor = new SourceEditor();
     let config = {
-      placeholderText: this._state.text, //! this is initialText (bug 680371)
+      initialText: this._state.text,
       showLineNumbers: true,
       mode: SourceEditor.MODES.CSS,
       readOnly: this._state.readOnly,
       keys: this._getKeyBindings()
     };
 
     sourceEditor.init(aElement, config, function onSourceEditorReady() {
       setupBracketCompletion(sourceEditor);
diff --git a/browser/locales/en-US/chrome/browser/devtools/sourceeditor.properties b/browser/locales/en-US/chrome/browser/devtools/sourceeditor.properties
--- a/browser/locales/en-US/chrome/browser/devtools/sourceeditor.properties
+++ b/browser/locales/en-US/chrome/browser/devtools/sourceeditor.properties
@@ -23,8 +23,13 @@ findCmd.promptMessage=Search for:
 # when the user wants to jump to a specific line number in the code. You can
 # access this feature by pressing Ctrl-J on Windows/Linux or Cmd-J on Mac.
 gotoLineCmd.promptTitle=Go to line…
 
 # LOCALIZATION NOTE  (gotoLineCmd.promptMessage): This is the message shown when
 # the user wants to jump to a specific line number in the code. You can
 # access this feature by pressing Ctrl-J on Windows/Linux or Cmd-J on Mac.
 gotoLineCmd.promptMessage=Jump to line number:
+
+# LOCALIZATION NOTE  (annotation.breakpoint.title): This is the text shown in
+# front of any breakpoint annotation when it is displayed as a tooltip in one of
+# the editor gutters. This feature is used in the JavaScript Debugger.
+annotation.breakpoint.title=Breakpoint: %S
diff --git a/browser/themes/gnomestripe/devtools/orion-breakpoint.png b/browser/themes/gnomestripe/devtools/orion-breakpoint.png
new file mode 100644
index 0000000000000000000000000000000000000000..85f73d972841e7266223899044cc7fcd38552844
GIT binary patch
literal 626
zc$@)p0*(ENP)<h;3K|Lk000e1NJLTq000mG000mO1^@s6AM^iV00004b3#c}2nYxW
zd<bNS0006hNkl<ZIE|%~Pfrt36vcm2+i9V+H2q6uYN5t1s0tx0j0uUNF)nb&mvGJA
zh5N=OU&5UbjSDwyG#Hg=jOkEHaV$)yQ|Leo9cZ76+JZJ3qi6YYa^AW3oGS?-_#Zfb
zeJE<Wc={|yVN;{FZv!wKkQq-YEIde)RASP3zI5I}c4<}QRE=8;nZBP&YMH_(gYlHY
z;=@^~PawOrD$1t8<r~T$E$3frL_?9Dh_h=ur)pfgqhLEA=pA5Wc!==OAOMxa2D`OG
zs`VohHx)iE=P7EsNGdT&5<-w&S`~XoHM|KAVZWELXo#2Zwpf0<3BdeJihI*zY?Vza
zRviGj;%4#TtmFj9sT!jhA1Br^Bk?HD-{g6+{Jv-V%hxKclNPtHj<Tbf0BorS0FExH
zUNNaxOo9V0R@OH9W?xy`AUNRa@fru6gq#4DX@lGZz;3o^xBI)%ZVT*Yi~YS0@6>jm
zIdIBw>Tq-FaI>vj%w-aN0&|%J+q%``Ic3fqOiicwW*E3UU{)K<&s@PHyLhp_4Z!`$
zOWeIahMM0c9uCo{+Kf&|fFC_5YPxuweMLOsqtUjBh5U?P3=)qF1F&P%D3q$`rbS@T
zPf;~^v^YmniFHy)Dlusyt%yR&AR70hmyglQC7|@v7y+N3@{YwsTIp4~ugafu8sUf!
zZ@`1s-C0z<*`&UIOvN~0BK?~xchNnj59=DVI#F>!W@_>;j_F_U9rBU^VLv*CRsaA1
M07*qoM6N<$g4fs>mH+?%

diff --git a/browser/themes/gnomestripe/devtools/orion-container.css b/browser/themes/gnomestripe/devtools/orion-container.css
new file mode 100644
--- /dev/null
+++ b/browser/themes/gnomestripe/devtools/orion-container.css
@@ -0,0 +1,39 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+.viewTooltip {
+  display: none; /* TODO: add tooltips support, see bug 721752 */
+  font-family: monospace;
+  font-size: 13px;
+  background-color: InfoBackground;
+  color: InfoText;
+  padding: 2px;
+  border-radius: 4px;
+  border: 1px solid black;
+  z-index: 100;
+  position: fixed;
+  overflow: hidden;
+  white-space: pre;
+}
+
+.viewTooltip em {
+  font-style: normal;
+  font-weight: bold;
+}
+
+.annotationHTML {
+  cursor: pointer;
+  width: 16px;
+  height: 16px;
+  display: inline-block;
+  vertical-align: middle;
+  background-position: center;
+  background-repeat: no-repeat;
+}
+.annotationHTML.task {
+  background-image: url("chrome://browser/skin/devtools/orion-task.png");
+}
+.annotationHTML.breakpoint {
+  background-image: url("chrome://browser/skin/devtools/orion-breakpoint.png");
+}
diff --git a/browser/themes/gnomestripe/devtools/orion-task.png b/browser/themes/gnomestripe/devtools/orion-task.png
new file mode 100644
index 0000000000000000000000000000000000000000..42dbc00b655fffeae488cc2241d97407977f6dec
GIT binary patch
literal 413
zc$@*90b>4%P)<h;3K|Lk000e1NJLTq000mG000mO1^@s6AM^iV00004b3#c}2nYxW
zd<bNS00040Nkl<ZIE|%~u}i~16vn@pq%A@Qrwm#9F9;&tTwLl9kf07-L_ra;gU}&J
z5eYchMTBm4P%DKFI=Occ{1*xi(xHPm6eO3s%Q@wm*hB+;@WH)1zTdsayHkV^m?yMo
zF&I9H`?t$nrtRfZRLUC)04Pxf2M-ldURuco7=FFtW^14%DhRni!2Dc*kWbs50+;~#
z2e7+#0n0G4ce^?Z;4}oG-<jsa^%g9{#Aq@Gr{OGs{Q;;~+tPgXybl%wEJ#2Qf>0mz
zY8!<5QgO4_uYph>EXV*f><%o$M8obN;J(a9lQEh-2LbmH@C*Pa9B$XfXflRnm^j;f
zlxDYUgK;Xw2~V#;Q*|_Zj)X)vYpR}5W(x(igo0Xv*RSFI^8;SLCimis0}^8_>Lqz_
z{c@DZ<B>5&fug>cYWN+Dro6;sr-{~`n+tHVb1v7)yx;i;N{ha1Q$r5E00000NkvXX
Hu0mjf2D_^v

diff --git a/browser/themes/gnomestripe/devtools/orion.css b/browser/themes/gnomestripe/devtools/orion.css
--- a/browser/themes/gnomestripe/devtools/orion.css
+++ b/browser/themes/gnomestripe/devtools/orion.css
@@ -13,26 +13,96 @@
   background: #f0f0ff; /* Background of the editor */
   padding-left: 4px;
 }
 
 .readonly > .view {
   background: #f0f0ff;
 }
 
-/* Styles for the line number ruler */
-.rulerLines {
-  border-right: 1px solid #b4c4d3;
+.ruler {
   background: #cddae5;
   color: #7a8a99;
+}
+.ruler.annotations {
+  width: 16px;
+  padding-left: 4px;
+}
+.ruler.lines {
+  border-right: 1px solid #b4c4d3;
+  min-width: 1.4em;
   padding-left: 4px;
   padding-right: 4px;
   text-align: end;
 }
 
+.ruler.linesWithAnnotations {
+  min-width: 0;
+  padding-left: 0;
+}
+
+.ruler.overview {
+  border-left: 1px solid #b4c4d3;
+  width: 14px;
+  text-align: start;
+}
+
+/* Styles for the annotation ruler (first line) */
+.annotationHTML {
+  cursor: pointer;
+  width: 16px;
+  height: 16px;
+  display: inline-block;
+  vertical-align: middle;
+  background-position: center;
+  background-repeat: no-repeat;
+}
+.annotationHTML.task {
+  background-image: url("chrome://browser/skin/devtools/orion-task.png");
+}
+.annotationHTML.breakpoint {
+  background-image: url("chrome://browser/skin/devtools/orion-breakpoint.png");
+}
+
+/* Styles for the overview ruler  */
+.annotationOverview {
+  cursor: pointer;
+  border-radius: 2px;
+  left: 2px;
+  width: 8px;
+}
+.annotationOverview.task {
+  background-color: lightgreen;
+  border: 1px solid green;
+}
+.annotationOverview.breakpoint {
+  background-color: lightblue;
+  border: 1px solid blue;
+}
+.annotationOverview.currentBracket {
+  background-color: lightgray;
+  border: 1px solid red;
+}
+.annotationOverview.matchingBracket {
+  background-color: lightgray;
+  border: 1px solid red;
+}
+
+/* Styles for text range */
+.annotationRange {
+  background-repeat: repeat-x;
+  background-position: left bottom;
+}
+.annotationRange.task {
+  outline: 1px dashed rgba(0, 255, 0, 0.5);
+}
+.annotationRange.matchingBracket {
+  outline: 1px solid grey;
+}
+
 .token_singleline_comment {
   color: #45a946; /* green */
 }
 
 .token_multiline_comment {
   color: #45a946; /* green */
 }
 
@@ -105,12 +175,8 @@
   color: #1e66b1; /* blue */
   font-style: italic;
 }
 
 .invalid {
   color: red;
   font-weight: bold;
 }
-
-.annotationRange.matchingBracket {
-  outline: 1px solid grey;
-}
diff --git a/browser/themes/gnomestripe/jar.mn b/browser/themes/gnomestripe/jar.mn
--- a/browser/themes/gnomestripe/jar.mn
+++ b/browser/themes/gnomestripe/jar.mn
@@ -90,16 +90,19 @@ browser.jar:
   skin/classic/browser/devtools/commandline.png       (devtools/commandline.png)
   skin/classic/browser/devtools/goto-mdn.png          (devtools/goto-mdn.png)
   skin/classic/browser/devtools/csshtmltree.css       (devtools/csshtmltree.css)
   skin/classic/browser/devtools/webconsole.css                  (devtools/webconsole.css)
   skin/classic/browser/devtools/webconsole_networkpanel.css     (devtools/webconsole_networkpanel.css)
   skin/classic/browser/devtools/webconsole.png                  (devtools/webconsole.png)
   skin/classic/browser/devtools/gcli.css              (devtools/gcli.css)
   skin/classic/browser/devtools/orion.css             (devtools/orion.css)
+  skin/classic/browser/devtools/orion-container.css   (devtools/orion-container.css)
+  skin/classic/browser/devtools/orion-task.png        (devtools/orion-task.png)
+  skin/classic/browser/devtools/orion-breakpoint.png  (devtools/orion-breakpoint.png)
   skin/classic/browser/devtools/breadcrumbs/ltr-end-pressed.png              (devtools/breadcrumbs/ltr-end-pressed.png)
   skin/classic/browser/devtools/breadcrumbs/ltr-end-selected-pressed.png     (devtools/breadcrumbs/ltr-end-selected-pressed.png)
   skin/classic/browser/devtools/breadcrumbs/ltr-end-selected.png             (devtools/breadcrumbs/ltr-end-selected.png)
   skin/classic/browser/devtools/breadcrumbs/ltr-end.png                      (devtools/breadcrumbs/ltr-end.png)
   skin/classic/browser/devtools/breadcrumbs/ltr-middle-pressed.png           (devtools/breadcrumbs/ltr-middle-pressed.png)
   skin/classic/browser/devtools/breadcrumbs/ltr-middle-selected-pressed.png  (devtools/breadcrumbs/ltr-middle-selected-pressed.png)
   skin/classic/browser/devtools/breadcrumbs/ltr-middle-selected.png          (devtools/breadcrumbs/ltr-middle-selected.png)
   skin/classic/browser/devtools/breadcrumbs/ltr-middle.png                   (devtools/breadcrumbs/ltr-middle.png)
diff --git a/browser/themes/pinstripe/devtools/orion-breakpoint.png b/browser/themes/pinstripe/devtools/orion-breakpoint.png
new file mode 100644
index 0000000000000000000000000000000000000000..85f73d972841e7266223899044cc7fcd38552844
GIT binary patch
literal 626
zc$@)p0*(ENP)<h;3K|Lk000e1NJLTq000mG000mO1^@s6AM^iV00004b3#c}2nYxW
zd<bNS0006hNkl<ZIE|%~Pfrt36vcm2+i9V+H2q6uYN5t1s0tx0j0uUNF)nb&mvGJA
zh5N=OU&5UbjSDwyG#Hg=jOkEHaV$)yQ|Leo9cZ76+JZJ3qi6YYa^AW3oGS?-_#Zfb
zeJE<Wc={|yVN;{FZv!wKkQq-YEIde)RASP3zI5I}c4<}QRE=8;nZBP&YMH_(gYlHY
z;=@^~PawOrD$1t8<r~T$E$3frL_?9Dh_h=ur)pfgqhLEA=pA5Wc!==OAOMxa2D`OG
zs`VohHx)iE=P7EsNGdT&5<-w&S`~XoHM|KAVZWELXo#2Zwpf0<3BdeJihI*zY?Vza
zRviGj;%4#TtmFj9sT!jhA1Br^Bk?HD-{g6+{Jv-V%hxKclNPtHj<Tbf0BorS0FExH
zUNNaxOo9V0R@OH9W?xy`AUNRa@fru6gq#4DX@lGZz;3o^xBI)%ZVT*Yi~YS0@6>jm
zIdIBw>Tq-FaI>vj%w-aN0&|%J+q%``Ic3fqOiicwW*E3UU{)K<&s@PHyLhp_4Z!`$
zOWeIahMM0c9uCo{+Kf&|fFC_5YPxuweMLOsqtUjBh5U?P3=)qF1F&P%D3q$`rbS@T
zPf;~^v^YmniFHy)Dlusyt%yR&AR70hmyglQC7|@v7y+N3@{YwsTIp4~ugafu8sUf!
zZ@`1s-C0z<*`&UIOvN~0BK?~xchNnj59=DVI#F>!W@_>;j_F_U9rBU^VLv*CRsaA1
M07*qoM6N<$g4fs>mH+?%

diff --git a/browser/themes/pinstripe/devtools/orion-container.css b/browser/themes/pinstripe/devtools/orion-container.css
new file mode 100644
--- /dev/null
+++ b/browser/themes/pinstripe/devtools/orion-container.css
@@ -0,0 +1,39 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+.viewTooltip {
+  display: none; /* TODO: add tooltips support, see bug 721752 */
+  font-family: monospace;
+  font-size: 13px;
+  background-color: InfoBackground;
+  color: InfoText;
+  padding: 2px;
+  border-radius: 4px;
+  border: 1px solid black;
+  z-index: 100;
+  position: fixed;
+  overflow: hidden;
+  white-space: pre;
+}
+
+.viewTooltip em {
+  font-style: normal;
+  font-weight: bold;
+}
+
+.annotationHTML {
+  cursor: pointer;
+  width: 16px;
+  height: 16px;
+  display: inline-block;
+  vertical-align: middle;
+  background-position: center;
+  background-repeat: no-repeat;
+}
+.annotationHTML.task {
+  background-image: url("chrome://browser/skin/devtools/orion-task.png");
+}
+.annotationHTML.breakpoint {
+  background-image: url("chrome://browser/skin/devtools/orion-breakpoint.png");
+}
diff --git a/browser/themes/pinstripe/devtools/orion-task.png b/browser/themes/pinstripe/devtools/orion-task.png
new file mode 100644
index 0000000000000000000000000000000000000000..42dbc00b655fffeae488cc2241d97407977f6dec
GIT binary patch
literal 413
zc$@*90b>4%P)<h;3K|Lk000e1NJLTq000mG000mO1^@s6AM^iV00004b3#c}2nYxW
zd<bNS00040Nkl<ZIE|%~u}i~16vn@pq%A@Qrwm#9F9;&tTwLl9kf07-L_ra;gU}&J
z5eYchMTBm4P%DKFI=Occ{1*xi(xHPm6eO3s%Q@wm*hB+;@WH)1zTdsayHkV^m?yMo
zF&I9H`?t$nrtRfZRLUC)04Pxf2M-ldURuco7=FFtW^14%DhRni!2Dc*kWbs50+;~#
z2e7+#0n0G4ce^?Z;4}oG-<jsa^%g9{#Aq@Gr{OGs{Q;;~+tPgXybl%wEJ#2Qf>0mz
zY8!<5QgO4_uYph>EXV*f><%o$M8obN;J(a9lQEh-2LbmH@C*Pa9B$XfXflRnm^j;f
zlxDYUgK;Xw2~V#;Q*|_Zj)X)vYpR}5W(x(igo0Xv*RSFI^8;SLCimis0}^8_>Lqz_
z{c@DZ<B>5&fug>cYWN+Dro6;sr-{~`n+tHVb1v7)yx;i;N{ha1Q$r5E00000NkvXX
Hu0mjf2D_^v

diff --git a/browser/themes/pinstripe/devtools/orion.css b/browser/themes/pinstripe/devtools/orion.css
--- a/browser/themes/pinstripe/devtools/orion.css
+++ b/browser/themes/pinstripe/devtools/orion.css
@@ -13,26 +13,96 @@
   background: #f0f0ff; /* Background of the editor */
   padding-left: 4px;
 }
 
 .readonly > .view {
   background: #f0f0ff;
 }
 
-/* Styles for the line number ruler */
-.rulerLines {
-  border-right: 1px solid #b4c4d3;
+.ruler {
   background: #cddae5;
   color: #7a8a99;
+}
+.ruler.annotations {
+  width: 16px;
+  padding-left: 4px;
+}
+.ruler.lines {
+  border-right: 1px solid #b4c4d3;
+  min-width: 1.4em;
   padding-left: 4px;
   padding-right: 4px;
   text-align: end;
 }
 
+.ruler.linesWithAnnotations {
+  min-width: 0;
+  padding-left: 0;
+}
+
+.ruler.overview {
+  border-left: 1px solid #b4c4d3;
+  width: 14px;
+  text-align: start;
+}
+
+/* Styles for the annotation ruler (first line) */
+.annotationHTML {
+  cursor: pointer;
+  width: 16px;
+  height: 16px;
+  display: inline-block;
+  vertical-align: middle;
+  background-position: center;
+  background-repeat: no-repeat;
+}
+.annotationHTML.task {
+  background-image: url("chrome://browser/skin/devtools/orion-task.png");
+}
+.annotationHTML.breakpoint {
+  background-image: url("chrome://browser/skin/devtools/orion-breakpoint.png");
+}
+
+/* Styles for the overview ruler  */
+.annotationOverview {
+  cursor: pointer;
+  border-radius: 2px;
+  left: 2px;
+  width: 8px;
+}
+.annotationOverview.task {
+  background-color: lightgreen;
+  border: 1px solid green;
+}
+.annotationOverview.breakpoint {
+  background-color: lightblue;
+  border: 1px solid blue;
+}
+.annotationOverview.currentBracket {
+  background-color: lightgray;
+  border: 1px solid red;
+}
+.annotationOverview.matchingBracket {
+  background-color: lightgray;
+  border: 1px solid red;
+}
+
+/* Styles for text range */
+.annotationRange {
+  background-repeat: repeat-x;
+  background-position: left bottom;
+}
+.annotationRange.task {
+  outline: 1px dashed rgba(0, 255, 0, 0.5);
+}
+.annotationRange.matchingBracket {
+  outline: 1px solid grey;
+}
+
 .token_singleline_comment {
   color: #45a946; /* green */
 }
 
 .token_multiline_comment {
   color: #45a946; /* green */
 }
 
@@ -105,12 +175,8 @@
   color: #1e66b1; /* blue */
   font-style: italic;
 }
 
 .invalid {
   color: red;
   font-weight: bold;
 }
-
-.annotationRange.matchingBracket {
-  outline: 1px solid grey;
-}
diff --git a/browser/themes/pinstripe/jar.mn b/browser/themes/pinstripe/jar.mn
--- a/browser/themes/pinstripe/jar.mn
+++ b/browser/themes/pinstripe/jar.mn
@@ -126,16 +126,19 @@ browser.jar:
   skin/classic/browser/tabview/tabview.css                  (tabview/tabview.css)
 * skin/classic/browser/devtools/common.css                  (devtools/common.css)
   skin/classic/browser/devtools/arrows.png                  (devtools/arrows.png)
   skin/classic/browser/devtools/commandline.png             (devtools/commandline.png)
   skin/classic/browser/devtools/goto-mdn.png                (devtools/goto-mdn.png)
   skin/classic/browser/devtools/csshtmltree.css             (devtools/csshtmltree.css)
   skin/classic/browser/devtools/gcli.css                    (devtools/gcli.css)
   skin/classic/browser/devtools/orion.css                   (devtools/orion.css)
+  skin/classic/browser/devtools/orion-container.css         (devtools/orion-container.css)
+  skin/classic/browser/devtools/orion-task.png              (devtools/orion-task.png)
+  skin/classic/browser/devtools/orion-breakpoint.png        (devtools/orion-breakpoint.png)
   skin/classic/browser/devtools/toolbarbutton-close.png     (devtools/toolbarbutton-close.png)
 * skin/classic/browser/devtools/webconsole.css                  (devtools/webconsole.css)
   skin/classic/browser/devtools/webconsole_networkpanel.css     (devtools/webconsole_networkpanel.css)
   skin/classic/browser/devtools/webconsole.png                  (devtools/webconsole.png)
   skin/classic/browser/devtools/breadcrumbs/ltr-end-pressed.png              (devtools/breadcrumbs/ltr-end-pressed.png)
   skin/classic/browser/devtools/breadcrumbs/ltr-end-selected-pressed.png     (devtools/breadcrumbs/ltr-end-selected-pressed.png)
   skin/classic/browser/devtools/breadcrumbs/ltr-end-selected.png             (devtools/breadcrumbs/ltr-end-selected.png)
   skin/classic/browser/devtools/breadcrumbs/ltr-end.png                      (devtools/breadcrumbs/ltr-end.png)
diff --git a/browser/themes/winstripe/devtools/orion-breakpoint.png b/browser/themes/winstripe/devtools/orion-breakpoint.png
new file mode 100644
index 0000000000000000000000000000000000000000..85f73d972841e7266223899044cc7fcd38552844
GIT binary patch
literal 626
zc$@)p0*(ENP)<h;3K|Lk000e1NJLTq000mG000mO1^@s6AM^iV00004b3#c}2nYxW
zd<bNS0006hNkl<ZIE|%~Pfrt36vcm2+i9V+H2q6uYN5t1s0tx0j0uUNF)nb&mvGJA
zh5N=OU&5UbjSDwyG#Hg=jOkEHaV$)yQ|Leo9cZ76+JZJ3qi6YYa^AW3oGS?-_#Zfb
zeJE<Wc={|yVN;{FZv!wKkQq-YEIde)RASP3zI5I}c4<}QRE=8;nZBP&YMH_(gYlHY
z;=@^~PawOrD$1t8<r~T$E$3frL_?9Dh_h=ur)pfgqhLEA=pA5Wc!==OAOMxa2D`OG
zs`VohHx)iE=P7EsNGdT&5<-w&S`~XoHM|KAVZWELXo#2Zwpf0<3BdeJihI*zY?Vza
zRviGj;%4#TtmFj9sT!jhA1Br^Bk?HD-{g6+{Jv-V%hxKclNPtHj<Tbf0BorS0FExH
zUNNaxOo9V0R@OH9W?xy`AUNRa@fru6gq#4DX@lGZz;3o^xBI)%ZVT*Yi~YS0@6>jm
zIdIBw>Tq-FaI>vj%w-aN0&|%J+q%``Ic3fqOiicwW*E3UU{)K<&s@PHyLhp_4Z!`$
zOWeIahMM0c9uCo{+Kf&|fFC_5YPxuweMLOsqtUjBh5U?P3=)qF1F&P%D3q$`rbS@T
zPf;~^v^YmniFHy)Dlusyt%yR&AR70hmyglQC7|@v7y+N3@{YwsTIp4~ugafu8sUf!
zZ@`1s-C0z<*`&UIOvN~0BK?~xchNnj59=DVI#F>!W@_>;j_F_U9rBU^VLv*CRsaA1
M07*qoM6N<$g4fs>mH+?%

diff --git a/browser/themes/winstripe/devtools/orion-container.css b/browser/themes/winstripe/devtools/orion-container.css
new file mode 100644
--- /dev/null
+++ b/browser/themes/winstripe/devtools/orion-container.css
@@ -0,0 +1,39 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+.viewTooltip {
+  display: none; /* TODO: add tooltips support, see bug 721752 */
+  font-family: monospace;
+  font-size: 13px;
+  background-color: InfoBackground;
+  color: InfoText;
+  padding: 2px;
+  border-radius: 4px;
+  border: 1px solid black;
+  z-index: 100;
+  position: fixed;
+  overflow: hidden;
+  white-space: pre;
+}
+
+.viewTooltip em {
+  font-style: normal;
+  font-weight: bold;
+}
+
+.annotationHTML {
+  cursor: pointer;
+  width: 16px;
+  height: 16px;
+  display: inline-block;
+  vertical-align: middle;
+  background-position: center;
+  background-repeat: no-repeat;
+}
+.annotationHTML.task {
+  background-image: url("chrome://browser/skin/devtools/orion-task.png");
+}
+.annotationHTML.breakpoint {
+  background-image: url("chrome://browser/skin/devtools/orion-breakpoint.png");
+}
diff --git a/browser/themes/winstripe/devtools/orion-task.png b/browser/themes/winstripe/devtools/orion-task.png
new file mode 100644
index 0000000000000000000000000000000000000000..42dbc00b655fffeae488cc2241d97407977f6dec
GIT binary patch
literal 413
zc$@*90b>4%P)<h;3K|Lk000e1NJLTq000mG000mO1^@s6AM^iV00004b3#c}2nYxW
zd<bNS00040Nkl<ZIE|%~u}i~16vn@pq%A@Qrwm#9F9;&tTwLl9kf07-L_ra;gU}&J
z5eYchMTBm4P%DKFI=Occ{1*xi(xHPm6eO3s%Q@wm*hB+;@WH)1zTdsayHkV^m?yMo
zF&I9H`?t$nrtRfZRLUC)04Pxf2M-ldURuco7=FFtW^14%DhRni!2Dc*kWbs50+;~#
z2e7+#0n0G4ce^?Z;4}oG-<jsa^%g9{#Aq@Gr{OGs{Q;;~+tPgXybl%wEJ#2Qf>0mz
zY8!<5QgO4_uYph>EXV*f><%o$M8obN;J(a9lQEh-2LbmH@C*Pa9B$XfXflRnm^j;f
zlxDYUgK;Xw2~V#;Q*|_Zj)X)vYpR}5W(x(igo0Xv*RSFI^8;SLCimis0}^8_>Lqz_
z{c@DZ<B>5&fug>cYWN+Dro6;sr-{~`n+tHVb1v7)yx;i;N{ha1Q$r5E00000NkvXX
Hu0mjf2D_^v

diff --git a/browser/themes/winstripe/devtools/orion.css b/browser/themes/winstripe/devtools/orion.css
--- a/browser/themes/winstripe/devtools/orion.css
+++ b/browser/themes/winstripe/devtools/orion.css
@@ -13,26 +13,96 @@
   background: #f0f0ff; /* Background of the editor */
   padding-left: 4px;
 }
 
 .readonly > .view {
   background: #f0f0ff;
 }
 
-/* Styles for the line number ruler */
-.rulerLines {
-  border-right: 1px solid #b4c4d3;
+.ruler {
   background: #cddae5;
   color: #7a8a99;
+}
+.ruler.annotations {
+  width: 16px;
+  padding-left: 4px;
+}
+.ruler.lines {
+  border-right: 1px solid #b4c4d3;
+  min-width: 1.4em;
   padding-left: 4px;
   padding-right: 4px;
   text-align: end;
 }
 
+.ruler.linesWithAnnotations {
+  min-width: 0;
+  padding-left: 0;
+}
+
+.ruler.overview {
+  border-left: 1px solid #b4c4d3;
+  width: 14px;
+  text-align: start;
+}
+
+/* Styles for the annotation ruler (first line) */
+.annotationHTML {
+  cursor: pointer;
+  width: 16px;
+  height: 16px;
+  display: inline-block;
+  vertical-align: middle;
+  background-position: center;
+  background-repeat: no-repeat;
+}
+.annotationHTML.task {
+  background-image: url("chrome://browser/skin/devtools/orion-task.png");
+}
+.annotationHTML.breakpoint {
+  background-image: url("chrome://browser/skin/devtools/orion-breakpoint.png");
+}
+
+/* Styles for the overview ruler  */
+.annotationOverview {
+  cursor: pointer;
+  border-radius: 2px;
+  left: 2px;
+  width: 8px;
+}
+.annotationOverview.task {
+  background-color: lightgreen;
+  border: 1px solid green;
+}
+.annotationOverview.breakpoint {
+  background-color: lightblue;
+  border: 1px solid blue;
+}
+.annotationOverview.currentBracket {
+  background-color: lightgray;
+  border: 1px solid red;
+}
+.annotationOverview.matchingBracket {
+  background-color: lightgray;
+  border: 1px solid red;
+}
+
+/* Styles for text range */
+.annotationRange {
+  background-repeat: repeat-x;
+  background-position: left bottom;
+}
+.annotationRange.task {
+  outline: 1px dashed rgba(0, 255, 0, 0.5);
+}
+.annotationRange.matchingBracket {
+  outline: 1px solid grey;
+}
+
 .token_singleline_comment {
   color: #45a946; /* green */
 }
 
 .token_multiline_comment {
   color: #45a946; /* green */
 }
 
@@ -105,12 +175,8 @@
   color: #1e66b1; /* blue */
   font-style: italic;
 }
 
 .invalid {
   color: red;
   font-weight: bold;
 }
-
-.annotationRange.matchingBracket {
-  outline: 1px solid grey;
-}
diff --git a/browser/themes/winstripe/jar.mn b/browser/themes/winstripe/jar.mn
--- a/browser/themes/winstripe/jar.mn
+++ b/browser/themes/winstripe/jar.mn
@@ -111,16 +111,19 @@ browser.jar:
         skin/classic/browser/tabview/tabview.css                    (tabview/tabview.css)
         skin/classic/browser/devtools/common.css                    (devtools/common.css)
         skin/classic/browser/devtools/arrows.png                    (devtools/arrows.png)
         skin/classic/browser/devtools/commandline.png               (devtools/commandline.png)
         skin/classic/browser/devtools/goto-mdn.png                  (devtools/goto-mdn.png)
         skin/classic/browser/devtools/csshtmltree.css               (devtools/csshtmltree.css)
         skin/classic/browser/devtools/gcli.css                      (devtools/gcli.css)
         skin/classic/browser/devtools/orion.css                     (devtools/orion.css)
+        skin/classic/browser/devtools/orion-container.css           (devtools/orion-container.css)
+        skin/classic/browser/devtools/orion-task.png                (devtools/orion-task.png)
+        skin/classic/browser/devtools/orion-breakpoint.png          (devtools/orion-breakpoint.png)
         skin/classic/browser/devtools/toolbarbutton-close.png       (devtools/toolbarbutton-close.png)
         skin/classic/browser/devtools/webconsole.css                  (devtools/webconsole.css)
         skin/classic/browser/devtools/webconsole_networkpanel.css     (devtools/webconsole_networkpanel.css)
         skin/classic/browser/devtools/webconsole.png                  (devtools/webconsole.png)
         skin/classic/browser/devtools/breadcrumbs/ltr-end-pressed.png              (devtools/breadcrumbs/ltr-end-pressed.png)
         skin/classic/browser/devtools/breadcrumbs/ltr-end-selected-pressed.png     (devtools/breadcrumbs/ltr-end-selected-pressed.png)
         skin/classic/browser/devtools/breadcrumbs/ltr-end-selected.png             (devtools/breadcrumbs/ltr-end-selected.png)
         skin/classic/browser/devtools/breadcrumbs/ltr-end.png                      (devtools/breadcrumbs/ltr-end.png)
@@ -277,16 +280,19 @@ browser.jar:
         skin/classic/aero/browser/tabview/tabview.css                (tabview/tabview.css)
         skin/classic/aero/browser/devtools/common.css                (devtools/common.css)
         skin/classic/aero/browser/devtools/arrows.png                (devtools/arrows.png)
         skin/classic/aero/browser/devtools/commandline.png           (devtools/commandline.png)
         skin/classic/aero/browser/devtools/goto-mdn.png              (devtools/goto-mdn.png)
         skin/classic/aero/browser/devtools/csshtmltree.css           (devtools/csshtmltree.css)
         skin/classic/aero/browser/devtools/gcli.css                  (devtools/gcli.css)
         skin/classic/aero/browser/devtools/orion.css                 (devtools/orion.css)
+        skin/classic/aero/browser/devtools/orion-container.css       (devtools/orion-container.css)
+        skin/classic/aero/browser/devtools/orion-task.png            (devtools/orion-task.png)
+        skin/classic/aero/browser/devtools/orion-breakpoint.png      (devtools/orion-breakpoint.png)
         skin/classic/aero/browser/devtools/toolbarbutton-close.png   (devtools/toolbarbutton-close.png)
         skin/classic/aero/browser/devtools/webconsole.css                  (devtools/webconsole.css)
         skin/classic/aero/browser/devtools/webconsole_networkpanel.css     (devtools/webconsole_networkpanel.css)
         skin/classic/aero/browser/devtools/webconsole.png                  (devtools/webconsole.png)
         skin/classic/aero/browser/devtools/breadcrumbs/ltr-end-pressed.png              (devtools/breadcrumbs/ltr-end-pressed.png)
         skin/classic/aero/browser/devtools/breadcrumbs/ltr-end-selected-pressed.png     (devtools/breadcrumbs/ltr-end-selected-pressed.png)
         skin/classic/aero/browser/devtools/breadcrumbs/ltr-end-selected.png             (devtools/breadcrumbs/ltr-end-selected.png)
         skin/classic/aero/browser/devtools/breadcrumbs/ltr-end.png                      (devtools/breadcrumbs/ltr-end.png)
