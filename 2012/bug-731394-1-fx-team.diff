# HG changeset patch
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1330465951 -7200
# Node ID 4d2ea87491efc3610aa348b923726fe84cad8e11
# Parent  4b60c0c155f98d995b8efdb9802cb2c6c393c658
Bug 731394 - Source Editor in read only mode is not entirely read only

diff --git a/browser/devtools/debugger/DebuggerUI.jsm b/browser/devtools/debugger/DebuggerUI.jsm
--- a/browser/devtools/debugger/DebuggerUI.jsm
+++ b/browser/devtools/debugger/DebuggerUI.jsm
@@ -327,16 +327,17 @@ DebuggerUI.prototype = {
    *        The content type of the source script.
    */
   _onSourceLoaded: function DebuggerUI__onSourceLoaded(aSourceUrl,
                                                        aSourceText,
                                                        aContentType) {
     let dbg = this.getDebugger(this.aWindow.gBrowser.selectedTab);
     dbg.debuggerWindow.SourceScripts.setEditorMode(aSourceUrl, aContentType);
     dbg.editor.setText(aSourceText);
+    dbg.editor.resetUndo();
     let doc = dbg.frame.contentDocument;
     let scripts = doc.getElementById("scripts");
     let elt = scripts.getElementsByAttribute("value", aSourceUrl)[0];
     let script = elt.getUserData("sourceScript");
     script.loaded = true;
     script.text = aSourceText;
     script.contentType = aContentType;
     elt.setUserData("sourceScript", script, null);
diff --git a/browser/devtools/debugger/debugger.js b/browser/devtools/debugger/debugger.js
--- a/browser/devtools/debugger/debugger.js
+++ b/browser/devtools/debugger/debugger.js
@@ -541,18 +541,20 @@ var SourceScripts = {
    */
   _showScript: function SS_showScript(aScript) {
     if (!aScript.loaded) {
       // Notify the chrome code that we need to load a script file.
       var evt = document.createEvent("CustomEvent");
       evt.initCustomEvent("Debugger:LoadSource", true, false, aScript.url);
       document.documentElement.dispatchEvent(evt);
       window.editor.setText(DebuggerView.getStr("loadingText"));
+      window.editor.resetUndo();
     } else {
       window.editor.setText(aScript.text);
+      window.editor.resetUndo();
     }
   }
 };
 
 SourceScripts.onPaused = SourceScripts.onPaused.bind(SourceScripts);
 SourceScripts.onScripts = SourceScripts.onScripts.bind(SourceScripts);
 SourceScripts.onNewScript = SourceScripts.onNewScript.bind(SourceScripts);
 SourceScripts.onScriptsCleared = SourceScripts.onScriptsCleared.bind(SourceScripts);
diff --git a/browser/devtools/debugger/debugger.xul b/browser/devtools/debugger/debugger.xul
--- a/browser/devtools/debugger/debugger.xul
+++ b/browser/devtools/debugger/debugger.xul
@@ -40,20 +40,30 @@
 <?xml-stylesheet href="chrome://browser/skin/" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/content/orion.css" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/content/debugger.css" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/skin/devtools/debugger.css" type="text/css"?>
 <!DOCTYPE window [
 <!ENTITY % debuggerDTD SYSTEM "chrome://browser/locale/devtools/debugger.dtd" >
  %debuggerDTD;
 ]>
+<?xul-overlay href="chrome://global/content/editMenuOverlay.xul"?>
+<?xul-overlay href="chrome://browser/content/source-editor-overlay.xul"?>
 <xul:window xmlns="http://www.w3.org/1999/xhtml"
             xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
+    <xul:script type="text/javascript" src="chrome://global/content/globalOverlay.js"/>
     <xul:script type="text/javascript" src="debugger.js"/>
     <xul:script type="text/javascript" src="debugger-view.js"/>
+    <xul:popupset id="debugger-popups">
+      <xul:menupopup id="sourceEditorContextMenu"/>
+    </xul:popupset>
+    <xul:commandset id="editMenuCommands"/>
+    <xul:commandset id="sourceEditorCommands"/>
+    <xul:keyset id="editMenuKeys"/>
+    <xul:keyset id="sourceEditorKeys"/>
 
     <div id="body" class="vbox flex">
         <xul:toolbar id="dbg-toolbar">
             <xul:button id="close">&debuggerUI.closeButton;</xul:button>
             <xul:button id="resume"/>
             <xul:menulist id="scripts"/>
         </xul:toolbar>
         <div id="dbg-content" class="hbox flex">
diff --git a/browser/devtools/scratchpad/scratchpad.xul b/browser/devtools/scratchpad/scratchpad.xul
--- a/browser/devtools/scratchpad/scratchpad.xul
+++ b/browser/devtools/scratchpad/scratchpad.xul
@@ -230,27 +230,27 @@
                 key="key_redo"
                 accesskey="&redoCmd.accesskey;"
                 command="se-cmd-redo"/>
       <menuseparator/>
       <menuitem id="sp-menu-cut"
                 label="&cutCmd.label;"
                 key="key_cut"
                 accesskey="&cutCmd.accesskey;"
-                command="cmd_cut"/>
+                command="se-cmd-cut"/>
       <menuitem id="sp-menu-copy"
                 label="&copyCmd.label;"
                 key="key_copy"
                 accesskey="&copyCmd.accesskey;"
                 command="cmd_copy"/>
       <menuitem id="sp-menu-paste"
                 label="&pasteCmd.label;"
                 key="key_paste"
                 accesskey="&pasteCmd.accesskey;"
-                command="cmd_paste"/>
+                command="se-cmd-paste"/>
       <menuseparator/>
       <menuitem id="sp-menu-selectAll"
                 label="&selectAllCmd.label;"
                 key="key_selectAll"
                 accesskey="&selectAllCmd.accesskey;"
                 command="cmd_selectAll"/>
       <menuseparator/>
       <menuitem id="sp-menu-find"
@@ -333,21 +333,33 @@
                 command="sp-cmd-documentationLink"
                 key="key_openHelp"/>
     </menupopup>
   </menu>
 </menubar>
 
 <popupset id="scratchpad-popups">
   <menupopup id="scratchpad-text-popup"
-             onpopupshowing="goUpdateGlobalEditMenuItems()">
-    <menuitem id="menu_cut"/>
+             onpopupshowing="goUpdateGlobalEditMenuItems(); goUpdateCommand('se-cmd-delete')">
+    <menuitem id="sp-cmenu-cut"
+              label="&cutCmd.label;"
+              key="key_cut"
+              accesskey="&cutCmd.accesskey;"
+              command="se-cmd-cut"/>
     <menuitem id="menu_copy"/>
-    <menuitem id="menu_paste"/>
-    <menuitem id="menu_delete"/>
+    <menuitem id="sp-cmenu-paste"
+              label="&pasteCmd.label;"
+              key="key_paste"
+              accesskey="&pasteCmd.accesskey;"
+              command="se-cmd-paste"/>
+    <menuitem id="sp-menu-delete"
+              label="&deleteCmd.label;"
+              key="se-key-delete"
+              accesskey="&deleteCmd.accesskey;"
+              command="se-cmd-delete"/>
     <menuseparator/>
     <menuitem id="menu_selectAll"/>
     <menuseparator/>
     <menuitem id="sp-text-run"
               label="&run.label;"
               accesskey="&run.accesskey;"
               key="sp-key-run"
               command="sp-cmd-run"/>
diff --git a/browser/devtools/sourceeditor/source-editor-orion.jsm b/browser/devtools/sourceeditor/source-editor-orion.jsm
--- a/browser/devtools/sourceeditor/source-editor-orion.jsm
+++ b/browser/devtools/sourceeditor/source-editor-orion.jsm
@@ -438,16 +438,20 @@ SourceEditor.prototype = {
 
   /**
    * The "tab" editor action implementation. This adds support for expanded tabs
    * to spaces, and support for the indentation of multiple lines at once.
    * @private
    */
   _doTab: function SE__doTab()
   {
+    if (this.readOnly) {
+      return false;
+    }
+
     let indent = "\t";
     let selection = this.getSelection();
     let model = this._model;
     let firstLine = model.getLineAtOffset(selection.start);
     let firstLineStart = model.getLineStart(firstLine);
     let lastLineOffset = selection.end > selection.start ?
                          selection.end - 1 : selection.end;
     let lastLine = model.getLineAtOffset(lastLineOffset);
@@ -488,16 +492,20 @@ SourceEditor.prototype = {
 
   /**
    * The "Unindent lines" editor action implementation. This method is invoked
    * when the user presses Shift-Tab.
    * @private
    */
   _doUnindentLines: function SE__doUnindentLines()
   {
+    if (this.readOnly) {
+      return false;
+    }
+
     let indent = "\t";
 
     let selection = this.getSelection();
     let model = this._model;
     let firstLine = model.getLineAtOffset(selection.start);
     let lastLineOffset = selection.end > selection.start ?
                          selection.end - 1 : selection.end;
     let lastLine = model.getLineAtOffset(lastLineOffset);
@@ -542,16 +550,20 @@ SourceEditor.prototype = {
 
   /**
    * The editor Enter action implementation, which adds simple automatic
    * indentation based on the previous line when the user presses the Enter key.
    * @private
    */
   _doEnter: function SE__doEnter()
   {
+    if (this.readOnly) {
+      return false;
+    }
+
     let selection = this.getSelection();
     if (selection.start != selection.end) {
       return false;
     }
 
     let model = this._model;
     let lineIndex = model.getLineAtOffset(selection.start);
     let lineText = model.getLine(lineIndex, true);
diff --git a/browser/devtools/sourceeditor/source-editor-overlay.xul b/browser/devtools/sourceeditor/source-editor-overlay.xul
--- a/browser/devtools/sourceeditor/source-editor-overlay.xul
+++ b/browser/devtools/sourceeditor/source-editor-overlay.xul
@@ -43,55 +43,71 @@
        The globalOverlay.js script is also required in the XUL document where
        the source-editor-overlay.xul is loaded. -->
 
   <commandset id="sourceEditorCommands">
     <command id="cmd_find" oncommand="goDoCommand('cmd_find')"/>
     <command id="cmd_findAgain" oncommand="goDoCommand('cmd_findAgain')" disabled="true"/>
     <command id="cmd_findPrevious" oncommand="goDoCommand('cmd_findPrevious')" disabled="true"/>
     <command id="cmd_gotoLine" oncommand="goDoCommand('cmd_gotoLine')"/>
+    <command id="se-cmd-cut" oncommand="goDoCommand('se-cmd-cut')" disabled="true"/>
+    <command id="se-cmd-paste" oncommand="goDoCommand('se-cmd-paste')" disabled="true"/>
+    <command id="se-cmd-delete" oncommand="goDoCommand('se-cmd-delete')" disabled="true"/>
     <command id="se-cmd-undo" oncommand="goDoCommand('se-cmd-undo')" disabled="true"/>
     <command id="se-cmd-redo" oncommand="goDoCommand('se-cmd-redo')" disabled="true"/>
   </commandset>
 
   <keyset id="sourceEditorKeys">
     <key id="key_gotoLine"
          key="&gotoLineCmd.key;"
          command="cmd_gotoLine"
          modifiers="accel"/>
+    <key id="se-key-delete"
+         keycode="VK_DELETE"
+         command="se-cmd-delete"/>
   </keyset>
 
+  <script type="application/javascript">
+    function goUpdateSourceEditorMenuItems()
+    {
+      goUpdateGlobalEditMenuItems();
+      let commands = ['se-cmd-undo', 'se-cmd-redo', 'se-cmd-cut', 'se-cmd-paste',
+                      'se-cmd-delete'];
+      commands.forEach(goUpdateCommand);
+    }
+  </script>
+
   <menupopup id="sourceEditorContextMenu"
-             onpopupshowing="goUpdateGlobalEditMenuItems()">
+             onpopupshowing="goUpdateSourceEditorMenuItems()">
     <menuitem id="se-menu-undo"
               label="&undoCmd.label;"
               key="key_undo"
               accesskey="&undoCmd.accesskey;"
               command="se-cmd-undo"/>
     <menuseparator/>
     <menuitem id="se-menu-cut"
               label="&cutCmd.label;"
               key="key_cut"
               accesskey="&cutCmd.accesskey;"
-              command="cmd_cut"/>
+              command="se-cmd-cut"/>
     <menuitem id="se-menu-copy"
               label="&copyCmd.label;"
               key="key_copy"
               accesskey="&copyCmd.accesskey;"
               command="cmd_copy"/>
     <menuitem id="se-menu-paste"
               label="&pasteCmd.label;"
               key="key_paste"
               accesskey="&pasteCmd.accesskey;"
-              command="cmd_paste"/>
+              command="se-cmd-paste"/>
     <menuitem id="se-menu-delete"
               label="&deleteCmd.label;"
-              key="key_delete"
+              key="se-key-delete"
               accesskey="&deleteCmd.accesskey;"
-              command="cmd_delete"/>
+              command="se-cmd-delete"/>
     <menuseparator/>
     <menuitem id="se-menu-selectAll"
               label="&selectAllCmd.label;"
               key="key_selectAll"
               accesskey="&selectAllCmd.accesskey;"
               command="cmd_selectAll"/>
     <menuseparator/>
     <menuitem id="se-menu-find"
diff --git a/browser/devtools/sourceeditor/source-editor-ui.jsm b/browser/devtools/sourceeditor/source-editor-ui.jsm
--- a/browser/devtools/sourceeditor/source-editor-ui.jsm
+++ b/browser/devtools/sourceeditor/source-editor-ui.jsm
@@ -248,16 +248,19 @@ SourceEditorController.prototype = {
 
     switch (aCommand) {
       case "cmd_find":
       case "cmd_findAgain":
       case "cmd_findPrevious":
       case "cmd_gotoLine":
       case "se-cmd-undo":
       case "se-cmd-redo":
+      case "se-cmd-delete":
+      case "se-cmd-cut":
+      case "se-cmd-paste":
         result = true;
         break;
       default:
         result = false;
         break;
     }
 
     return result;
@@ -285,16 +288,29 @@ SourceEditorController.prototype = {
         result = this._editor.lastFind && this._editor.lastFind.lastFound != -1;
         break;
       case "se-cmd-undo":
         result = this._editor.canUndo();
         break;
       case "se-cmd-redo":
         result = this._editor.canRedo();
         break;
+      case "se-cmd-cut":
+      case "se-cmd-delete": {
+        let selection = this._editor.getSelection();
+        result = selection.start != selection.end && !this._editor.readOnly;
+        break;
+      }
+      case "se-cmd-paste": {
+        let window = this._editor._view._frameWindow;
+        let controller = window.controllers.getControllerForCommand("cmd_paste");
+        result = !this._editor.readOnly &&
+                 controller.isCommandEnabled("cmd_paste");
+        break;
+      }
       default:
         result = false;
         break;
     }
 
     return result;
   },
 
@@ -321,13 +337,24 @@ SourceEditorController.prototype = {
         this._editor.ui.gotoLine();
         break;
       case "se-cmd-undo":
         this._editor.undo();
         break;
       case "se-cmd-redo":
         this._editor.redo();
         break;
+      case "se-cmd-cut":
+        this._editor.ui._ownerWindow.goDoCommand("cmd_cut");
+        break;
+      case "se-cmd-paste":
+        this._editor.ui._ownerWindow.goDoCommand("cmd_paste");
+        break;
+      case "se-cmd-delete": {
+        let selection = this._editor.getSelection();
+        this._editor.setText("", selection.start, selection.end);
+        break;
+      }
     }
   },
 
   onEvent: function() { }
 };
diff --git a/browser/locales/en-US/chrome/browser/devtools/scratchpad.dtd b/browser/locales/en-US/chrome/browser/devtools/scratchpad.dtd
--- a/browser/locales/en-US/chrome/browser/devtools/scratchpad.dtd
+++ b/browser/locales/en-US/chrome/browser/devtools/scratchpad.dtd
@@ -62,16 +62,19 @@
 <!ENTITY pasteCmd.label               "Paste">
 <!ENTITY pasteCmd.key                 "V">
 <!ENTITY pasteCmd.accesskey           "P">
 
 <!ENTITY selectAllCmd.label           "Select All">
 <!ENTITY selectAllCmd.key             "A">
 <!ENTITY selectAllCmd.accesskey       "A">
 
+<!ENTITY deleteCmd.label              "Delete">
+<!ENTITY deleteCmd.accesskey          "d">
+
 <!ENTITY findCmd.label                "Find…">
 <!ENTITY findCmd.key                  "F">
 <!ENTITY findCmd.accesskey            "F">
 
 <!ENTITY findAgainCmd.label           "Find Again…">
 <!-- LOCALIZATION NOTE (findAgainCmd.key): This key is used only on Macs.
   -  Windows and Linux builds use the F3 key which is not localizable on purpose.
   -->
