diff --git a/layout/xul/base/src/nsScrollBoxObject.cpp b/layout/xul/base/src/nsScrollBoxObject.cpp
--- a/layout/xul/base/src/nsScrollBoxObject.cpp
+++ b/layout/xul/base/src/nsScrollBoxObject.cpp
@@ -285,19 +285,17 @@ NS_IMETHODIMP nsScrollBoxObject::ScrollT
     // get the twips rectangle from the boxobject (which has pixels)    
     rect.x = nsPresContext::CSSPixelsToAppUnits(x);
     rect.y = nsPresContext::CSSPixelsToAppUnits(y);
 
     // TODO: make sure the child is inside the box
 
     // get our current info
     nsPoint cp = sf->GetScrollPosition();
-    nsIntRect prect;
-    GetOffsetRect(prect);
-    crect = prect.ToAppUnits(nsPresContext::AppUnitsPerCSSPixel());
+    crect = sf->GetScrollPortRect();
     nscoord newx=cp.x, newy=cp.y;
 
     // we only scroll in the direction of the scrollbox orientation
     // always scroll to left or top edge of child element
     if (scrolledBox->IsHorizontal()) {
         newx = rect.x - crect.x;
     } else {
         newy = rect.y - crect.y;
@@ -381,19 +379,17 @@ NS_IMETHODIMP nsScrollBoxObject::EnsureE
     rect.y = nsPresContext::CSSPixelsToAppUnits(y);
     rect.width = nsPresContext::CSSPixelsToAppUnits(width);
     rect.height = nsPresContext::CSSPixelsToAppUnits(height);
 
     // TODO: make sure the child is inside the box
 
     // get our current info
     nsPoint cp = sf->GetScrollPosition();
-    nsIntRect prect;
-    GetOffsetRect(prect);
-    crect = prect.ToAppUnits(nsPresContext::AppUnitsPerCSSPixel());
+    crect = sf->GetScrollPortRect();
 
     nscoord newx=cp.x, newy=cp.y;
 
     // we only scroll in the direction of the scrollbox orientation
     if (scrolledBox->IsHorizontal()) {
         if ((rect.x - crect.x) + rect.width > cp.x + crect.width) {
             newx = cp.x + (((rect.x - crect.x) + rect.width)-(cp.x + crect.width));
         } else if (rect.x - crect.x < cp.x) {
diff --git a/toolkit/components/console/hudservice/tests/browser/Makefile.in b/toolkit/components/console/hudservice/tests/browser/Makefile.in
--- a/toolkit/components/console/hudservice/tests/browser/Makefile.in
+++ b/toolkit/components/console/hudservice/tests/browser/Makefile.in
@@ -87,16 +87,17 @@ _BROWSER_TEST_FILES = \
 	browser_webconsole_bug_582201_duplicate_errors.js \
 	browser_webconsole_bug_580454_timestamp_l10n.js \
 	browser_webconsole_netlogging.js \
 	browser_webconsole_bug_583816_tab_focus.js \
 	browser_webconsole_bug_594477_clickable_output.js \
 	browser_webconsole_bug_589162_css_filter.js \
 	browser_webconsole_bug_597103_deactivateHUDForContext_unfocused_window.js \
 	browser_webconsole_bug_588342_document_focus.js \
+	browser_webconsole_bug_601352_scroll.js \
 	head.js \
 	$(NULL)
 
 # compartment-disabled
 #	browser_webconsole_bug_593003_iframe_wrong_hud.js \
 
 _BROWSER_TEST_PAGES = \
 	test-console.html \
diff --git a/toolkit/components/console/hudservice/tests/browser/browser_webconsole_bug_601352_scroll.js b/toolkit/components/console/hudservice/tests/browser/browser_webconsole_bug_601352_scroll.js
new file mode 100644
--- /dev/null
+++ b/toolkit/components/console/hudservice/tests/browser/browser_webconsole_bug_601352_scroll.js
@@ -0,0 +1,50 @@
+/* vim:set ts=2 sw=2 sts=2 et: */
+/* ***** BEGIN LICENSE BLOCK *****
+ * Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/
+ *
+ * Contributor(s):
+ *  Mihai È˜ucan <mihai.sucan@gmail.com>
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+function tabLoad(aEvent) {
+  browser.removeEventListener(aEvent.type, arguments.callee, true);
+
+  openConsole();
+
+  let hudId = HUDService.getHudIdByWindow(content);
+  let HUD = HUDService.hudWeakReferences[hudId].get();
+
+  let longMessage = "";
+  for (let i = 0; i < 20; i++) {
+    longMessage += "LongNonwrappingMessage";
+  }
+
+  for (let i = 0; i < 100; i++) {
+    HUD.console.log("test message " + i);
+  }
+
+  HUD.console.log(longMessage);
+
+  for (let i = 0; i < 100; i++) {
+    HUD.console.log("test message " + i);
+  }
+
+  HUD.jsterm.execute("1+1");
+
+  executeSoon(function() {
+    isnot(HUD.outputNode.scrollTop, 0, "scroll location is not at the top");
+    is(HUD.outputNode.scrollTop,
+      HUD.outputNode.scrollHeight - HUD.outputNode.clientHeight,
+      "scroll location is correct");
+
+    finishTest();
+  });
+}
+
+function test() {
+  addTab("data:text/html,Web Console test for bug 601352");
+  browser.addEventListener("load", tabLoad, true);
+}
+
