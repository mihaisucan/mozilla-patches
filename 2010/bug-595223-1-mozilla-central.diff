diff --git a/toolkit/components/console/hudservice/HUDService.jsm b/toolkit/components/console/hudservice/HUDService.jsm
--- a/toolkit/components/console/hudservice/HUDService.jsm
+++ b/toolkit/components/console/hudservice/HUDService.jsm
@@ -1358,48 +1358,35 @@ HUD_SERVICE.prototype =
   /**
    * Deactivate a HeadsUpDisplay for the given tab context.
    *
    * @param nsIDOMWindow aContext
    * @returns void
    */
   deactivateHUDForContext: function HS_deactivateHUDForContext(aContext)
   {
-    let window = aContext.linkedBrowser.contentWindow;
+    let browser = aContext.linkedBrowser;
+    let window = browser.contentWindow;
     let nBox = aContext.ownerDocument.defaultView.
       getNotificationBox(window);
     let hudId = "hud_" + nBox.getAttribute("id");
     let displayNode = nBox.querySelector("#" + hudId);
 
     if (hudId in this.displayRegistry && displayNode) {
       this.unregisterActiveContext(hudId);
       this.unregisterDisplay(displayNode);
       if (window) {
         window.focus();
       }
     }
 
-    this.removeProgressListener(aContext.ownerDocument.defaultView.gBrowser);
-  },
-
-  /**
-   * Remove the progress listener, if needed.
-   *
-   * @param tabbrowser aGBrowser
-   *        the gBrowser object of the chrome window you want to remove the
-   *        progress listener from.
-   * @returns void
-   */
-  removeProgressListener: function HS_removeProgressListener(aGBrowser)
-  {
-    let foundHuds = Object.keys(this.displayRegistry).length > 0;
-
-    if (!foundHuds && aGBrowser._WebConsoleProgressListenerAttached) {
-      aGBrowser.removeTabsProgressListener(ConsoleProgressListener);
-      delete aGBrowser._WebConsoleProgressListenerAttached;
+    let listener = browser._WebConsoleProgressListener;
+    if (listener) {
+      browser.webProgress.removeProgressListener(listener);
+      delete browser._WebConsoleProgressListener;
     }
   },
 
   /**
    * Clear the specified HeadsUpDisplay
    *
    * @param string|nsIDOMNode aHUD
    *        Either the ID of a HUD or the DOM node corresponding to an outer
@@ -2726,18 +2713,16 @@ HUD_SERVICE.prototype =
     let gBrowser = aEvent.target.defaultView.gBrowser;
     let tabContainer = gBrowser.tabContainer;
 
     let tab = tabContainer.firstChild;
     while (tab != null) {
       this.deactivateHUDForContext(tab);
       tab = tab.nextSibling;
     }
-
-    this.removeProgressListener(gBrowser);
   },
 
   /**
    * windowInitializer - checks what Gecko app is running and inits the HUD
    *
    * @param nsIDOMWindow aContentWindow
    * @returns void
    */
@@ -2782,21 +2767,16 @@ HUD_SERVICE.prototype =
     let nBox = gBrowser.getNotificationBox(_browser);
     let nBoxId = nBox.getAttribute("id");
     let hudId = "hud_" + nBoxId;
 
     if (!this.canActivateContext(hudId)) {
       return;
     }
 
-    if (!gBrowser._WebConsoleProgressListenerAttached) {
-      gBrowser.addTabsProgressListener(ConsoleProgressListener);
-      gBrowser._WebConsoleProgressListenerAttached = true;
-    }
-
     this.registerDisplay(hudId, aContentWindow);
 
     let hudNode;
     let childNodes = nBox.childNodes;
 
     for (let i = 0; i < childNodes.length; i++) {
       let id = childNodes[i].getAttribute("id");
       // `id` is a string with the format "hud_<number>".
@@ -2828,16 +2808,27 @@ HUD_SERVICE.prototype =
     // our console, but warn the user about this.
     if (aContentWindow.wrappedJSObject.console) {
       this.logWarningAboutReplacedAPI(hudId);
     }
     else {
       aContentWindow.wrappedJSObject.console = hud.console;
     }
 
+    if (!_browser._WebConsoleProgressListener) {
+      let listener = new ConsoleProgressListener(_browser, hud.outputNode,
+        hudId);
+
+      _browser.webProgress.addProgressListener(listener,
+        Ci.nsIWebProgress.NOTIFY_STATE_REQUEST |
+        Ci.nsIWebProgress.NOTIFY_LOCATION);
+
+      _browser._WebConsoleProgressListener = listener;
+    }
+
     // capture JS Errors
     this.setOnErrorHandler(aContentWindow);
 
     // register the controller to handle "select all" properly
     this.createController(xulWindow);
   },
 
   /**
@@ -5246,58 +5237,116 @@ HUDConsoleObserver = {
       }
     }
   }
 };
 
 /**
  * A WebProgressListener that listens for location changes, to update HUDService
  * state information on page navigation.
+ *
+ * @constructor
+ * @param aBrowser
+ *        The browser element this nsIWebProgressListener will be attached to.
+ *
+ * @param nsIDOMNode aOutputNode
+ *        The Web Console output node where messages will show.
+ *
+ * @param string aHudId
+ *        The HeadsUpDisplay ID.
  */
-var ConsoleProgressListener = {
-  QueryInterface: XPCOMUtils.generateQI([Ci.nsIWebProgressListener]),
+function ConsoleProgressListener(aBrowser, aOutputNode, aHudId)
+{
+  this.browser = aBrowser;
+  this.hudId = aHudId;
+  this.outputNode = aOutputNode;
+}
+
+ConsoleProgressListener.prototype = {
+  QueryInterface: XPCOMUtils.generateQI([Ci.nsIWebProgressListener, Ci.nsISupportsWeakReference]),
 
   onLocationChange:
-  function CPL_onLocationChange(aBrowser, aProgress, aRequest, aLocation)
+  function CPL_onLocationChange(aProgress, aRequest, aLocation)
   {
-    let history = aBrowser.webNavigation.sessionHistory;
+    let history = this.browser.webNavigation.sessionHistory;
     if (history.count < 1) {
       return;
     }
 
     let oldIndex = history.index-1;
     if (oldIndex < 0) {
       return;
     }
 
     let prevEntry = history.getEntryAtIndex(oldIndex, false);
     let prevURI = prevEntry.URI.spec;
     let newURI = aLocation.spec;
 
-    let gBrowser = aBrowser.ownerDocument.defaultView.gBrowser;
-    let notificationBox = gBrowser.getNotificationBox(aBrowser);
-    let hudId = "hud_" + notificationBox.getAttribute("id");
-
-    if (!HUDService.canActivateContext(hudId)) {
+    if (aLocation.equals(prevEntry.URI)) {
       return;
     }
 
     if (prevURI in HUDService.uriRegistry) {
       let huds = HUDService.uriRegistry[prevURI];
-      let pos = huds.indexOf(hudId);
+      let pos = huds.indexOf(this.hudId);
       if (pos > -1) {
         huds.splice(pos, 1);
       }
     }
 
-    let topLevel = aProgress.DOMWindow == aBrowser.contentWindow;
+    let topLevel = aProgress.DOMWindow == this.browser.contentWindow;
     if (topLevel) {
-      HUDService.displayRegistry[hudId] = newURI;
+      HUDService.displayRegistry[this.hudId] = newURI;
     }
   },
+
+  onStateChange:
+  function CPL_onStateChange(aProgress, aRequest, aState, aStatus)
+  {
+    if (!(aState & Ci.nsIWebProgressListener.STATE_START)) {
+      return;
+    }
+
+    let uri;
+    if (aRequest instanceof Ci.imgIRequest) {
+      let imgIRequest = aRequest.QueryInterface(Ci.imgIRequest);
+      uri = imgIRequest.URI;
+    }
+    else if (aRequest instanceof Ci.nsIChannel) {
+      let nsIChannel = aRequest.QueryInterface(Ci.nsIChannel);
+      uri = nsIChannel.URI;
+    }
+    else {
+      return;
+    }
+
+    if (!uri.schemeIs("file") && !uri.schemeIs("ftp")) {
+      return;
+    }
+
+    let message = {
+      logLevel: "network",
+      hudId: this.hudId,
+      origin: "network"
+    };
+
+    message.message = HUDService.getStr("typeNetwork") + " " + uri.spec;
+
+    let messageObject = HUDService.messageFactory(message, "network",
+      this.outputNode, {});
+
+    messageObject.messageNode.setAttribute("crop", "end");
+
+    HUDService.logMessage(messageObject.messageObject, this.outputNode,
+      messageObject.messageNode);
+  },
+
+  onStatusChange: function() {},
+  onProgressChange: function() {},
+  onSecurityChange: function() {},
 };
 
 ///////////////////////////////////////////////////////////////////////////
 // appName
 ///////////////////////////////////////////////////////////////////////////
 
 /**
  * Get the app's name so we can properly dispatch app-specific
diff --git a/toolkit/components/console/hudservice/tests/browser/Makefile.in b/toolkit/components/console/hudservice/tests/browser/Makefile.in
--- a/toolkit/components/console/hudservice/tests/browser/Makefile.in
+++ b/toolkit/components/console/hudservice/tests/browser/Makefile.in
@@ -58,16 +58,17 @@ _BROWSER_TEST_FILES = \
 	browser_webconsole_bug_593003_iframe_wrong_hud.js \
 	browser_webconsole_bug_581231_close_button.js \
 	browser_webconsole_bug_595350_multiple_windows_and_tabs.js \
 	browser_webconsole_consoleonpage.js \
 	browser_webconsole_bug_587617_output_copy.js \
 	browser_webconsole_bug_588342_document_focus.js \
 	browser_webconsole_bug_597103_deactivateHUDForContext_unfocused_window.js \
 	browser_webconsole_bug_594523_location_change.js \
+	browser_webconsole_bug_595223_file_uri.js \
 	$(NULL)
 
 _BROWSER_TEST_PAGES = \
 	test-console.html \
 	test-network.html \
 	test-network-request.html \
 	test-mutation.html \
 	testscript.js \
diff --git a/toolkit/components/console/hudservice/tests/browser/browser_webconsole_bug_595223_file_uri.js b/toolkit/components/console/hudservice/tests/browser/browser_webconsole_bug_595223_file_uri.js
new file mode 100644
--- /dev/null
+++ b/toolkit/components/console/hudservice/tests/browser/browser_webconsole_bug_595223_file_uri.js
@@ -0,0 +1,72 @@
+/* vim:set ts=2 sw=2 sts=2 et: */
+/* ***** BEGIN LICENSE BLOCK *****
+ * Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/
+ *
+ * Contributor(s):
+ *  Mihai È˜ucan <mihai.sucan@gmail.com>
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+const Cu = Components.utils;
+const Cc = Components.classes;
+const Ci = Components.interfaces;
+
+Cu.import("resource://gre/modules/HUDService.jsm");
+
+const TEST_FILE = "test-network.html";
+
+let HUD;
+
+function tabLoad(aEvent) {
+  gBrowser.selectedBrowser.removeEventListener(aEvent.type, arguments.callee, true);
+
+  waitForFocus(function () {
+    HUDService.activateHUDForContext(gBrowser.selectedTab);
+
+    let hudId = HUDService.getHudIdByWindow(content);
+    HUD = HUDService.hudWeakReferences[hudId].get();
+
+    gBrowser.selectedBrowser.addEventListener("load", tabReload, true);
+
+    content.location.reload();
+  }, content);
+}
+
+function tabReload(aEvent) {
+  gBrowser.selectedBrowser.removeEventListener(aEvent.type, arguments.callee, true);
+
+  let msgNodes = HUD.outputNode.querySelectorAll(".hud-network");
+  is(msgNodes.length, 3, "found the network messages");
+
+  let textContent = HUD.outputNode.textContent;
+  isnot(textContent.indexOf("test-network.html"), -1,
+    "found test-network.html");
+  isnot(textContent.indexOf("test-image.png"), -1, "found test-image.png");
+  isnot(textContent.indexOf("testscript.js"), -1, "found testscript.js");
+  isnot(textContent.indexOf("running network console logging tests"), -1,
+    "found the console.log() message from testscript.js");
+
+  testEnd();
+}
+
+function testEnd() {
+  HUD = null;
+  HUDService.deactivateHUDForContext(gBrowser.selectedTab);
+
+  executeSoon(function() {
+    gBrowser.removeCurrentTab();
+    executeSoon(finish);
+  });
+}
+
+function test() {
+  waitForExplicitFinish();
+
+  let rootDir = getResolvedURI(getRootDirectory(gTestPath));
+
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", tabLoad, true);
+
+  content.location = rootDir.spec + TEST_FILE;
+}
