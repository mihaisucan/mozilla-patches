diff --git a/toolkit/components/console/hudservice/HUDService.jsm b/toolkit/components/console/hudservice/HUDService.jsm
--- a/toolkit/components/console/hudservice/HUDService.jsm
+++ b/toolkit/components/console/hudservice/HUDService.jsm
@@ -200,16 +200,23 @@ const ANIMATE_IN = 1;
 
 // Constants used for defining the direction of JSTerm input history navigation.
 const HISTORY_BACK = -1;
 const HISTORY_FORWARD = 1;
 
 // The maximum number of bytes a Network ResponseListener can hold.
 const RESPONSE_BODY_LIMIT = 1048576; // 1 MB
 
+// Network response bodies are piped through a buffer of the given size (in
+// bytes).
+const RESPONSE_PIPE_SEGMENT_SIZE = 131072; // 128 KB
+
+// Specifies the maximum number of segments the buffer can have.
+const RESPONSE_PIPE_SEGMENT_COUNT = 100;
+
 // Minimum console height, in pixels.
 const MINIMUM_CONSOLE_HEIGHT = 150;
 
 // Minimum page height, in pixels. This prevents the Web Console from
 // remembering a height that covers the whole page.
 const MINIMUM_PAGE_HEIGHT = 50;
 
 // The default console height, as a ratio from the content window inner height.
@@ -240,31 +247,37 @@ const ERRORS = { LOG_MESSAGE_MISSING_ARG
 function ResponseListener(aHttpActivity) {
   this.receivedData = "";
   this.httpActivity = aHttpActivity;
 }
 
 ResponseListener.prototype =
 {
   /**
-   * The original listener for this request.
+   * The response will be written into the outputStream of this nsIPipe.
+   * Both ends of the pipe must be blocking.
    */
-  originalListener: null,
+  sink: null,
 
   /**
    * The HttpActivity object associated with this response.
    */
   httpActivity: null,
 
   /**
    * Stores the received data as a string.
    */
   receivedData: null,
 
   /**
+   * The nsIRequest we are started for.
+   */
+  request: null,
+
+  /**
    * Sets the httpActivity object's response header if it isn't set already.
    *
    * @param nsIRequest aRequest
    */
   setResponseHeader: function RL_setResponseHeader(aRequest)
   {
     let httpActivity = this.httpActivity;
     // Check if the header isn't set yet.
@@ -285,77 +298,70 @@ ResponseListener.prototype =
         catch (ex) {
           delete httpActivity.response.header;
         }
       }
     }
   },
 
   /**
+   * Set the async listener for the given nsIAsyncInputStream. This allows us to
+   * wait asynchronously for any data coming from the stream.
+   *
+   * @param nsIAsyncInputStream aStream
+   * @param nsIInputStreamCallback aListener
+   * @returns void
+   */
+  setAsyncListener: function RL_setAsyncListener(aStream, aListener)
+  {
+    try {
+      // Asynchronously wait for the stream to be readable or closed.
+      aStream.asyncWait(aListener, 0, 0, Services.tm.mainThread);
+    }
+    catch (ex) { }
+  },
+
+  /**
    * See documention at
    * https://developer.mozilla.org/en/XPCOM_Interface_Reference/nsIStreamListener
    *
    * Grabs a copy of the original data and passes it on to the original listener.
    *
    * @param nsIRequest aRequest
    * @param nsISupports aContext
    * @param nsIInputStream aInputStream
    * @param unsigned long aOffset
    * @param unsigned long aCount
    */
   onDataAvailable: function RL_onDataAvailable(aRequest, aContext, aInputStream,
                                                 aOffset, aCount)
   {
     this.setResponseHeader(aRequest);
 
-    let StorageStream = Components.Constructor("@mozilla.org/storagestream;1",
-                                                "nsIStorageStream",
-                                                "init");
-    let BinaryOutputStream = Components.Constructor("@mozilla.org/binaryoutputstream;1",
-                                                      "nsIBinaryOutputStream",
-                                                      "setOutputStream");
-
-    storageStream = new StorageStream(8192, aCount, null);
-    binaryOutputStream = new BinaryOutputStream(storageStream.getOutputStream(0));
-
     let data = NetUtil.readInputStreamToString(aInputStream, aCount);
 
     if (HUDService.saveRequestAndResponseBodies &&
         this.receivedData.length < RESPONSE_BODY_LIMIT) {
       this.receivedData += NetworkHelper.
                            convertToUnicode(data, aRequest.contentCharset);
     }
-
-    binaryOutputStream.writeBytes(data, aCount);
-
-    let newInputStream = storageStream.newInputStream(0);
-    try {
-    this.originalListener.onDataAvailable(aRequest, aContext,
-        newInputStream, aOffset, aCount);
-    }
-    catch(ex) {
-      aRequest.cancel(ex);
-    }
   },
 
   /**
    * See documentation at
    * https://developer.mozilla.org/En/NsIRequestObserver
    *
    * @param nsIRequest aRequest
    * @param nsISupports aContext
    */
   onStartRequest: function RL_onStartRequest(aRequest, aContext)
   {
-    try {
-    this.originalListener.onStartRequest(aRequest, aContext);
-    }
-    catch(ex) {
-      aRequest.cancel(ex);
-    }
+    this.request = aRequest;
+    // Asynchronously wait for the data coming from the request.
+    this.setAsyncListener(this.sink.inputStream, this);
   },
 
   /**
    * See documentation at
    * https://developer.mozilla.org/En/NsIRequestObserver
    *
    * If aRequest is an nsIHttpChannel then the response header is stored on the
    * httpActivity object. Also, the response body is set on the httpActivity
@@ -363,22 +369,36 @@ ResponseListener.prototype =
    * HUDService.lastFinishedRequestCallback is called if there is one.
    *
    * @param nsIRequest aRequest
    * @param nsISupports aContext
    * @param nsresult aStatusCode
    */
   onStopRequest: function RL_onStopRequest(aRequest, aContext, aStatusCode)
   {
-    try {
-    this.originalListener.onStopRequest(aRequest, aContext, aStatusCode);
+    this.setResponseHeader(aRequest);
+    this.onInputStreamReady(this.sink.inputStream);
+    this.onStreamClose();
+  },
+
+  /**
+   * Clean up the response listener once the response input stream is closed.  
+   * This is called from onStopRequest() or from onInputStreamReady() when the
+   * stream is closed.
+   *
+   * @returns void
+   */
+  onStreamClose: function RL_onStreamClose()
+  {
+    if (!this.httpActivity) {
+      return;
     }
-    catch (ex) { }
-
-    this.setResponseHeader(aRequest);
+
+    // Remove our listener from the request input stream.
+    this.setAsyncListener(this.sink.inputStream, null);
 
     if (HUDService.saveRequestAndResponseBodies) {
       this.httpActivity.response.body = this.receivedData;
     }
     else {
       this.httpActivity.response.bodyDiscarded = true;
     }
 
@@ -392,20 +412,59 @@ ResponseListener.prototype =
       if (panel) {
         panel.update();
       }
     });
     this.httpActivity.response.isDone = true;
     this.httpActivity.response.listener = null;
     this.httpActivity = null;
     this.receivedData = "";
+    this.request = null;
+    this.sink = null;
+    this.inputStream = null;
+  },
+
+  /**
+   * The nsIInputStreamCallback for when the request input stream is ready -
+   * either it has more data or it is closed.
+   *
+   * @param nsIAsyncInputStream aStream
+   * @returns void
+   */
+  onInputStreamReady: function RL_onInputStreamReady(aStream)
+  {
+    if (!(aStream instanceof Ci.nsIAsyncInputStream) || !this.httpActivity) {
+      return;
+    }
+
+    let available = -1;
+    try {
+      available = aStream.available();
+    }
+    catch (ex) { }
+
+    if (available != -1) {
+      try {
+        if (available != 0) {
+          this.onDataAvailable(this.request, null, aStream, 0, available);
+        }
+      }
+      catch (ex) { }
+
+      this.setAsyncListener(aStream, this);
+    }
+    else {
+      this.onStreamClose();
+    }
   },
 
   QueryInterface: XPCOMUtils.generateQI([
     Ci.nsIStreamListener,
+    Ci.nsIInputStreamCallback,
+    Ci.nsIRequestObserver,
     Ci.nsISupports
   ])
 }
 
 ///////////////////////////////////////////////////////////////////////////
 //// Helper for creating the network panel.
 
 /**
@@ -2043,19 +2102,38 @@ HUD_SERVICE.prototype =
             // requested). Don't continue in such a case.
             if (!loggedNode) {
               return;
             }
 
             // Add listener for the response body.
             let newListener = new ResponseListener(httpActivity);
             aChannel.QueryInterface(Ci.nsITraceableChannel);
-            newListener.originalListener = aChannel.setNewListener(newListener);
+
             httpActivity.response.listener = newListener;
 
+            let tee = Cc["@mozilla.org/network/stream-listener-tee;1"].
+                      createInstance(Ci.nsIStreamListenerTee);
+
+            // The response will be written into the outputStream of this pipe.
+            // This allows us to buffer the data we are receiving and read it
+            // asynchronously.
+            // Both ends of the pipe must be blocking.
+            let sink = Cc["@mozilla.org/pipe;1"].createInstance(Ci.nsIPipe);
+            sink.init(false, false, RESPONSE_PIPE_SEGMENT_SIZE,
+                      RESPONSE_PIPE_SEGMENT_COUNT, null);
+
+            // Remember the input stream, so it isn't released by GC.
+            newListener.inputStream = sink.inputStream;
+
+            let originalListener = aChannel.setNewListener(tee);
+            newListener.sink = sink;
+
+            tee.init(originalListener, sink.outputStream, newListener);
+
             // Copy the request header data.
             aChannel.visitRequestHeaders({
               visitHeader: function(aName, aValue) {
                 httpActivity.request.header[aName] = aValue;
               }
             });
 
             // Store the loggedNode and the httpActivity object for later reuse.
diff --git a/toolkit/components/console/hudservice/tests/browser/Makefile.in b/toolkit/components/console/hudservice/tests/browser/Makefile.in
--- a/toolkit/components/console/hudservice/tests/browser/Makefile.in
+++ b/toolkit/components/console/hudservice/tests/browser/Makefile.in
@@ -108,16 +108,17 @@ _BROWSER_TEST_FILES = \
 	browser_webconsole_bug_600183_charset.js \
 	browser_webconsole_bug_601177_log_levels.js \
 	browser_webconsole_bug_597460_filter_scroll.js \
 	browser_webconsole_console_extras.js \
 	browser_webconsole_bug_598357_jsterm_output.js \
 	browser_webconsole_bug_603750_websocket.js \
 	browser_webconsole_abbreviate_source_url.js \
 	browser_webconsole_view_source.js \
+	browser_webconsole_bug_618078_network_exceptions.js \
 	head.js \
 	$(NULL)
 
 _BROWSER_TEST_PAGES = \
 	test-console.html \
 	test-network.html \
 	test-network-request.html \
 	test-mutation.html \
@@ -171,15 +172,16 @@ _BROWSER_TEST_PAGES = \
 	test-bug-597756-reopen-closed-tab.html \
 	test-bug-600183-charset.html \
 	test-bug-600183-charset.html^headers^ \
 	test-bug-601177-log-levels.html \
 	test-bug-601177-log-levels.js \
 	test-console-extras.html \
 	test-bug-603750-websocket.html \
 	test-bug-603750-websocket.js \
+	test-bug-618078-network-exceptions.html \
 	$(NULL)
 
 libs:: $(_BROWSER_TEST_FILES)
 	$(INSTALL) $(foreach f,$^,"$f") $(DEPTH)/_tests/testing/mochitest/browser/$(relativesrcdir)
 
 libs:: $(_BROWSER_TEST_PAGES)
 	$(INSTALL) $(foreach f,$^,"$f") $(DEPTH)/_tests/testing/mochitest/browser/$(relativesrcdir)
diff --git a/toolkit/components/console/hudservice/tests/browser/browser_webconsole_bug_618078_network_exceptions.js b/toolkit/components/console/hudservice/tests/browser/browser_webconsole_bug_618078_network_exceptions.js
new file mode 100644
--- /dev/null
+++ b/toolkit/components/console/hudservice/tests/browser/browser_webconsole_bug_618078_network_exceptions.js
@@ -0,0 +1,80 @@
+/* vim:set ts=2 sw=2 sts=2 et: */
+/*
+ * Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/
+ *
+ * Contributor(s):
+ *  Mihai Șucan <mihai.sucan@gmail.com>
+ */
+
+// Tests that network log messages bring up the network panel.
+
+const TEST_URI = "http://example.com/browser/toolkit/components/console/hudservice/tests/browser/test-bug-618078-network-exceptions.html";
+
+let testEnded = false;
+
+let TestObserver = {
+  QueryInterface: XPCOMUtils.generateQI([Ci.nsIObserver]),
+
+  observe: function test_observe(aSubject)
+  {
+    if (testEnded || !(aSubject instanceof Ci.nsIScriptError)) {
+      return;
+    }
+
+    is(aSubject.category, "content javascript", "error category");
+
+    if (aSubject.category == "content javascript") {
+      executeSoon(checkOutput);
+    }
+    else {
+      testEnd();
+    }
+  }
+};
+
+function checkOutput()
+{
+  if (testEnded) {
+    return;
+  }
+
+  let textContent = hud.outputNode.textContent;
+  isnot(textContent.indexOf("bug618078exception"), -1,
+        "exception message");
+
+  testEnd();
+}
+
+function testEnd()
+{
+  if (testEnded) {
+    return;
+  }
+
+  testEnded = true;
+  Services.console.unregisterListener(TestObserver);
+  finishTest();
+}
+
+function test()
+{
+  addTab("data:text/html,Web Console test for bug 618078");
+
+  browser.addEventListener("load", function() {
+    browser.removeEventListener("load", arguments.callee, true);
+
+    openConsole();
+
+    let hudId = HUDService.getHudIdByWindow(content);
+    hud = HUDService.hudReferences[hudId];
+
+    Services.console.registerListener(TestObserver);
+    registerCleanupFunction(testEnd);
+
+    executeSoon(function() {
+      content.location = TEST_URI;
+    });
+  }, true);
+}
+
diff --git a/toolkit/components/console/hudservice/tests/browser/test-bug-618078-network-exceptions.html b/toolkit/components/console/hudservice/tests/browser/test-bug-618078-network-exceptions.html
new file mode 100644
--- /dev/null
+++ b/toolkit/components/console/hudservice/tests/browser/test-bug-618078-network-exceptions.html
@@ -0,0 +1,23 @@
+<!DOCTYPE html>
+<html lang="en">
+  <head>
+    <title>Web Console test for bug 618078 - exception in async network request
+      callback</title>
+    <!-- Any copyright is dedicated to the Public Domain.
+         http://creativecommons.org/publicdomain/zero/1.0/ -->
+    <script type="text/javascript">
+      var req = new XMLHttpRequest();
+      req.open('GET', 'http://example.com', true);
+      req.onreadystatechange = function() {
+        if (req.readyState == 4) {
+          bug618078exception();
+        }
+      };
+      req.send(null);
+    </script>
+  </head>
+  <body>
+    <p>Web Console test for bug 618078 - exception in async network request
+    callback.</p>
+  </body>
+</html>
