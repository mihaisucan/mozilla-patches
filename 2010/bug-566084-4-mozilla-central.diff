diff --git a/browser/app/profile/firefox.js b/browser/app/profile/firefox.js
--- a/browser/app/profile/firefox.js
+++ b/browser/app/profile/firefox.js
@@ -369,16 +369,22 @@ pref("browser.ctrlTab.recentlyUsedLimit"
 pref("browser.bookmarks.autoExportHTML",          false);
 
 // The maximum number of daily bookmark backups to 
 // keep in {PROFILEDIR}/bookmarkbackups. Special values:
 // -1: unlimited
 //  0: no backups created (and deletes all existing backups)
 pref("browser.bookmarks.max_backups",             10);
 
+// Page navigation behavior when the Inspector tool is enabled:
+// 0  ask the user to confirm page navigation.
+// 1  always allow page navigation.
+// 2  never allow page navigation.
+pref("browser.inspector.pageNavigation", 0);
+
 // Scripts & Windows prefs
 pref("dom.disable_open_during_load",              true);
 #ifdef DEBUG
 pref("javascript.options.showInConsole",          true);
 pref("general.warnOnAboutConfig",                 false);
 #else
 pref("javascript.options.showInConsole",          false);
 #endif
diff --git a/browser/base/content/inspector.js b/browser/base/content/inspector.js
--- a/browser/base/content/inspector.js
+++ b/browser/base/content/inspector.js
@@ -677,16 +677,19 @@ var InspectorUI = {
     }
     this.inspectorBundle = Services.strings.createBundle("chrome://browser/locale/inspector.properties");
     this.initializeHighlighter();
     this.startInspecting();
     this.win.document.addEventListener("scroll", this, false);
     this.win.addEventListener("resize", this, false);
     gBrowser.tabContainer.addEventListener("TabSelect", this, false);
     this.inspectCmd.setAttribute("checked", true);
+
+    gBrowser.addProgressListener(InspectorProgressListener,
+        Ci.nsIWebProgress.NOTIFY_STATE_DOCUMENT);
   },
 
   /**
    * Initialize highlighter.
    */
   initializeHighlighter: function IUI_initializeHighlighter()
   {
     this.highlighter = new PanelHighlighter(this.browser, this.highlightColor,
@@ -695,16 +698,18 @@ var InspectorUI = {
 
   /**
    * Close inspector UI and associated panels. Unhighlight and stop inspecting.
    * Remove event listeners for document scrolling, resize and
    * tabContainer.TabSelect.
    */
   closeInspectorUI: function IUI_closeInspectorUI()
   {
+    gBrowser.removeProgressListener(InspectorProgressListener);
+
     this.win.document.removeEventListener("scroll", this, false);
     this.win.removeEventListener("resize", this, false);
     gBrowser.tabContainer.removeEventListener("TabSelect", this, false);
     this.stopInspecting();
     if (this.highlighter && this.highlighter.isHighlighting) {
       this.highlighter.unhighlight();
     }
     if (this.isPanelOpen) {
@@ -995,12 +1000,86 @@ var InspectorUI = {
    *        text message to send to the log
    */
   _log: function LOG(msg)
   {
     Services.console.logStringMessage(msg);
   },
 }
 
+var InspectorProgressListener = {
+  QueryInterface: XPCOMUtils.generateQI([Ci.nsIWebProgressListener]),
+
+  onStateChange: function IPL_onStateChange(aProgress, aRequest, aFlag, aStatus) {
+    // Remove myself if the Inspector is no longer open.
+    if (!InspectorUI.isPanelOpen) {
+      gBrowser.removeProgressListener(InspectorProgressListener);
+      return;
+    }
+
+    let win = aProgress.DOMWindow;
+
+    // Skip non-start states.
+    if (!(aFlag & Ci.nsIWebProgressListener.STATE_START)) {
+      return;
+    }
+
+    // If the request is about to happen in a new window, we are not concerned
+    // about the request.
+    if (win != InspectorUI.win) {
+      return;
+    }
+
+    // Close the Inspector if the are no edits in the Inspector panels.
+    if (!InspectorUI.isDirty) {
+      InspectorUI.closeInspectorUI();
+      return;
+    }
+
+    // Read user pref.
+    let pref = gPrefService.getIntPref("browser.inspector.pageNavigation");
+
+    if (pref < 0 || pref > 2) {
+      pref = 0;
+    }
+
+    if (!pref) {
+      // Ask the user what to do with the page navigation request.
+      let rememberCheckbox = {value: false};
+
+      let strTitle = InspectorUI.inspectorBundle.
+        GetStringFromName("confirmNavigationAway.title");
+
+      let strMessage = InspectorUI.inspectorBundle.
+        GetStringFromName("confirmNavigationAway.message");
+
+      let strRemember = InspectorUI.inspectorBundle.
+        GetStringFromName("confirmNavigationAway.rememberChoice");
+
+      let result = Services.prompt.confirmCheck(window, strTitle, strMessage,
+        strRemember, rememberCheckbox);
+
+      pref = result ? 1 : 2;
+
+      if (rememberCheckbox.value) {
+        gPrefService.setIntPref("browser.inspector.pageNavigation", pref);
+      }
+    }
+
+    if (pref == 1) {
+      // The pref is set to always confirm page navigation.
+      InspectorUI.closeInspectorUI();
+    } else if (pref == 2) {
+      // The pref is set to never confirm page navigation.
+      aRequest.cancel(Components.results.NS_BINDING_ABORTED);
+    }
+  },
+
+  onLocationChange: function() {},
+  onProgressChange: function() {},
+  onStatusChange: function() {},
+  onSecurityChange: function() {}
+};
+
 XPCOMUtils.defineLazyGetter(InspectorUI, "inspectCmd", function () {
   return document.getElementById("Tools:Inspect");
 });
 
diff --git a/browser/base/content/test/Makefile.in b/browser/base/content/test/Makefile.in
--- a/browser/base/content/test/Makefile.in
+++ b/browser/base/content/test/Makefile.in
@@ -143,16 +143,17 @@ _BROWSER_FILES = \
                  browser_bug581242.js \
                  browser_contextSearchTabPosition.js \
                  browser_ctrlTab.js \
                  browser_discovery.js \
                  browser_drag.js \
                  browser_gestureSupport.js \
                  browser_getshortcutoruri.js \
                  browser_inspector_initialization.js \
+                 browser_inspector_location_changed.js \
                  browser_inspector_treeSelection.js \
                  browser_inspector_highlighter.js \
                  browser_inspector_stylePanel.js \
                  browser_inspector_iframeTest.js \
                  browser_inspector_scrolling.js \
                  browser_pageInfo.js \
                  browser_page_style_menu.js \
                  browser_pinnedTabs.js \
diff --git a/browser/base/content/test/browser_inspector_location_changed.js b/browser/base/content/test/browser_inspector_location_changed.js
new file mode 100644
--- /dev/null
+++ b/browser/base/content/test/browser_inspector_location_changed.js
@@ -0,0 +1,155 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=2 et sw=2 tw=80: */
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is Inspector Location Changed Tests.
+ *
+ * The Initial Developer of the Original Code is
+ * The Mozilla Foundation.
+ * Portions created by the Initial Developer are Copyright (C) 2010
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Rob Campbell <rcampbell@mozilla.com>
+ *   Mihai È˜ucan <mihai.sucan@gmail.com>
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+function startLocationTests()
+{
+  ok(InspectorUI, "InspectorUI variable exists");
+  document.addEventListener("popupshown", runInspectorTests, false);
+  InspectorUI.toggleInspectorUI();
+}
+
+function runInspectorTests(evt)
+{
+  if (evt.target.id != "inspector-style-panel") {
+    return true;
+  }
+
+  document.removeEventListener(evt.type, arguments.callee, false);
+
+  let para = content.document.getElementsByTagName("p")[0];
+  ok(para, "found the paragraph element");
+  is(para.textContent, "init", "paragraph content is correct");
+
+  ok(InspectorUI.inspecting, "Inspector is highlighting");
+  ok(InspectorUI.isPanelOpen, "Inspector Panel is open");
+  ok(InspectorUI.isStylePanelOpen, "Inspector Style Panel is open");
+
+  InspectorUI.isDirty = true;
+
+  // It is expected that page navigation is not allowed.
+  Services.prefs.setIntPref("browser.inspector.pageNavigation", 2);
+
+  // The progress listener will receive STATE_STOP for the same URI, not for the
+  // new URI.
+  gBrowser.addProgressListener(TestProgressListener,
+    Ci.nsIWebProgress.NOTIFY_STATE_DOCUMENT |
+    Ci.nsIWebProgress.NOTIFY_LOCATION);
+
+  content.location = "data:text/html,<div>location change test 1 for " +
+    "inspector</div><p>test1</p>";
+}
+
+let TestProgressListener = {
+  QueryInterface: XPCOMUtils.generateQI([Ci.nsIWebProgressListener]),
+
+  onLocationChange: function TPL_onLocationChange(aProgress, aRequest, aURI) {
+    gBrowser.removeProgressListener(TestProgressListener);
+    ok(false, "navigation was not cancelled");
+    testEnd();
+  },
+
+  onStateChange: function TPL_onStateChange(aProgress, aRequest, aFlag, aStatus) {
+    let win = aProgress.DOMWindow;
+    let uri = win.location.href;
+
+    // Continue to the next test.
+    if (aFlag & Ci.nsIWebProgressListener.STATE_STOP &&
+      uri.indexOf("init") != -1) {
+      gBrowser.removeProgressListener(TestProgressListener);
+      ok(true, "location did not change");
+      locationTest1();
+    }
+  },
+
+  onProgressChange: function() {},
+  onStatusChange: function() {},
+  onSecurityChange: function() {}
+};
+
+function locationTest1()
+{
+  // Location did not change.
+  let para = content.document.getElementsByTagName("p")[0];
+  ok(para, "found the paragraph element, second time");
+  is(para.textContent, "init", "paragraph content is correct");
+
+  ok(InspectorUI.inspecting, "Inspector is highlighting");
+  ok(InspectorUI.isPanelOpen, "Inspector Panel is open");
+  ok(InspectorUI.isStylePanelOpen, "Inspector Style Panel is open");
+
+  // It is expected that page navigation is now allowed.
+  Services.prefs.setIntPref("browser.inspector.pageNavigation", 1);
+
+  gBrowser.selectedBrowser.addEventListener("load", locationTest2, true);
+  content.location = "data:text/html,<div>location change test 2 for " +
+    "inspector</div><p>test2</p>";
+}
+
+function locationTest2()
+{
+  gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
+
+  ok(true, "location changed");
+
+  let para = content.document.getElementsByTagName("p")[0];
+  ok(para, "found the paragraph element, third time");
+  is(para.textContent, "test2", "paragraph content is correct");
+
+  ok(!InspectorUI.inspecting, "Inspector is not highlighting");
+  ok(!InspectorUI.isPanelOpen, "Inspector Panel is not open");
+  ok(!InspectorUI.isStylePanelOpen, "Inspector Style Panel is not open");
+
+  gBrowser.removeCurrentTab();
+  finish();
+}
+
+function test()
+{
+  waitForExplicitFinish();
+
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", function() {
+    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
+    waitForFocus(startLocationTests, content);
+  }, true);
+
+  content.location = "data:text/html,<div>location change tests for " +
+    "inspector.</div><p>init</p>";
+}
diff --git a/browser/locales/en-US/chrome/browser/inspector.properties b/browser/locales/en-US/chrome/browser/inspector.properties
--- a/browser/locales/en-US/chrome/browser/inspector.properties
+++ b/browser/locales/en-US/chrome/browser/inspector.properties
@@ -4,8 +4,15 @@ style.selectorLabel=Selector
 
 # LOCALIZATION NOTE  (style.inheritedFrom): used in Style panel in
 #  inspector. Describes which tagname[#id] the properties are inherited from.
 style.inheritedFrom=Inherited from: #1
 
 # LOCALIZATION NOTE (style.styleItemLabel: used in Style panel in inspector.
 #  Used for construction of list items, #1 = label, #2 = content.
 style.styleItemLabel=#1: #2
+
+# LOCALIZATION NOTE (confirmNavigationAway): Used in the Inspector tool, when
+# the user tries to navigate away from a web page, to confirm the change of
+# page.
+confirmNavigationAway.title=Inspector: page navigation
+confirmNavigationAway.message=You are about to leave the current location which will close the Inspector, losing any changes you may have made. Are you sure you want to continue?
+confirmNavigationAway.rememberChoice=Remember my preference.
