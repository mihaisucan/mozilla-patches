diff --git a/browser/base/content/inspector.js b/browser/base/content/inspector.js
--- a/browser/base/content/inspector.js
+++ b/browser/base/content/inspector.js
@@ -1232,17 +1232,17 @@ var InspectorUI = {
     this.openDOMPanel();
 
     // setup highlighter and start inspecting
     this.initializeHighlighter();
     this.startInspecting();
     this.win.document.addEventListener("scroll", this, false);
     this.win.addEventListener("resize", this, false);
     gBrowser.tabContainer.addEventListener("TabSelect", this, false);
-    this.toolsInspectCmd.setAttribute("checked", true);
+    this.inspectCmd.setAttribute("checked", true);
   },
 
   /**
    * Initialize highlighter.
    */
   initializeHighlighter: function IUI_initializeHighlighter()
   {
     this.highlighter = new PanelHighlighter(this.browser);
@@ -1250,22 +1250,21 @@ var InspectorUI = {
 
   /**
    * Close inspector UI and associated panels. Unhighlight and stop inspecting.
    * Remove event listeners for document scrolling, resize and
    * tabContainer.TabSelect.
    */
   closeInspectorUI: function IUI_closeInspectorUI()
   {
-    let toolsInspectCmd = document.getElementById("Tools:Inspect");
     this.win.document.removeEventListener("scroll", this, false);
     this.win.removeEventListener("resize", this, false);
     gBrowser.tabContainer.removeEventListener("TabSelect", this, false);
     this.stopInspecting();
-    toolsInspectCmd.setAttribute("checked", "false");
+    this.inspectCmd.setAttribute("checked", "false");
     if (this.highlighter && this.highlighter.isHighlighting) {
       this.highlighter.unhighlight();
     }
     if (this.isTreePanelOpen) {
       if (this.treePanelDiv) {
         this.treePanelDiv.ownerPanel = null;
         delete this.treePanelDiv;
         delete this.treeBrowserDocument;
diff --git a/browser/base/content/test/browser_inspector_domPanel.js b/browser/base/content/test/browser_inspector_domPanel.js
--- a/browser/base/content/test/browser_inspector_domPanel.js
+++ b/browser/base/content/test/browser_inspector_domPanel.js
@@ -17,16 +17,17 @@
  *
  * The Initial Developer of the Original Code is
  * The Mozilla Foundation.
  * Portions created by the Initial Developer are Copyright (C) 2010
  * the Initial Developer. All Rights Reserved.
  *
  * Contributor(s):
  *   Rob Campbell <rcampbell@mozilla.com>
+ *   Mihai È˜ucan <mihai.sucan@gmail.com>
  *
  * Alternatively, the contents of this file may be used under the terms of
  * either the GNU General Public License Version 2 or later (the "GPL"), or
  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
  * in which case the provisions of the GPL or the LGPL are applicable instead
  * of those above. If you wish to allow use of your version of this file only
  * under the terms of either the GPL or the LGPL, and not to allow others to
  * use your version of this file under the terms of the MPL, indicate your
@@ -34,16 +35,17 @@
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 let doc;
 let testGen;
+let newProperty;
 
 function createDocument()
 {
   doc.body.innerHTML = '<div id="first" style="{ margin: 10em; ' +
     'font-size: 14pt; font-family: helvetica, sans-serif; color: #AAA}">\n' +
     '<h1>Some header text</h1>\n' +
     '<p id="salutation" style="{font-size: 12pt}">hi.</p>\n' +
     '<p id="body" style="{font-size: 12pt}">I am a test-case. This text exists ' +
@@ -58,49 +60,92 @@ function createDocument()
   doc.title = "Inspector DOM Test";
   Services.obs.addObserver(runDOMTests, "inspector-opened", false);
   InspectorUI.openInspectorUI();
 }
 
 function nodeGenerator()
 {
   let body = doc.body;
+  newProperty = "rand" + Date.now();
+  body[newProperty] = Math.round(Math.random() * 100);
   InspectorUI.inspectNode(body);
   yield;
+
   let h1 = doc.querySelector("h1");
+  newProperty = "rand2" + Date.now();
+  h1[newProperty] = "test" + Math.random();
   InspectorUI.inspectNode(h1);
   yield;
+
   let first = doc.getElementById("first");
+  newProperty = "rand3" + Date.now();
+  first[newProperty] = null;
   InspectorUI.inspectNode(first);
   yield;
-  let closing = doc.getElementById("#closing");
+
+  let closing = doc.getElementById("closing");
+  newProperty = "bazbaz" + Date.now();
+  closing[newProperty] = false;
   InspectorUI.inspectNode(closing);
   yield;
 }
 
 var runDOMTests = {
   observe: function _runDOMTestsObserver(aSubject, aTopic, aData) {
     InspectorUI._log("runDOMtests");
     Services.obs.removeObserver(runDOMTests, "inspector-opened", false);
     document.addEventListener("popupshown", performTestComparisons, false);
     InspectorUI.stopInspecting();
     testGen = nodeGenerator();
     testGen.next();
-  },
+  }
+};
+
+function findInDOMPanel (aString) {
+  let treeView = InspectorUI.domTreeView;
+  let row;
+
+  for (let i = 0, n = treeView.rowCount; i < n; i++) {
+    row = treeView.getCellText(i, 0);
+    if (row && row.indexOf(aString) != -1) {
+      return true;
+    }
+  }
+
+  return false;
+};
 
 function performTestComparisons(evt)
 {
   InspectorUI._log("performTestComparisons");
   if (evt.target.id != "highlighter-panel")
     return true;
 
-  ok(InspectorUI.selection, "selection");
+  let selection = InspectorUI.selection;
+
+  ok(selection, "selection");
   ok(InspectorUI.isDOMPanelOpen, "DOM panel is open?");
   ok(InspectorUI.highlighter.isHighlighting, "panel is highlighting");
-  ok(InspectorUI.domTreeView.rowCount > 0, "domBox has items");
+
+  let value = selection[newProperty];
+  if (typeof value == "string") {
+    value = '"' + value + '"';
+  }
+
+  ok(findInDOMPanel(newProperty + ': ' + value),
+    "domPanel shows the correct value for " + newProperty);
+
+  ok(findInDOMPanel('tagName: "' + selection.tagName + '"'),
+    "domPanel shows the correct tagName");
+
+  if (selection.id) {
+    ok(findInDOMPanel('id: "' + selection.id + '"'),
+      "domPanel shows the correct id");
+  }
 
   try {
     testGen.next();
   } catch(StopIteration) {
     document.removeEventListener("popupshown", performTestComparisons, false);
     finishUp();
   }
 }
