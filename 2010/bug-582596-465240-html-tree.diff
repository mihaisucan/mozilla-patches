# HG changeset patch
# User Joe Walker <jwalker@mozilla.com>
# Date 1281106754 -3600
# Node ID 4d682952392f9035a578830909fc9c19a73e0028
# Parent 3862a5cd80fa1690f44b50321d236e683dedc90f
XUL tree to go atop csslogic

diff -r 3862a5cd80fa browser/base/content/browser.js
--- a/browser/base/content/browser.js	Thu Aug 05 11:25:52 2010 +0100
+++ b/browser/base/content/browser.js	Thu Aug 12 15:41:11 2010 +0100
@@ -180,6 +180,7 @@
 #include browser-fullZoom.js
 #include inspector.js
 #include csslogic.js
+#include style3.js
 #include browser-places.js
 #include browser-tabPreviews.js
 
diff -r 3862a5cd80fa browser/base/content/browser.xul
--- a/browser/base/content/browser.xul	Thu Aug 05 11:25:52 2010 +0100
+++ b/browser/base/content/browser.xul	Thu Aug 12 15:41:11 2010 +0100
@@ -35,6 +35,7 @@
 #   Robert Strong <robert.bugzilla@gmail.com>
 #   Rob Campbell <rcampbell@mozilla.com>
 #   Patrick Walton <pcwalton@mozilla.com>
+#   Joe Walker <jwalker@mozilla.com>
 #
 # Alternatively, the contents of this file may be used under the terms of
 # either the GNU General Public License Version 2 or later (the "GPL"), or
@@ -231,7 +232,7 @@
            ignorekeys="true"
            noautofocus="true"
            noautohide="true"
-           level="top"
+           level="floating"
            titlebar="normal"
            label="&inspectPanelTitle.label;">
       <toolbar id="inspector-toolbar"
@@ -283,10 +284,14 @@
            ignorekeys="true"
            noautofocus="true"
            noautohide="true"
-           level="top"
+           level="floating"
            titlebar="normal"
            label="&inspectStylePanelTitle.label;">
-        <listbox id="inspector-style-listbox" flex="1"/>
+        <browser id="inspector-style-browser"
+                 flex="1"
+                 src="chrome://browser/content/style3.html"
+                 onclick="InspectorUI.htmlTree.onClick(event);"
+                 disablehistory="true" />
         <hbox align="end">
           <spacer flex="1" />
           <resizer dir="bottomend" />
diff -r 3862a5cd80fa browser/base/content/inspector.js
--- a/browser/base/content/inspector.js	Thu Aug 05 11:25:52 2010 +0100
+++ b/browser/base/content/inspector.js	Thu Aug 12 15:41:11 2010 +0100
@@ -527,6 +527,26 @@
   inspecting: false,
 
   /**
+   * The Stylesheet inspection logic. Setup by init()
+   * An instance of CssLogic (see csslogic.js)
+   */
+  cssLogic: null,
+
+  /**
+   * An instance of CssHtmlTree (see style3.js). Setup by init()
+   */
+  htmlTree: null,
+
+  /**
+   * The visual floating window that displays style information.
+   * i.e. this is a reference to panel#inspector-style-panel from browser.xul
+   * DANGER: stylePanel is not an instance of stylePanel.jsm (that is
+   * confusingly called 'this.style')
+   * TODO: Is there anything we can do to fix this?
+   */
+  stylePanel: null,
+
+  /**
    * Toggle the inspector interface elements on or off.
    *
    * @param aEvent
@@ -555,7 +575,8 @@
   },
 
   /**
-   * Toggle the style panel. Invoked from the toolbar's Style button.
+   * Toggle the style panel.
+   * Invoked from the toolbar's Style button (see browser-sets.inc)
    */
   toggleStylePanel: function IUI_toggleStylePanel()
   {
@@ -582,7 +603,7 @@
 
   /**
    * Is the style panel open?
-   *
+   * TODO: throw PropertyNameHasVerbException()
    * @returns boolean
    */
   get isStylePanelOpen()
@@ -668,8 +689,9 @@
       this.openTreePanel();
     }
     if (this._showStylePanel) {
-      this.styleBox = document.getElementById("inspector-style-listbox");
-      this.clearStylePanel();
+      let styleWin = document.getElementById("inspector-style-browser");
+      this.cssLogic = new CssLogic(this.style);
+      this.htmlTree = new CssHtmlTree(styleWin, this.cssLogic);
       this.openStylePanel();
     }
     if (this._showDOMPanel) {
@@ -757,91 +779,6 @@
   },
 
   /**
-   * add a new item to the listbox
-   *
-   * @param aLabel
-   *        A bit of text to put in the listitem's label attribute.
-   * @param aType
-   *        The type of item.
-   * @param content
-   *        Text content or value of the listitem.
-   */
-  addStyleItem: function IUI_addStyleItem(aLabel, aType, aContent)
-  {
-    let itemLabelString = this.inspectorBundle.GetStringFromName("style.styleItemLabel");
-    let item = document.createElement("listitem");
-
-    // Do not localize these strings
-    let label = aLabel;
-    item.className = "style-" + aType;
-    if (aContent) {
-      label = itemLabelString.replace("#1", aLabel);
-      label = label.replace("#2", aContent);
-    }
-    item.setAttribute("label", label);
-
-    this.styleBox.appendChild(item);
-  },
-
-  /**
-   * Create items for each rule included in the given array.
-   *
-   * @param aRules
-   *        an array of rule objects
-   */
-  createStyleRuleItems: function IUI_createStyleRuleItems(aRules)
-  {
-    let selectorLabel = this.inspectorBundle.GetStringFromName("style.selectorLabel");
-
-    aRules.forEach(function(rule) {
-      this.addStyleItem(selectorLabel, "selector", rule.id);
-      rule.properties.forEach(function(property) {
-        if (property.overridden)
-          return; // property marked overridden elsewhere
-        // Do not localize the strings below this line
-        let important = "";
-        if (property.important)
-          important += " !important";
-        this.addStyleItem(property.name, "property", property.value + important);
-      }, this);
-    }, this);
-  },
-
-  /**
-   * Create rule items for each section as well as the element's style rules,
-   * if any.
-   *
-   * @param aRules
-   *        Array of rules corresponding to the element's style object.
-   * @param aSections
-   *        Array of sections encapsulating the inherited rules for selectors
-   *        and elements.
-   */
-  createStyleItems: function IUI_createStyleItems(aRules, aSections)
-  {
-    this.createStyleRuleItems(aRules);
-    let inheritedString = 
-        this.inspectorBundle.GetStringFromName("style.inheritedFrom");
-    aSections.forEach(function(section) {
-      let sectionTitle = section.element.tagName;
-      if (section.element.id)
-        sectionTitle += "#" + section.element.id;
-      let replacedString = inheritedString.replace("#1", sectionTitle);
-      this.addStyleItem(replacedString, "section");
-      this.createStyleRuleItems(section.rules);
-    }, this);
-  },
-
-  /**
-   * Remove all items from the Style Panel's listbox.
-   */
-  clearStylePanel: function IUI_clearStylePanel()
-  {
-    for (let i = this.styleBox.childElementCount; i >= 0; --i)
-      this.styleBox.removeItemAt(i);
-  },
-
-  /**
    * Update the contents of the style panel with styles for the currently
    * inspected node.
    *
@@ -852,11 +789,19 @@
   {
     if (this.inspecting || !this.isStylePanelOpen)
       return;
-    let rules = [], styleSections = [], usedProperties = {};
-    this.style.getInheritedRules(aNode, styleSections, usedProperties);
-    this.style.getElementRules(aNode, rules, usedProperties);
-    this.clearStylePanel();
-    this.createStyleItems(rules, styleSections);
+
+    try {
+      jprofile('cssLogic.highlight');
+      this.cssLogic.highlight(aNode);
+      jprofile('htmlTree.highlight');
+      this.htmlTree.highlight(aNode);
+      jprofile();
+    } catch (ex) {
+      jlog('error in InspectorUI.updateStylePanel()', ex);
+
+      let trace = new Trace(ex);
+      trace.log();
+    }
   },
 
   /////////////////////////////////////////////////////////////////////////
diff -r 3862a5cd80fa browser/base/content/style3.html
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/browser/base/content/style3.html	Thu Aug 12 15:41:11 2010 +0100
@@ -0,0 +1,217 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
+  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
+<head>
+  <style id="dynamic"></style>
+  <title>Style3</title>
+  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
+  <style>
+    body {
+      font-family: Lucida Grande, sans-serif;
+      font-size: 11px;
+      background: #EEE;
+    }
+
+    span.path {
+      font-size: 11px;
+      word-spacing: -1px;
+    }
+    span.path_element, span.path_element_link {
+      -moz-border-radius: 2px;
+      padding: 2px 3px;
+      text-shadow: #FFF 0px 1px 0px;
+      font-weight: bold;
+      font-size: 11px;
+    }
+    a.path_element {
+      background: -moz-linear-gradient(top, #BBE, #99C);
+    }
+    a.path_element:last-of-type {
+      background: -moz-linear-gradient(top, #FFC, #DD8);
+    }
+    span.path_crumb:last-of-type {
+      color: red;
+    }
+    div#header {
+      width: 95%;
+      padding: 5px;
+    }
+    td.sheet_line {
+      text-align: right;
+    }
+    td#path_list {
+      text-align: left;
+    }
+    div#header label {
+      font-weight: bold;
+    }
+    #sheets {
+      margin-right: 10px; margin-top: 5px;
+    }
+    h1 {
+      font-size: 13px;
+      padding: 2px 10px;
+      margin: 0px;
+      background: -moz-linear-gradient(top, #BBB, #999);
+      -moz-border-radius: 2px;
+      text-shadow: #FFF 0px 1px 0px;
+    }
+    h1 .toggle {
+      font-size: 11px;
+      float: right;
+      color: #333;
+    }
+
+    div.property-header {
+      padding: 2px 5px;
+      background: -moz-linear-gradient(top, #F8F8F8, #E8E8E8);
+      color: #666;
+    }
+    /* Take away these two :visited rules to get a core dumper */
+    .link { color: #55A;  }
+    .link:visited { color: #55A;  }
+    a.link { text-decoration: none; }
+    a.link:visited { text-decoration: none; }
+    span.property-rule-count {
+      float: right;
+    }
+    span.property-name {
+      font-size: 12px;
+      font-weight: bold;
+      padding-right: 4px;
+      color: #000;
+    }
+    span.property-value {
+      padding-right: 5px;
+      font-size: 10px;
+    }
+    div.group {
+      margin-top: 10px;
+    }
+    div.group, div#header {
+      background: #FFF;
+      border-color: #E1E1E1;
+      border-style: solid;
+      border-width: 1px;
+      -moz-box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
+      -moz-border-radius: 4px 4px 4px 4px;
+    }
+
+    table.rules {
+      margin-left: 20px;
+    }
+    td.rule-text, td.rule-status {
+      white-space: nowrap;
+      overflow-x: hidden;
+    }
+  </style>
+</head>
+<body role="application">
+
+<!-- The output from #templateHeader (below) is inserted here. -->
+<div id="header">
+</div>
+
+<!-- The output from #templateGroups (below) is inserted here. -->
+<div id="groups">
+</div>
+
+<!--
+To visually debug the templates without running firefox, alter the display:none
+-->
+<div style="display:none;">
+  <!--
+  The header at the top of the window showing options and what we're looking at
+  templateHeader needs data like this:
+  {
+    path_elements: [ 'div[0]', '#main', '#content', 'p[4]' ],
+    sheets: [ { source: 'foo.css' }, { source: 'bar.css' }, ... ],
+  }
+  -->
+  <div id="templateHeader">
+    <table>
+      <tr>
+        <td class="path_line">
+          <label>Looking&nbsp;at:</label>
+          <span class="path" foreach="element in ${path_elements}">
+            <a href="javascript:null;" class="path_element">${element}</a>
+            <span class="path_crumb">&#x27EB;</span>
+          </span>
+        </td>
+      </tr>
+      <tr>
+        <td class="sheet_line">
+          <!--
+          <label for="sheets">Display:</label>
+          <select save="${sheets}">
+            <option foreach="sheet in ${sheets}">${sheet.source}</option>
+            <option selected="selected">All sheets</option>
+            <option>Include UA sheets</option>
+          </select>
+          -->
+          <label for="specificity">Show specificity:</label>
+          <input type="checkbox" save="${specificity}"/>
+          <a class="link" href="#">Huh?</a>
+        </td>
+      </tr>
+    </table>
+  </div>
+
+  <!--
+  Template for the top level groups of properties
+  templateGroups needs data like this:
+  {
+    styleGroups: [ // A reference to CssHtmlTree.styleGroups
+      ..., // Instances of StyleGroupView from style3.js
+    ],
+  }
+  -->
+  <div id="templateGroups">
+    <div class="group" foreach="group in ${styleGroups}">
+      <h1 onclick="${group.click}">
+        ${group.name}
+        <span class="toggle" save="${group.toggle}">&#x25B6;</span>
+      </h1>
+      <div save="${group.element}"></div>
+    </div>
+  </div>
+
+  <!--
+  Inside each group of properties we have the properties themselves
+  templateProperties needs data like this:
+  {
+    group: ..., // Instance of StyleGroupView from style3.js
+  }
+  -->
+  <div id="templateProperties">
+    <div class="temp-loop" foreach="property in ${group.properties}">
+      <div class="property-header open" onclick="${property.click}">
+        <span class="property-name">${property.name}</span>
+        <span class="property-value">${property.value}</span>
+        <span class="property-rule-count link">${property.ruleTitle(__element)}</span>
+      </div>
+      <table class="rules" save="${property.element}"></table>
+    </div>
+  </div>
+
+  <!--
+  Inside each property we have a list of rules that affect that property
+  templateRules needs data like this:
+  {
+    cssInfo: ..., // from cssLogic.getCssInfo(property)
+    statusText: function(status) {}, // convert rule.status to readable text
+  }
+  The table element is only there do the DOM doesn't muck with the tr
+  -->
+  <table id="templateRules">
+    <tr foreach="rule in ${cssInfo.rules}">
+      <td class="rule-text">${rule.selector} &#x2192; ${rule.value}</td>
+      <td><a href="${rule.href}" class="link">${rule.source}</a></td>
+      <td class="rule-status">${statusText(rule.status)}</td>
+    </tr>
+  </table>
+</div>
+
+</body>
+</html>
diff -r 3862a5cd80fa browser/base/content/style3.js
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/browser/base/content/style3.js	Thu Aug 12 15:41:11 2010 +0100
@@ -0,0 +1,690 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=2 et sw=2 tw=80: */
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is the Mozilla Inspector Module.
+ *
+ * The Initial Developer of the Original Code is
+ * The Mozilla Foundation.
+ * Portions created by the Initial Developer are Copyright (C) 2010
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Joe Walker (jwalker@mozilla.com) (original author)
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+/**
+ * CssHtmlTree is a panel that manages the display of a table sorted by style.
+ * There should be one instance of CssHtmlTree per style display (of which there will
+ * generally only be one).
+ * @params styleWin The main XUL browser document
+ * @params cssLogic How we dig into the CSS properties. See csslogic.js
+ * @constructor
+ */
+let CssHtmlTree = function(styleWin, cssLogic)
+{
+  // 'window' in that it contains a document
+  this.styleWin = styleWin
+  this.cssLogic = cssLogic;
+
+  // The document in which we display the results
+  this.styleDocument = XPCNativeWrapper.unwrap(this.styleWin.contentWindow.document);
+
+  // Template and destination for the block at the top (see style3.html)
+  this.header = this.styleDocument.getElementById('header');
+  this.templateHeader = this.styleDocument.getElementById('templateHeader');
+  // The main section of css property groups without nested properties/rules
+  this.groups = this.styleDocument.getElementById('groups');
+  this.templateGroups = this.styleDocument.getElementById('templateGroups');
+  // Template for the properties that nest inside templateGroups
+  this.templateProperties = this.styleDocument.getElementById('templateProperties');
+  // The rules section nests inside templateProperties
+  this.templateRules = this.styleDocument.getElementById('templateRules');
+
+  // The element that we're inspecting
+  this.viewedElement = null;
+  // And the document that it comes from
+  this.viewedDocument = null;
+  
+  this.createStyleGroupViews();
+};
+
+CssHtmlTree.prototype = {
+  /**
+   * TODO: Not sure if we need this: it is currently referenced from browser.xul
+   */
+  onClick: function()
+  {
+  },
+
+  /**
+   * Focus the output display on a specific element
+   * @param element The highlighted node to get styles for.
+   */
+  highlight: function CssHtmlTree_highlight(element)
+  {
+    if (element === this.viewedElement) {
+      return;
+    }
+
+    this.viewedElement = element;
+    this.viewedDocument = XPCNativeWrapper.unwrap(element.ownerDocument);
+
+    if (this.viewedElement) {
+      this._populateMainTemplates();
+    } else {
+      this.header.innerHTML = '';
+      this.groups.innerHTML = '';
+    }
+  },
+
+  /**
+   * Process the main template
+   */
+  _populateMainTemplates: function CssHtmlTree_populateMainTemplate()
+  {
+    let self = this;
+    jlog('_populateMainTemplates ' + CssLogic.getShortNamePath(this.viewedElement).join(' > ') + ' from ' + this.viewedElement.ownerDocument.location.href);
+
+    let data = {
+      path_elements: CssLogic.getShortNamePath(this.viewedElement),
+      sheets: this.cssLogic.sheets,
+    };
+    this._template(this.templateHeader, this.header, data);
+
+    data = { styleGroups: this.styleGroups };
+    this._template(this.templateGroups, this.groups, data);
+  },
+
+  /**
+   * When a property is clicked in the main groups table
+   */
+  _populateRulesTemplates: function CssHtmlTree_populateRulesTemplates(ev)
+  {
+    let property = ev.currentTarget.getAttribute('property');
+  },
+
+  /**
+   * Clone the given template node, and process it by resolving ${} references
+   * in the template
+   */
+  _template: function CssHtmlTree_template(templateEle, destEle, data)
+  {
+    destEle.innerHTML = '';
+    // All the templater does is to populate a given DOM tree with the given
+    // values, so we need to clone the template first
+    let duplicated = templateEle.cloneNode(true);
+    new Templater().processNode(duplicated, data);
+    while (duplicated.firstChild) {
+      destEle.appendChild(duplicated.firstChild);
+    }
+  },
+
+  /**
+   * Loop through all the properties that we support
+   */
+  forAllProperties: function CssHtmlTree_forAllProperties(block, scope)
+  {
+    for (let group in this.styleGroups) {
+      if (this.styleGroups.hasOwnProperty(group)) {
+        let properties = this.styleGroups[group];
+        properties.forEach(function(property) {
+          block(property);
+        }, scope);
+      }
+    }
+  },
+
+  /**
+   * The CSS groups as displayed by the UI
+   */
+  createStyleGroupViews: function()
+  {
+    this.styleGroups = [
+      new StyleGroupView(this, 'Fonts and Color', [
+        'color',
+        'font-size',
+        'line-height',
+        'font-weight',
+        'font-style',
+        'text-decoration',
+        'font-family',
+      ]),
+  
+      new StyleGroupView(this, 'Text', [
+        'text-align',
+        'direction',
+        'vertical-align',
+        'white-space',
+        'text-transform',
+        'letter-spacing',
+        'word-spacing',
+        'column-count',
+        'column-gap',
+        'column-width',
+      ]),
+  
+      new StyleGroupView(this, 'Background', [
+        'background-color',
+        'background-image',
+        'background-repeat',
+        'background-position',
+        'background-attachment',
+      ]),
+  
+      new StyleGroupView(this, 'Dimensions', [
+        'width',
+        'height',
+        'margin-top',
+        'margin-right',
+        'margin-bottom',
+        'margin-left',
+        'padding-top',
+        'padding-right',
+        'padding-bottom',
+        'padding-left',
+        'clip',
+        '-moz-box-sizing',
+      ]),
+  
+      new StyleGroupView(this, 'Positioning and Page Flow', [
+        'top',
+        'right',
+        'bottom',
+        'left',
+        'display',
+        'float',
+        'clear',
+        'position',
+        'visibility',
+        'overflow',
+        'z-index',
+      ]),
+  
+      new StyleGroupView(this, 'Borders', [
+        'border-top-width',
+        'border-right-width',
+        'border-bottom-width',
+        'border-left-width',
+        'border-top-color',
+        'border-right-color',
+        'border-bottom-color',
+        'border-left-color',
+        'border-top-style',
+        'border-right-style',
+        'border-bottom-style',
+        'border-left-style',
+        'outline-top-width',
+        'outline-right-width',
+        'outline-bottom-width',
+        'outline-left-width',
+        'outline-top-color',
+        'outline-right-color',
+        'outline-bottom-color',
+        'outline-left-color',
+        'outline-top-style',
+        'outline-right-style',
+        'outline-bottom-style',
+        'outline-left-style',
+        '-moz-border-top-radius',
+        '-moz-border-right-radius',
+        '-moz-border-bottom-radius',
+        '-moz-border-left-radius',
+      ]),
+  
+      new StyleGroupView(this, 'Bullets', [
+        'list-style-image',
+        'list-style-position',
+        'list-style-type',
+      ]),
+  
+      new StyleGroupView(this, 'Effects and Other', [
+        'opacity',
+        'cursor',
+        'marker-offset',
+        'user-focus',
+        'user-select',
+        'user-modify',
+        'user-input',
+      ]),
+    ];
+  },
+};
+
+/**
+ * A container to give easy access to style group data from the template engine
+ */
+let StyleGroupView = function(tree, name, propertyNames)
+{
+  this.tree = tree;
+  this.name = name;
+  this.properties = [];
+  propertyNames.forEach(function(propertyName) {
+    this.properties.push(new PropertyView(tree, this, propertyName));
+  }, this);
+
+  this.closed = true;
+  this.element = null; // Assigned by templating process
+  this.populated = false;
+}
+
+StyleGroupView.prototype = {
+  click: function StyleGroupView_click(event) {
+    // TODO: animate opening/closing?
+    if (!this.closed) {
+      this.element.style.display = 'none';
+      this.toggle.innerHTML = '&#x25B6;';
+      this.closed = true;
+      return;
+    }
+
+    if (!this.populated) {
+      let data = { group: this };
+      this.tree._template(this.tree.templateProperties, this.element, data);
+      this.populated = true;
+    }
+
+    this.element.style.display = 'block';
+    this.toggle.innerHTML = '&#x25BC;';
+    this.closed = false;
+  },
+};
+
+/**
+ * A container to give easy access to property data from the template engine
+ * TODO: have a common base class for this and StyleGroupView?
+ */
+let PropertyView = function(tree, group, name)
+{
+  this.tree = tree;
+  this.group = group;
+  this.name = name;
+
+  this.closed = true;
+  this.element = null; // Assigned by templating process
+  this.populated = false;
+};
+
+PropertyView.prototype = {
+  click: function PropertyView_click(event)
+  {
+    // TODO: animate opening/closing?
+    if (!this.closed) {
+      this.element.style.display = 'none';
+      if (this.toggle) {
+        this.toggle.innerHTML = '&#x25B6;';
+      }
+      this.closed = true;
+      return;
+    }
+
+    if (!this.populated) {
+      let data = {
+        cssInfo: this.tree.cssLogic.getCssInfo(this.name),
+
+        statusText: function(status) {
+          return CssLogic.STATUS_NAMES[status];
+        },
+      };
+      this.tree._template(this.tree.templateRules, this.element, data);
+      this.populated = true;
+    }
+
+    this.element.style.display = 'block';
+    if (this.toggle) {
+      this.toggle.innerHTML = '&#x25BC;';
+    }
+    this.closed = false;
+  },
+
+  get value(property) {
+    return this.tree.cssLogic.getCssInfo(property).value;
+  },
+
+  ruleTitle: function(element) {
+    Scheduler.addJob(function() {
+      let ruleCount = this.tree.cssLogic.getCssInfo(this.name).ruleCount;
+      if (ruleCount > 1) {
+        let data = '';
+        if (ruleCount === 1) {
+          data = '' + ruleCount + ' rule ';
+        } else {
+          data = '' + ruleCount + ' rules ';
+        }
+        element.innerHTML = data;
+
+        this.toggle = element.ownerDocument.createElement('span');
+        this.toggle.className = 'toggle';
+        this.toggle.innerHTML = '&#x25B6;';
+        element.appendChild(this.toggle);
+      }
+    }, this);
+
+    return '';
+  },
+};
+
+/**
+ * A quick job scheduler to allow us to do lots of work without choking the
+ * main thread.
+ * TODO: There must be a better way?
+ */
+let Scheduler = {
+  jobs: [],
+  interJobDelay: 100,
+  _timeout: null,
+
+  addJob: function(func, scope)
+  {
+    this.jobs.unshift({ func: func, scope: scope });
+    this._scheduleNextJob();
+  },
+
+  _scheduleNextJob: function()
+  {
+    let self = this;
+    if (self._timeout !== null) {
+      return;
+    }
+
+    self._timeout = setTimeout(function() {
+      self._timeout = null;
+      if (self.jobs.length === 0) {
+        return;
+      }
+
+      let job = self.jobs.pop();
+      job.func.apply(job.scope);
+      self._scheduleNextJob();
+    }, this.interJobDelay);
+  },
+}
+
+
+
+////////////////////////////////////////////////////////////////////////////////
+
+function Templater() {
+};
+
+/**
+ * Recursive function to walk the tree processing the attributes as it goes.
+ */
+Templater.prototype.processNode = function(node, data) {
+    var self = this;
+    var recurse = true;
+    // Process attributes
+    if (node.attributes && node.attributes.length) {
+        //
+        data.__element = node;
+        // It's good to clean up the attributes when we've processed them,
+        // but if we do it straight away, we mess up the array index
+        var attrs = Array.prototype.slice.call(node.attributes);
+        for (var i = 0; i < attrs.length; i++) {
+            var value = attrs[i].value;
+            var name = attrs[i].name;
+
+            if (name === 'save') {
+                // Save attributes are a setter using the node
+                value = self.stripBraces(value);
+                self.property(value, data, node);
+                node.removeAttribute('save');
+            } else if (name === 'if') {
+                value = self.stripBraces(value);
+                try {
+                    var reply = self.envEval(value, data, attrs[i].value);
+                    recurse = !!reply;
+                } catch (ex) {
+                    this.error('Error with \'', value, '\'', ex);
+                    recurse = false;
+                }
+                if (!recurse) {
+                    node.parentNode.removeChild(node);
+                }
+                node.removeAttribute('if');
+            } else if (name === 'foreach') {
+                var paramName = 'param';
+                if (value.charAt(0) === '$') {
+                    // No custom loop variable name. Use the default: 'param'
+                    value = self.stripBraces(value);
+                } else {
+                    // Extract the loop variable name from 'NAME in ${ARRAY}'
+                    var nameArr = value.split(' in ');
+                    paramName = nameArr[0].trim();
+                    value = self.stripBraces(nameArr[1].trim());
+                }
+                recurse = false;
+                try {
+                    var processMember = function(member) {
+                        var clone = node.cloneNode(true);
+                        clone.removeAttribute('foreach');
+                        node.parentNode.insertBefore(clone, node);
+                        data[paramName] = member;
+                        self.processNode(clone, data);
+                        delete data[paramName];
+                    };
+                    var reply = self.envEval(value, data, attrs[i].value);
+                    if (Array.isArray(reply)) {
+                        reply.forEach(processMember);
+                    } else {
+                        for (var param in reply) {
+                            if (reply.hasOwnProperty(param)) {
+                                processMember(param);
+                            }
+                        }
+                    }
+                    node.parentNode.removeChild(node);
+                } catch (ex) {
+                    this.error('Error with \'', value, '\'', ex);
+                    recurse = false;
+                }
+                node.removeAttribute('foreach');
+            } else if (name.substring(0, 2) === 'on') {
+                // Event registration relies on property doing a bind
+                value = self.stripBraces(value);
+                var func = self.property(value, data);
+                if (typeof func !== 'function') {
+                    this.error('Expected ' + value +
+                            ' to resolve to a function, but got ', typeof func);
+                }
+                node.removeAttribute(name);
+                var capture = node.hasAttribute('capture' + name.substring(2));
+                node.addEventListener(name.substring(2), func, capture);
+            } else {
+                // Replace references in other attributes
+                var newValue = value.replace(/\$\{[^}]*\}/g, function(path) {
+                    return self.envEval(path.slice(2, -1), data, value);
+                });
+                // Remove '_' prefix of attribute names so the DOM won't try
+                // to use them before we've processed the template
+                if (name.indexOf('_') === 0) {
+                    node.removeAttribute(name);
+                    node.setAttribute(name.substring(1), newValue);
+                } else if (value !== newValue) {
+                    attrs[i].value = newValue;
+                }
+            }
+        }
+    }
+
+    // Process child nodes
+    if (recurse) {
+        self.processChildren(node, data);
+    }
+
+    // Process TextNodes
+    if (node.nodeType === Node.TEXT_NODE) {
+        // Replace references in other attributes
+        value = node.data; // TODO: is this more correct than textContent?
+        // We can't use the string.replace() with function trick because we need
+        // to support functions that return DOM nodes, so we can't have the
+        // conversion to a string.
+        // Instead we process the string as an array of parts. In order to split
+        // the string up, we first replace ${ with \uF001$ and } with \uF002
+        // We can then split using \uF001 or \uF002 to get an array of strings
+        // where scripts are prefixed with $.
+        // \uF001 and \uF002 are just unicode chars reserved for private use.
+        value = value.replace(/\$\{([^}]*)\}/g, '\uF001$$$1\uF002');
+        var parts = value.split(/\uF001|\uF002/);
+        if (parts.length > 1) {
+            parts.forEach(function(part) {
+                if (part === null || part === undefined || part === '') {
+                    return;
+                }
+                if (part.charAt(0) === '$') {
+                    part = self.envEval(part.slice(1), data, node.data);
+                }
+                if (part === null) {
+                    part = "null";
+                }
+                if (part === undefined) {
+                    part = "undefined";
+                }
+                // Hmmm isDOMElement ...
+                if (typeof part.cloneNode !== 'function') {
+                    part = node.ownerDocument.createTextNode(part.toString());
+                }
+                node.parentNode.insertBefore(part, node);
+            });
+            node.parentNode.removeChild(node);
+        }
+    }
+};
+
+/**
+ * Loop through the child nodes of the given node, calling processNode on them
+ * all. Note this first clones the set of nodes, so the set of nodes that we
+ * visit will be unaffected by additions or removals.
+ * @param node The node from which to find children to visit.
+ * @param data The data to pass to processNode
+ */
+Templater.prototype.processChildren = function(node, data) {
+    var children = Array.prototype.slice.call(node.childNodes);
+    for (var i = 0; i < children.length; i++) {
+        this.processNode(children[i], data);
+    }
+};
+
+/**
+ * Warn of string does not begin '${' and end '}'
+ * @return The string stripped of ${ and }, or untouched if it does not match
+ */
+Templater.prototype.stripBraces = function(str) {
+    if (!str.match(/\$\{.*\}/g)) {
+        this.error('Expected ' + str + ' to match ${...}');
+        return str;
+    }
+    return str.slice(2, -1);
+};
+
+/**
+ * Combined getter and setter that works with a path through some data set.
+ * For example:<ul>
+ * <li>property('a.b', { a: { b: 99 }}); // returns 99
+ * <li>property('a', { a: { b: 99 }}); // returns { b: 99 }
+ * <li>property('a', { a: { b: 99 }}, 42); // returns 99 and alters the
+ * input data to be { a: { b: 42 }}
+ * </ul>
+ * @param path An array of strings indicating the path through the data, or
+ * a string to be cut into an array using <tt>split('.')</tt>
+ * @param data An object to look in for the <tt>path</tt>
+ * @param newValue (optional) If undefined, this value will replace the
+ * original value for the data at the path specified.
+ * @returns The value pointed to by <tt>path</tt> before any
+ * <tt>newValue</tt> is applied.
+ */
+Templater.prototype.property = function(path, data, newValue) {
+    if (typeof path === 'string') {
+        path = path.split('.');
+    }
+    var value = data[path[0]];
+    if (path.length === 1) {
+        if (newValue !== undefined) {
+            data[path[0]] = newValue;
+        }
+        if (typeof value === 'function') {
+            return function() { return value.apply(data, arguments); }
+        }
+        return value;
+    }
+    if (!value) {
+        this.error('Can\'t find path=', path, " in data=", data);
+        return null;
+    }
+    return this.property(path.slice(1), value, newValue);
+};
+
+/**
+ * Like eval, but that creates a context of the variables in <tt>env</tt> in
+ * which the script is evaluated.
+ * WARNING: This script uses 'with' which is generally regarded to be evil.
+ * The alternative is to create a Function at runtime that takes X parameters
+ * according to the X keys in the env object, and then call that function using
+ * the values in the env object. This is likely to be slow, but workable.
+ * @param script The string to be evaluated
+ * @param env The environment in which to eval the script.
+ * @param context Optional debugging string in case of failure
+ * @returns The return value of the script
+ */
+Templater.prototype.envEval = function(script, env, context) {
+    with (env) {
+        try {
+            return eval(script);
+        } catch (ex) {
+            var message = 'Error evaluating \'' + script + '\'';
+            if (context && script !== context) {
+                message += ' within \'' + context + '\'';
+            }
+            this.error(message + ': ' + ex);
+            return message;
+        }
+    }
+};
+
+/**
+ * A generic way of reporting errors, for easy overloading in different
+ * environments.
+ */
+Templater.prototype.error = function() {
+    jlog.apply(null, arguments);
+};
+
+////////////////////////////////////////////////////////////////////////////////
+
+// TODO: remove jlog/jprofile before live
+
+if (typeof jprofile !== 'function') {
+  let jprofile = function(message) {
+    Services.console.logStringMessage('No jprofile. See jdebug.js: ' + message);
+  };
+}
+
+if (typeof jlog !== 'function') {
+  let jlog = function(message) {
+    Services.console.logStringMessage('No jlog. See jdebug.js: ' + message);
+  };
+}
diff -r 3862a5cd80fa browser/base/jar.mn
--- a/browser/base/jar.mn	Thu Aug 05 11:25:52 2010 +0100
+++ b/browser/base/jar.mn	Thu Aug 12 15:41:11 2010 +0100
@@ -27,6 +27,7 @@
 *       content/browser/browser-tabPreviews.xml       (content/browser-tabPreviews.xml)
 *       content/browser/credits.xhtml                 (content/credits.xhtml)
 *       content/browser/fullscreen-video.xhtml        (content/fullscreen-video.xhtml)
+*       content/browser/style3.html                   (content/style3.html)
 *       content/browser/pageinfo/pageInfo.xul         (content/pageinfo/pageInfo.xul)
 *       content/browser/pageinfo/pageInfo.js          (content/pageinfo/pageInfo.js)
 *       content/browser/pageinfo/pageInfo.css         (content/pageinfo/pageInfo.css)
