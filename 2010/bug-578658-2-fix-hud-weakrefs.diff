diff -r f8aed7b7b2ca toolkit/components/console/hudservice/HUDService.jsm
--- a/toolkit/components/console/hudservice/HUDService.jsm	Wed Jul 21 23:45:15 2010 +0300
+++ b/toolkit/components/console/hudservice/HUDService.jsm	Thu Jul 22 16:29:08 2010 +0300
@@ -1338,40 +1338,32 @@ HUD_SERVICE.prototype =
       for (var i = 0; i < childNodes.length; i++) {
         let id = childNodes[i].getAttribute("id");
         if (id.split("_")[0] == "hud") {
           hudNode = childNodes[i];
           break;
         }
       }
 
+      // If there is no hudNode, then we have to recreate the HeadsUpDisplay
       if (!hudNode) {
         // get nBox object and call new HUD
         let config = { parentNode: nBox,
                        contentWindow: aContentWindow
                      };
 
         let _hud = new HeadsUpDisplay(config);
 
         let hudWeakRef = Cu.getWeakReference(_hud);
         HUDService.registerHUDWeakReference(hudWeakRef, hudId);
       }
       else {
-        // only need to attach a console object to the window object
-        let config = { hudNode: hudNode,
-                       consoleOnly: true,
-                       contentWindow: aContentWindow
-                     };
-
-        let _hud = new HeadsUpDisplay(config);
-
-        let hudWeakRef = Cu.getWeakReference(_hud);
-        HUDService.registerHUDWeakReference(hudWeakRef, hudId);
-
-        aContentWindow.wrappedJSObject.console = _hud.console;
+        // Otherwise, just reattach the console to the page.
+        let _hud = this.hudWeakReferences[hudId].get();
+        _hud.reattachConsole(aContentWindow);
       }
     }
     // capture JS Errors
     this.setOnErrorHandler(aContentWindow);
   }
 };
 
 //////////////////////////////////////////////////////////////////////////
@@ -1389,32 +1381,16 @@ function HeadsUpDisplay(aConfig)
   //                  // or
   //                  parentNodeId: "myHUDParent123",
   //
   //                  placement: "appendChild"
   //                  // or
   //                  placement: "insertBefore",
   //                  placementChildNodeIndex: 0,
   //                }
-  //
-  // or, just create a new console - as there is already a HUD in place
-  // config: { hudNode: existingHUDDOMNode,
-  //           consoleOnly: true,
-  //           contentWindow: aWindow
-  //         }
-
-  if (aConfig.consoleOnly) {
-    this.HUDBox = aConfig.hudNode;
-    this.parentNode = aConfig.hudNode.parentNode;
-    this.notificationBox = this.parentNode;
-    this.contentWindow = aConfig.contentWindow;
-    this.uriSpec = aConfig.contentWindow.location.href;
-    this.reattachConsole();
-    return;
-  }
 
   this.HUDBox = null;
 
   if (aConfig.parentNode) {
     // TODO: need to replace these DOM calls with internal functions
     // that operate on each application's node structure
     // better yet, we keep these functions in a "bridgeModule" or the HUDService
     // to keep a registry of nodeGetters for each application
@@ -1568,34 +1544,39 @@ HeadsUpDisplay.prototype = {
     else {
       throw new Error("Unsupported Gecko Application");
     }
   },
 
   /**
    * Re-attaches a console when the contentWindow is recreated
    *
+   * @param nsIDOMWindow aContentWindow
    * @returns void
    */
-  reattachConsole: function HUD_reattachConsole()
+  reattachConsole: function HUD_reattachConsole(aContentWindow)
   {
-    this.hudId = this.HUDBox.getAttribute("id");
-
-    // set outputNode and filterBox
-    this.outputNode = this.HUDBox.querySelectorAll(".hud-output-node")[0];
-    this.filterBox = this.HUDBox.querySelectorAll(".hud-filter-box")[0];
-
-    this.chromeDocument = this.HUDBox.ownerDocument;
-
-    if (this.outputNode) {
-      // createConsole
+    this.contentWindow = aContentWindow;
+    this.uriSpec = aContentWindow.location.href;
+
+    // createConsole
+    if (!this._console) {
       this.createConsole();
     }
     else {
-      throw new Error("Cannot get output node");
+      HUDService.updateLoadGroup(this.hudId, this.loadGroup);
+    }
+    aContentWindow.wrappedJSObject.console = this.console;
+
+    if (!this.jsterm) {
+      this.createConsoleInput(this.contentWindow, this.consoleWrap, this.outputNode);
+    }
+    else {
+      this.jsterm.context = Cu.getWeakReference(this.contentWindow);
+      this.jsterm.createSandbox();
     }
   },
 
   /**
    * Gets the loadGroup for the contentWindow
    *
    * @returns nsILoadGroup
    */
