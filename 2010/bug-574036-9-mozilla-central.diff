diff --git a/toolkit/components/console/hudservice/HUDService.jsm b/toolkit/components/console/hudservice/HUDService.jsm
--- a/toolkit/components/console/hudservice/HUDService.jsm
+++ b/toolkit/components/console/hudservice/HUDService.jsm
@@ -20,16 +20,17 @@
  * Portions created by the Initial Developer are Copyright (C) 2010
  * the Initial Developer. All Rights Reserved.
  *
  * Contributor(s):
  *   David Dahl <ddahl@mozilla.com> (original author)
  *   Rob Campbell <rcampbell@mozilla.com>
  *   Johnathan Nightingale <jnightingale@mozilla.com>
  *   Patrick Walton <pcwalton@mozilla.com>
+ *   Mihai Șucan <mihai.sucan@gmail.com>
  *
  * Alternatively, the contents of this file may be used under the terms of
  * either the GNU General Public License Version 2 or later (the "GPL"), or
  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
  * in which case the provisions of the GPL or the LGPL are applicable instead
  * of those above. If you wish to allow use of your version of this file only
  * under the terms of either the GPL or the LGPL, and not to allow others to
  * use your version of this file under the terms of the MPL, indicate your
@@ -1611,16 +1612,18 @@ function HeadsUpDisplay(aConfig)
   }
   catch(ex) {
     Cu.reportError(ex);
   }
 
   this.XULFactory = NodeFactory("xul", "xul", this.chromeDocument);
   this.textFactory = NodeFactory("text", "xul", this.chromeDocument);
 
+  this.chromeWindow = HUDService.getChromeWindowFromContentWindow(this.contentWindow);
+
   // create a panel dynamically and attach to the parentNode
   let hudBox = this.createHUD();
 
   let splitter = this.chromeDocument.createElement("splitter");
   splitter.setAttribute("class", "hud-splitter");
 
   this.notificationBox.insertBefore(splitter,
                                     this.notificationBox.childNodes[1]);
@@ -1694,19 +1697,25 @@ HeadsUpDisplay.prototype = {
    * Re-attaches a console when the contentWindow is recreated
    *
    * @returns void
    */
   reattachConsole: function HUD_reattachConsole()
   {
     this.hudId = this.HUDBox.getAttribute("id");
 
-    // set outputNode
     this.outputNode = this.HUDBox.querySelectorAll(".hud-output-node")[0];
 
+    this.contextMenu = this.HUDBox.querySelector("#" + this.hudId +
+        "-output-contextmenu");
+    this.copyOutputMenuItem = this.HUDBox.
+      querySelector("menuitem[command=cmd_copy]");
+
+    this.chromeWindow = HUDService.
+      getChromeWindowFromContentWindow(this.contentWindow);
     this.chromeDocument = this.HUDBox.ownerDocument;
 
     if (this.outputNode) {
       // createConsole
       this.createConsole();
     }
     else {
       throw new Error("Cannot get output node");
@@ -1801,16 +1810,17 @@ HeadsUpDisplay.prototype = {
     let consoleWrap = this.makeXULNode("vbox");
     this.consoleWrap = consoleWrap;
     consoleWrap.setAttribute("class", "hud-console-wrapper");
     consoleWrap.setAttribute("flex", "1");
 
     this.outputNode = this.makeXULNode("vbox");
     this.outputNode.setAttribute("class", "hud-output-node");
     this.outputNode.setAttribute("flex", "1");
+    this.outputNode.setAttribute("context", this.hudId + "-output-contextmenu");
 
     this.filterSpacer = this.makeXULNode("spacer");
     this.filterSpacer.setAttribute("flex", "1");
 
     this.filterBox = this.makeXULNode("textbox");
     this.filterBox.setAttribute("class", "hud-filter-box");
     this.filterBox.setAttribute("hudId", this.hudId);
     this.filterBox.setAttribute("placeholder", this.getStr("stringFilter"));
@@ -1825,24 +1835,35 @@ HeadsUpDisplay.prototype = {
     this.consoleClearButton = this.makeXULNode("button");
     this.consoleClearButton.setAttribute("class", "hud-console-clear");
     this.consoleClearButton.setAttribute("label", this.getStr("btnClear"));
     this.consoleClearButton.setAttribute("buttonType", "clear");
     this.consoleClearButton.setAttribute("hudId", this.hudId);
     var command = "HUDConsoleUI.command(this)";
     this.consoleClearButton.setAttribute("oncommand", command);
 
+    this.copyOutputMenuItem = this.makeXULNode("menuitem");
+    this.copyOutputMenuItem.setAttribute("label", this.getStr("copyCmd.label"));
+    this.copyOutputMenuItem.setAttribute("accesskey", this.getStr("copyCmd.accesskey"));
+    this.copyOutputMenuItem.setAttribute("key", "key_copy");
+    this.copyOutputMenuItem.setAttribute("command", "cmd_copy");
+
+    this.contextMenu = this.makeXULNode("menupopup");
+    this.contextMenu.setAttribute("id", this.hudId + "-output-contextmenu");
+    this.contextMenu.appendChild(this.copyOutputMenuItem);
+
     this.filterPrefs = HUDService.getDefaultFilterPrefs(this.hudId);
 
     let consoleFilterToolbar = this.makeFilterToolbar();
     consoleFilterToolbar.setAttribute("id", "viewGroup");
     this.consoleFilterToolbar = consoleFilterToolbar;
     consoleWrap.appendChild(consoleFilterToolbar);
 
     consoleWrap.appendChild(this.outputNode);
+    outerWrap.appendChild(this.contextMenu);
     outerWrap.appendChild(consoleWrap);
 
     this.jsTermParentNode = outerWrap;
     this.HUDBox.appendChild(outerWrap);
     return this.HUDBox;
   },
 
 
diff --git a/toolkit/components/console/hudservice/tests/browser/browser_HUDServiceTestsAll.js b/toolkit/components/console/hudservice/tests/browser/browser_HUDServiceTestsAll.js
--- a/toolkit/components/console/hudservice/tests/browser/browser_HUDServiceTestsAll.js
+++ b/toolkit/components/console/hudservice/tests/browser/browser_HUDServiceTestsAll.js
@@ -16,16 +16,17 @@
  *
  * The Initial Developer of the Original Code is Mozilla Foundation.
  * Portions created by the Initial Developer are Copyright (C) 2010
  * the Initial Developer. All Rights Reserved.
  *
  * Contributor(s):
  *  David Dahl <ddahl@mozilla.com>
  *  Patrick Walton <pcwalton@mozilla.com>
+ *  Mihai Șucan <mihai.sucan@gmail.com>
  *
  * Alternatively, the contents of this file may be used under the terms of
  * either the GNU General Public License Version 2 or later (the "GPL"), or
  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
  * in which case the provisions of the GPL or the LGPL are applicable instead
  * of those above. If you wish to allow use of your version of this file only
  * under the terms of either the GPL or the LGPL, and not to allow others to
  * use your version of this file under the terms of the MPL, indicate your
@@ -648,25 +649,68 @@ function testErrorOnPageReload() {
     var outputNode = display.querySelectorAll(".hud-output-node")[0];
 
     button.addEventListener("click", function onClickHandler() {
       button.removeEventListener("click", onClickHandler, false);
 
       testLogEntry(outputNode, "fooBazBaz",
         { success: successMsg, err: errMsg });
 
-      testEnd();
+      testCopyOutputMenuItem();
     }, false);
 
     button.dispatchEvent(clickEvent);
   }, false);
 
   content.location.href = TEST_ERROR_URI;
 }
 
+function testCopyOutputMenuItem()
+{
+  var HUD = HUDService.hudWeakReferences[hudId].get();
+  var selection = getSelection();
+  var console = content.wrappedJSObject.console;
+
+  if (selection.rangeCount > 0) {
+    selection.removeAllRanges();
+  }
+
+  // test 1: check that the copyOutputMenuItem is disabled
+  HUD.contextMenu.addEventListener("popupshown", function () {
+    HUD.contextMenu.removeEventListener("popupshown", arguments.callee, false);
+
+    ok(HUD.copyOutputMenuItem.disabled, "HUD.copyOutputMenuItem is disabled");
+
+    console.log("Hello world!");
+
+    var range = HUD.chromeDocument.createRange();
+    range.selectNode(HUD.outputNode.firstChild);
+    selection.addRange(range);
+
+    // test 2: check that the copyOutputMenuItem is enabled, because a node is
+    // selected.
+    HUD.contextMenu.addEventListener("popupshown", function () {
+      HUD.contextMenu.removeEventListener("popupshown", arguments.callee,
+        false);
+
+      ok(!HUD.copyOutputMenuItem.disabled, "HUD.copyOutputMenuItem is enabled");
+
+      selection.removeAllRanges();
+
+      testEnd();
+    }, false);
+
+    EventUtils.synthesizeMouse(HUD.outputNode, 1, 1, {type: "contextmenu",
+      button: 2});
+  }, false);
+
+  EventUtils.synthesizeMouse(HUD.outputNode, 1, 1, {type: "contextmenu",
+    button: 2});
+}
+
 function testEnd() {
   // testUnregister();
   executeSoon(function () {
     HUDService.deactivateHUDForContext(tab);
     HUDService.shutdown();
   });
   finish();
 }
diff --git a/toolkit/locales/en-US/chrome/global/headsUpDisplay.properties b/toolkit/locales/en-US/chrome/global/headsUpDisplay.properties
--- a/toolkit/locales/en-US/chrome/global/headsUpDisplay.properties
+++ b/toolkit/locales/en-US/chrome/global/headsUpDisplay.properties
@@ -30,8 +30,10 @@ btnLog=Log
 tipLog=Toggle console.log logging
 btnGlobal=Global Messages
 tipGlobal=Toggle Global Message logging
 localConsole=Local Console
 btnClear=Clear Console
 tipClear=Clear the console output
 stringFilter=Filter
 stringFilterClear=Clear Filter
+copyCmd.label=Copy
+copyCmd.accesskey=C
diff --git a/toolkit/themes/pinstripe/global/headsUpDisplay.css b/toolkit/themes/pinstripe/global/headsUpDisplay.css
--- a/toolkit/themes/pinstripe/global/headsUpDisplay.css
+++ b/toolkit/themes/pinstripe/global/headsUpDisplay.css
@@ -53,16 +53,17 @@
     font-size: 1em;
     padding-top: 0.33em;
     font-weight: bold;
 }
 
 .hud-output-node div {
     -moz-user-select: text;
     white-space: pre-wrap;
+    -moz-user-focus: normal;
 }
 
 .hud-output-node .hud-network {
     color: blue;
 }
 
 .hud-output-node .hud-error {
     color: red;
diff --git a/toolkit/themes/winstripe/global/headsUpDisplay.css b/toolkit/themes/winstripe/global/headsUpDisplay.css
--- a/toolkit/themes/winstripe/global/headsUpDisplay.css
+++ b/toolkit/themes/winstripe/global/headsUpDisplay.css
@@ -53,16 +53,17 @@
     font-size: 1em;
     padding-top: 0.33em;
     font-weight: bold;
 }
 
 .hud-output-node div {
     -moz-user-select: text;
     white-space: pre-wrap;
+    -moz-user-focus: normal;
 }
 
 .hud-output-node .hud-network {
     color: blue;
 }
 
 .hud-output-node .hud-error {
     color: red;
