# HG changeset patch
# User Joe Walker <jwalker@mozilla.com>
# Date 1281106754 -3600
# Node ID a6d47ab396c7abf9605c6c725c95be63fc010f16
# Parent cf91ed74041c166538b2e3d4cf6996792737a0e1
XUL tree to go atop csslogic

diff -r cf91ed74041c browser/base/content/browser-sets.inc
--- a/browser/base/content/browser-sets.inc	Thu Aug 05 11:25:52 2010 +0100
+++ b/browser/base/content/browser-sets.inc	Tue Aug 10 13:12:36 2010 +0100
@@ -152,6 +152,8 @@
              disabled="true"/>
     <command id="Inspector:Style"
              oncommand="InspectorUI.toggleStylePanel();"/>
+    <command id="Inspector:Style3"
+             oncommand="InspectorUI.style3.togglePanel();"/>
   </commandset>
 
   <broadcasterset id="mainBroadcasterSet">
diff -r cf91ed74041c browser/base/content/browser.js
--- a/browser/base/content/browser.js	Thu Aug 05 11:25:52 2010 +0100
+++ b/browser/base/content/browser.js	Tue Aug 10 13:12:36 2010 +0100
@@ -180,6 +180,7 @@
 #include browser-fullZoom.js
 #include inspector.js
 #include csslogic.js
+#include style3.js
 #include browser-places.js
 #include browser-tabPreviews.js
 
diff -r cf91ed74041c browser/base/content/browser.xul
--- a/browser/base/content/browser.xul	Thu Aug 05 11:25:52 2010 +0100
+++ b/browser/base/content/browser.xul	Tue Aug 10 13:12:36 2010 +0100
@@ -35,6 +35,7 @@
 #   Robert Strong <robert.bugzilla@gmail.com>
 #   Rob Campbell <rcampbell@mozilla.com>
 #   Patrick Walton <pcwalton@mozilla.com>
+#   Joe Walker <jwalker@mozilla.com>
 #
 # Alternatively, the contents of this file may be used under the terms of
 # either the GNU General Public License Version 2 or later (the "GPL"), or
@@ -231,7 +232,7 @@
            ignorekeys="true"
            noautofocus="true"
            noautohide="true"
-           level="top"
+           level="floating"
            titlebar="normal"
            label="&inspectPanelTitle.label;">
       <toolbar id="inspector-toolbar"
@@ -256,6 +257,11 @@
                        accesskey="&inspectStyleButton.accesskey;"
                        class="toolbarbutton-text"
                        command="Inspector:Style"/>
+        <toolbarbutton id="inspector-style3-toolbutton"
+                       label="&inspectStyle3Button.label;"
+                       accesskey="&inspectStyle3Button.accesskey;"
+                       class="toolbarbutton-text"
+                       command="Inspector:Style3"/>
       </toolbar>
       <tree id="inspector-tree" class="plain"
             seltype="single"
@@ -283,7 +289,7 @@
            ignorekeys="true"
            noautofocus="true"
            noautohide="true"
-           level="top"
+           level="floating"
            titlebar="normal"
            label="&inspectStylePanelTitle.label;">
         <listbox id="inspector-style-listbox" flex="1"/>
@@ -293,6 +299,26 @@
         </hbox>
     </panel>
 
+    <panel id="inspector-style3-panel"
+           hidden="true"
+           orient="vertical"
+           ignorekeys="true"
+           noautofocus="true"
+           noautohide="true"
+           level="floating"
+           titlebar="normal"
+           label="&inspectStyle3PanelTitle.label;">
+      <browser id="inspector-style3-browser"
+               flex="1"
+               src="chrome://browser/content/style3.html"
+               onclick="InspectorUI.style3.htmlTree.onClick(event);"
+               disablehistory="true" />
+      <hbox align="end">
+        <spacer flex="1" />
+        <resizer dir="bottomend" />
+      </hbox>
+    </panel>
+
     <menupopup id="toolbar-context-menu"
                onpopupshowing="onViewToolbarsPopupShowing(event);">
       <menuseparator/>
diff -r cf91ed74041c browser/base/content/inspector.js
--- a/browser/base/content/inspector.js	Thu Aug 05 11:25:52 2010 +0100
+++ b/browser/base/content/inspector.js	Tue Aug 10 13:12:36 2010 +0100
@@ -526,6 +526,97 @@
   selectEventsSuppressed: false,
   inspecting: false,
 
+  style3: {
+    /**
+     * Should the style panel be showing?
+     * TODO: what is the difference between showPanel and panel.state?
+     */
+    showPanel: true,
+
+    /**
+     * The Stylesheet inspection logic. Setup by init()
+     * An instance of CssLogic (see csslogic.js)
+     */
+    cssLogic: null,
+
+    /**
+     * An instance of CssHtmlTree (see style3.js). Setup by init()
+     * But only if browser.xul contains inspector-style3-browser
+     */
+    htmlTree: null,
+
+    /**
+     * Reference to panel#inspector-style3-panel from browser.xul
+     */
+    panel: null,
+
+    /**
+     * TODO: This should probably be a real constructor, but we're all static
+     */
+    init: function IUI_style3_init()
+    {
+      this.panel = document.getElementById("inspector-style3-panel");
+      this.panel.hidden = false;
+
+      this.cssLogic = new CssLogic(InspectorUI.style);
+
+      // Setup the HTML tree
+      let styleWin = document.getElementById("inspector-style3-browser");
+      this.htmlTree = new CssHtmlTree(styleWin, this.cssLogic);
+
+      if (this.showPanel) {
+        this.openPanel();
+      }
+    },
+
+    /**
+     * Toggle the style3 panel.
+     * Invoked from the toolbar's Style3 button (browser-sets.inc)
+     */
+    togglePanel: function IUI_style3_togglePanel()
+    {
+      if (this.showPanel) {
+        this.panel.hidePopup();
+      } else {
+        this.openPanel();
+        if (InspectorUI.treeView.selectedNode) {
+          this.highlight(InspectorUI.treeView.selectedNode);
+        }
+      }
+      this._showPanel = !this._showPanel;
+    },
+
+    highlight: function IUI_style3_highlight(element)
+    {
+      jprofile('cssLogic.highlight');
+      this.cssLogic.highlight(element);
+      jprofile('htmlTree.highlight');
+      this.htmlTree.highlight(element);
+      jprofile();
+    },
+
+    /**
+     * Display this.panel on the screen
+     */
+    openPanel: function IUI_style3_openPanel()
+    {
+      if (!this.isOpen()) {
+        // open at top right of browser panel, offset by 20px from top.
+        this.panel.openPopup(InspectorUI.browser, "end_before", 0, -20, false, false);
+        // size panel to 200px wide by half browser height - 60.
+        this.panel.sizeTo(200, InspectorUI.win.outerHeight / 2 - 60);
+      }
+    },
+
+    /**
+     * Report on the state of this.panel
+     */
+    isOpen: function IUI_style3_isOpen()
+    {
+      return this.panel && this.panel.state === "open";
+    }
+  },
+
   /**
    * Toggle the inspector interface elements on or off.
    *
@@ -672,6 +763,7 @@
       this.clearStylePanel();
       this.openStylePanel();
     }
+    this.style3.init();
     if (this._showDOMPanel) {
       this.openDOMPanel();
     }
@@ -714,6 +806,9 @@
     if (this.isStylePanelOpen) {
       this.stylePanel.hidePopup();
     }
+    if (this.style3.isOpen()) {
+      this.style3.panel.hidePopup();
+    }
     this.inspectCmd.setAttribute("checked", false);
     this.browser = this.win = null; // null out references to browser and window
   },
@@ -727,6 +822,7 @@
     this.attachPageListeners();
     this.inspecting = true;
     this.toggleDimForPanel(this.stylePanel);
+    this.toggleDimForPanel(this.style3.panel);
   },
 
   /**
@@ -740,8 +836,10 @@
     this.detachPageListeners();
     this.inspecting = false;
     this.toggleDimForPanel(this.stylePanel);
+    this.toggleDimForPanel(this.style3.panel);
     if (this.treeView.selection) {
       this.updateStylePanel(this.treeView.selectedNode);
+      this.style3.highlight(this.treeView.selectedNode);
     }
   },
 
@@ -913,6 +1011,7 @@
     this.highlighter.highlightNode(node);
     this.stopInspecting();
     this.updateStylePanel(node);
+    this.style3.highlight(node);
     return true;
   },
 
@@ -955,6 +1054,7 @@
     this.treeView.selectedNode = aNode;
     this.selectEventsSuppressed = false;
     this.updateStylePanel(aNode);
+    this.style3.highlight(aNode);
   },
 
   /**
diff -r cf91ed74041c browser/base/content/style3.html
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/browser/base/content/style3.html	Tue Aug 10 13:12:36 2010 +0100
@@ -0,0 +1,200 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
+  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
+<head>
+  <style id="dynamic"></style>
+  <title>Style3</title>
+  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
+  <style>
+    body {
+      font-family: Lucida Grande, sans-serif;
+      font-size: 11px;
+      background: #EEE;
+    }
+
+    span.path {
+      font-size: 11px;
+      word-spacing: -1px;
+    }
+    span.path_element, span.path_element_link {
+      -moz-border-radius: 2px;
+      padding: 2px 3px;
+      text-shadow: #FFF 0px 1px 0px;
+      font-weight: bold;
+      font-size: 11px;
+    }
+    a.path_element {
+      background: -moz-linear-gradient(top, #BBE, #99C);
+    }
+    a.path_element:last-of-type {
+      background: -moz-linear-gradient(top, #FFC, #DD8);
+    }
+    span.path_crumb:last-of-type {
+      color: red;
+    }
+    div#header {
+      width: 95%;
+      padding: 5px;
+    }
+    td.sheet_line {
+      text-align: right;
+    }
+    td#path_list {
+      text-align: left;
+    }
+    div#header label {
+      font-weight: bold;
+    }
+    #sheets {
+      margin-right: 10px; margin-top: 5px;
+    }
+    h1 {
+      font-size: 13px;
+      padding: 2px 10px;
+      margin: 0px;
+      background: -moz-linear-gradient(top, #BBB, #999);
+      -moz-border-radius: 2px;
+      text-shadow: #FFF 0px 1px 0px;
+    }
+    h1 .toggle {
+      font-size: 11px;
+      float: right;
+      color: #333;
+    }
+
+    div.property-header {
+      padding: 2px 5px;
+      background: -moz-linear-gradient(top, #F8F8F8, #E8E8E8);
+      color: #666;
+    }
+    /* Take away these two :visited rules to get a core dumper */
+    .link { color: #55A;  }
+    .link:visited { color: #55A;  }
+    a.link { text-decoration: none; }
+    a.link:visited { text-decoration: none; }
+    span.property-rule-count {
+      float: right;
+    }
+    span.property-name {
+      font-size: 12px;
+      font-weight: bold;
+      padding-right: 4px;
+      color: #000;
+    }
+    span.property-value {
+      padding-right: 5px;
+      font-size: 10px;
+    }
+    div.group {
+      margin-top: 10px;
+    }
+    div.group, div#header {
+      background: #FFF;
+      border-color: #E1E1E1;
+      border-style: solid;
+      border-width: 1px;
+      -moz-box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
+      -moz-border-radius: 4px 4px 4px 4px;
+    }
+    
+    table.rules {
+      margin-left: 20px;
+    }
+    td.rule-text, td.rule-status {
+      white-space: nowrap;
+      overflow-x: hidden;
+    }
+  </style>
+</head>
+<body role="application">
+
+<!-- The output from #templateHeader (below) is inserted here. -->
+<div id="header">
+</div>
+
+<!-- The output from #templateGroups (below) is inserted here. -->
+<div id="groups">
+</div>
+
+<!--
+To visually debug the templates without running firefox, alter the display:none
+-->
+<div style="display:none;">
+  <!--
+  templateHeader needs data like this:
+  {
+    path_elements: [ 'div[0]', '#main', '#content', 'p[4]' ],
+    sheets: [ { source: 'foo.css' }, { source: 'bar.css' }, ... ],
+  }
+  -->
+  <div id="templateHeader">
+    <table>
+      <tr>
+        <td class="path_line">
+          <label>Looking&nbsp;at:</label>
+          <span class="path" foreach="element in ${path_elements}">
+            <a href="javascript:null;" class="path_element">${element}</a>
+            <span class="path_crumb">&#x27EB;</span>
+          </span>
+        </td>
+      </tr>
+      <tr>
+        <td class="sheet_line">
+          <label for="sheets">Display:</label>
+          <select save="${sheets}">
+            <option foreach="sheet in ${sheets}">${sheet.source}</option>
+            <option selected="selected">All sheets</option>
+            <option>Include UA sheets</option>
+          </select>
+          <label for="specificity">Show specificity:</label>
+          <input type="checkbox" save="${specificity}"/>
+          <a class="link" href="#">Huh?</a>
+        </td>
+      </tr>
+    </table>
+  </div>
+
+  <!--
+  templateGroups needs data like this:
+  {
+    groups: ..., // A reference to CssLogic.styleGroups
+    propertyValue: function(property) {},  // call getComputedStyle,
+    ruleCountTitle: function(property) {}, // e.g. return '4 Rules';
+    propertyClick: function(event) {},     // toggle view of rules
+  }
+  -->
+  <div id="templateGroups">
+    <div class="group" foreach="group in ${groups}">
+      <h1>${group} <span class="toggle">&#x25BC;</span></h1>
+      <div class="temp-loop" foreach="property in ${groups[group]}">
+        <div class="property-header open" property="${property}" onclick="${propertyClick}">
+          <span class="property-name">${property}</span>
+          <span class="property-value">${propertyValue(property)}</span>
+          <span class="property-rule-count link">${ruleCountTitle(property, __element)}</span>
+        </div>
+        <table class="rules" id="${'rules4' + property}">
+        </table>
+      </div>
+    </div>
+  </div>
+
+  <!--
+  templateRules needs data like this:
+  {
+    cssInfo: ..., // from cssLogic.getCssInfo(property)
+    statusText: function(status) {}, // convert rule.status to readable text
+  }
+  The table element is only there do the DOM doesn't muck with the tr
+  -->
+  <table id="templateRules">
+    <tr foreach="rule in ${cssInfo.rules}">
+      <td class="rule-text">${rule.selector} &#x2192; ${rule.value}</td>
+      <td><a href="${rule.href}" class="link">${rule.source}</a></td>
+      <td class="rule-status">${statusText(rule.status)}</td>
+    </tr>
+  </table>
+</div>
+
+</body>
+</html>
diff -r cf91ed74041c browser/base/content/style3.js
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/browser/base/content/style3.js	Tue Aug 10 13:12:36 2010 +0100
@@ -0,0 +1,428 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=2 et sw=2 tw=80: */
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is the Mozilla Inspector Module.
+ *
+ * The Initial Developer of the Original Code is
+ * The Mozilla Foundation.
+ * Portions created by the Initial Developer are Copyright (C) 2010
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Joe Walker (jwalker@mozilla.com) (original author)
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+/**
+ * CssHtmlTree is a panel that manages the display of a table sorted by style.
+ * There should be one instance of CssHtmlTree per style display (of which there will
+ * generally only be one).
+ * @params document The main XUL browser document
+ * @constructor
+ */
+let CssHtmlTree = function(styleWin, cssLogic)
+{
+  // 'window' in that it contains a document
+  this.styleWin = styleWin
+  this.cssLogic = cssLogic;
+
+  // The document in which we display the results
+  this.styleDocument = XPCNativeWrapper.unwrap(this.styleWin.contentWindow.document);
+
+  // The block at the top for the current element and options
+  this.header = this.styleDocument.getElementById('header');
+  this.templateHeader = this.styleDocument.getElementById('templateHeader');
+  // The main section of css properties without nested rules
+  this.groups = this.styleDocument.getElementById('groups');
+  this.templateGroups = this.styleDocument.getElementById('templateGroups');
+  // The rules section nests inside the main groups template
+  this.templateRules = this.styleDocument.getElementById('templateRules');
+
+  // The element that we're inspecting
+  this.viewedElement = null;
+  // And the document that it comes from
+  this.viewedDocument = null;
+};
+
+CssHtmlTree.prototype = {
+  /**
+   * TODO: Not sure if we need this: it is currently referenced from browser.xul
+   */
+  onClick: function()
+  {
+  },
+
+  /**
+   * Focus the output display on a specific element
+   * @param element The highlighted node to get styles for.
+   */
+  highlight: function CssHtmlTree_highlight(element)
+  {
+    if (element === this.viewedElement) {
+      return;
+    }
+
+    this.viewedElement = element;
+    this.viewedDocument = XPCNativeWrapper.unwrap(element.ownerDocument);
+
+    if (this.viewedElement !== null) {
+      this._populateMainTemplates();
+    }
+  },
+
+  /**
+   * Process the main template
+   */
+  _populateMainTemplates: function CssHtmlTree_populateMainTemplate()
+  {
+    let self = this;
+
+    let data = {
+      path_elements: CssLogic.getShortNamePath(this.viewedElement),
+      sheets: this.cssLogic.sheets,
+    }
+    this._template(this.templateHeader, this.header, data);
+    
+    data = {
+      groups: CssLogic.styleGroups,
+      propertyValue: function(property) {
+        return self.cssLogic.getCssInfo(property).value;
+      },
+      ruleCountTitle: function(property, element) {
+        setTimeout(function() {
+          let ruleCount = self.cssLogic.getCssInfo(property).ruleCount;
+          let data = '';
+          if (ruleCount === 1) {
+            data =  '1 rule &#x25BC;';
+          } else if (ruleCount > 1) {
+            data = '' + ruleCount + ' rules &#x25BC;';
+          }
+          element.innerHTML = data;
+        }, 10);
+        return '';
+      },
+      propertyClick: function(ev) {
+        return self._populateRulesTemplates(ev);
+      },
+    };
+    this._template(this.templateGroups, this.groups, data);
+  },
+
+  /**
+   * When a property is clicked in the main groups table
+   */
+  _populateRulesTemplates: function CssHtmlTree_populateRulesTemplates(ev)
+  {
+    let property = ev.currentTarget.getAttribute('property');
+    let destEle = this.styleDocument.getElementById('rules4' + property);
+
+    let data = {
+      cssInfo: this.cssLogic.getCssInfo(property),
+      statusText: function(status) {
+        return CssLogic.STATUS_NAMES[status];
+      },
+    };
+    destEle.innerHTML = '';
+    this._template(this.templateRules, destEle, data);
+  },
+
+  /**
+   * Clone the given template node, and process it by resolving ${} references
+   * in the template
+   */
+  _template: function CssHtmlTree_template(templateEle, destEle, data)
+  {
+    // All the templater does is to populate a given DOM tree with the given
+    // values, so we need to clone the template first
+    let duplicated = templateEle.cloneNode(true);
+    new Templater().processNode(duplicated, data);
+    destEle.appendChild(duplicated);
+  },
+};
+
+////////////////////////////////////////////////////////////////////////////////
+
+function Templater() {
+};
+
+/**
+ * Recursive function to walk the tree processing the attributes as it goes.
+ */
+Templater.prototype.processNode = function(node, data) {
+    var self = this;
+    var recurse = true;
+    // Process attributes
+    if (node.attributes && node.attributes.length) {
+        //
+        data.__element = node;
+        // It's good to clean up the attributes when we've processed them,
+        // but if we do it straight away, we mess up the array index
+        var attrs = Array.prototype.slice.call(node.attributes);
+        for (var i = 0; i < attrs.length; i++) {
+            var value = attrs[i].value;
+            var name = attrs[i].name;
+
+            if (name === 'save') {
+                // Save attributes are a setter using the node
+                value = self.stripBraces(value);
+                self.property(value, data, node);
+                node.removeAttribute('save');
+            } else if (name === 'if') {
+                value = self.stripBraces(value);
+                try {
+                    var reply = self.envEval(value, data, attrs[i].value);
+                    recurse = !!reply;
+                } catch (ex) {
+                    this.error('Error with \'', value, '\'', ex);
+                    recurse = false;
+                }
+                if (!recurse) {
+                    node.parentNode.removeChild(node);
+                }
+                node.removeAttribute('if');
+            } else if (name === 'foreach') {
+                var paramName = 'param';
+                if (value.charAt(0) === '$') {
+                    // No custom loop variable name. Use the default: 'param'
+                    value = self.stripBraces(value);
+                } else {
+                    // Extract the loop variable name from 'NAME in ${ARRAY}'
+                    var nameArr = value.split(' in ');
+                    paramName = nameArr[0].trim();
+                    value = self.stripBraces(nameArr[1].trim());
+                }
+                recurse = false;
+                try {
+                    var processMember = function(member) {
+                        var clone = node.cloneNode(true);
+                        clone.removeAttribute('foreach');
+                        node.parentNode.insertBefore(clone, node);
+                        data[paramName] = member;
+                        self.processNode(clone, data);
+                        delete data[paramName];
+                    };
+                    var reply = self.envEval(value, data, attrs[i].value);
+                    if (Array.isArray(reply)) {
+                        reply.forEach(processMember);
+                    } else {
+                        for (var param in reply) {
+                            if (reply.hasOwnProperty(param)) {
+                                processMember(param);
+                            }
+                        }
+                    }
+                    node.parentNode.removeChild(node);
+                } catch (ex) {
+                    this.error('Error with \'', value, '\'', ex);
+                    recurse = false;
+                }
+                node.removeAttribute('foreach');
+            } else if (name.substring(0, 2) === 'on') {
+                // Event registration relies on property doing a bind
+                value = self.stripBraces(value);
+                var func = self.property(value, data);
+                if (typeof func !== 'function') {
+                    this.error('Expected ' + value +
+                            ' to resolve to a function, but got ', typeof func);
+                }
+                node.removeAttribute(name);
+                var capture = node.hasAttribute('capture' + name.substring(2));
+                node.addEventListener(name.substring(2), func, capture);
+            } else {
+                // Replace references in other attributes
+                var newValue = value.replace(/\$\{[^}]*\}/g, function(path) {
+                    return self.envEval(path.slice(2, -1), data, value);
+                });
+                // Remove '_' prefix of attribute names so the DOM won't try
+                // to use them before we've processed the template
+                if (name.indexOf('_') === 0) {
+                    node.removeAttribute(name);
+                    node.setAttribute(name.substring(1), newValue);
+                } else if (value !== newValue) {
+                    attrs[i].value = newValue;
+                }
+            }
+        }
+    }
+
+    // Process child nodes
+    if (recurse) {
+        self.processChildren(node, data);
+    }
+
+    // Process TextNodes
+    if (node.nodeType === Node.TEXT_NODE) {
+        // Replace references in other attributes
+        value = node.data; // TODO: is this more correct than textContent?
+        // We can't use the string.replace() with function trick because we need
+        // to support functions that return DOM nodes, so we can't have the
+        // conversion to a string.
+        // Instead we process the string as an array of parts. In order to split
+        // the string up, we first replace ${ with \uF001$ and } with \uF002
+        // We can then split using \uF001 or \uF002 to get an array of strings
+        // where scripts are prefixed with $.
+        // \uF001 and \uF002 are just unicode chars reserved for private use.
+        value = value.replace(/\$\{([^}]*)\}/g, '\uF001$$$1\uF002');
+        var parts = value.split(/\uF001|\uF002/);
+        if (parts.length > 1) {
+            parts.forEach(function(part) {
+                if (part === null || part === undefined || part === '') {
+                    return;
+                }
+                if (part.charAt(0) === '$') {
+                    part = self.envEval(part.slice(1), data, node.data);
+                }
+                if (part === null) {
+                    part = "null";
+                }
+                if (part === undefined) {
+                    part = "undefined";
+                }
+                // Hmmm isDOMElement ...
+                if (typeof part.cloneNode !== 'function') {
+                    part = node.ownerDocument.createTextNode(part.toString());
+                }
+                node.parentNode.insertBefore(part, node);
+            });
+            node.parentNode.removeChild(node);
+        }
+    }
+};
+
+/**
+ * Loop through the child nodes of the given node, calling processNode on them
+ * all. Note this first clones the set of nodes, so the set of nodes that we
+ * visit will be unaffected by additions or removals.
+ * @param node The node from which to find children to visit.
+ * @param data The data to pass to processNode
+ */
+Templater.prototype.processChildren = function(node, data) {
+    var children = Array.prototype.slice.call(node.childNodes);
+    for (var i = 0; i < children.length; i++) {
+        this.processNode(children[i], data);
+    }
+};
+
+/**
+ * Warn of string does not begin '${' and end '}'
+ * @return The string stripped of ${ and }, or untouched if it does not match
+ */
+Templater.prototype.stripBraces = function(str) {
+    if (!str.match(/\$\{.*\}/g)) {
+        this.error('Expected ' + str + ' to match ${...}');
+        return str;
+    }
+    return str.slice(2, -1);
+};
+
+/**
+ * Combined getter and setter that works with a path through some data set.
+ * For example:<ul>
+ * <li>property('a.b', { a: { b: 99 }}); // returns 99
+ * <li>property('a', { a: { b: 99 }}); // returns { b: 99 }
+ * <li>property('a', { a: { b: 99 }}, 42); // returns 99 and alters the
+ * input data to be { a: { b: 42 }}
+ * </ul>
+ * @param path An array of strings indicating the path through the data, or
+ * a string to be cut into an array using <tt>split('.')</tt>
+ * @param data An object to look in for the <tt>path</tt>
+ * @param newValue (optional) If undefined, this value will replace the
+ * original value for the data at the path specified.
+ * @returns The value pointed to by <tt>path</tt> before any
+ * <tt>newValue</tt> is applied.
+ */
+Templater.prototype.property = function(path, data, newValue) {
+    if (typeof path === 'string') {
+        path = path.split('.');
+    }
+    var value = data[path[0]];
+    if (path.length === 1) {
+        if (newValue !== undefined) {
+            data[path[0]] = newValue;
+        }
+        if (typeof value === 'function') {
+            return function() { return value.apply(data, arguments); }
+        }
+        return value;
+    }
+    if (!value) {
+        this.error('Can\'t find path=', path, " in data=", data);
+        return null;
+    }
+    return this.property(path.slice(1), value, newValue);
+};
+
+/**
+ * Like eval, but that creates a context of the variables in <tt>env</tt> in
+ * which the script is evaluated.
+ * WARNING: This script uses 'with' which is generally regarded to be evil.
+ * The alternative is to create a Function at runtime that takes X parameters
+ * according to the X keys in the env object, and then call that function using
+ * the values in the env object. This is likely to be slow, but workable.
+ * @param script The string to be evaluated
+ * @param env The environment in which to eval the script.
+ * @param context Optional debugging string in case of failure
+ * @returns The return value of the script
+ */
+Templater.prototype.envEval = function(script, env, context) {
+    with (env) {
+        try {
+            return eval(script);
+        } catch (ex) {
+            var message = 'Error evaluating \'' + script + '\'';
+            if (context && script !== context) {
+                message += ' within \'' + context + '\'';
+            }
+            this.error(message + ': ' + ex);
+            return message;
+        }
+    }
+};
+
+/**
+ * A generic way of reporting errors, for easy overloading in different
+ * environments.
+ */
+Templater.prototype.error = function() {
+    jlog.apply(null, arguments);
+};
+
+////////////////////////////////////////////////////////////////////////////////
+
+// TODO: remove jlog/jprofile before live
+
+if (typeof jprofile !== 'function') {
+  let jprofile = function(message) {
+    Services.console.logStringMessage('No jprofile. See jdebug.js: ' + message);
+  };
+}
+
+if (typeof jlog !== 'function') {
+  let jlog = function(message) {
+    Services.console.logStringMessage('No jlog. See jdebug.js: ' + message);
+  };
+}
diff -r cf91ed74041c browser/base/jar.mn
--- a/browser/base/jar.mn	Thu Aug 05 11:25:52 2010 +0100
+++ b/browser/base/jar.mn	Tue Aug 10 13:12:36 2010 +0100
@@ -27,6 +27,7 @@
 *       content/browser/browser-tabPreviews.xml       (content/browser-tabPreviews.xml)
 *       content/browser/credits.xhtml                 (content/credits.xhtml)
 *       content/browser/fullscreen-video.xhtml        (content/fullscreen-video.xhtml)
+*       content/browser/style3.html                   (content/style3.html)
 *       content/browser/pageinfo/pageInfo.xul         (content/pageinfo/pageInfo.xul)
 *       content/browser/pageinfo/pageInfo.js          (content/pageinfo/pageInfo.js)
 *       content/browser/pageinfo/pageInfo.css         (content/pageinfo/pageInfo.css)
diff -r cf91ed74041c browser/locales/en-US/chrome/browser/browser.dtd
--- a/browser/locales/en-US/chrome/browser/browser.dtd	Thu Aug 05 11:25:52 2010 +0100
+++ b/browser/locales/en-US/chrome/browser/browser.dtd	Tue Aug 10 13:12:36 2010 +0100
@@ -186,6 +186,9 @@
 <!ENTITY inspectStyleButton.label     "Style">
 <!ENTITY inspectStyleButton.accesskey "S">
 <!ENTITY inspectStylePanelTitle.label  "Style">
+<!ENTITY inspectStyle3Button.label     "Style3">
+<!ENTITY inspectStyle3Button.accesskey "S">
+<!ENTITY inspectStyle3PanelTitle.label  "Style3">
 
 <!ENTITY fileMenu.label         "File"> 
 <!ENTITY fileMenu.accesskey       "F">
