diff --git a/browser/base/content/browser.xul b/browser/base/content/browser.xul
--- a/browser/base/content/browser.xul
+++ b/browser/base/content/browser.xul
@@ -242,36 +242,39 @@
            noautohide="true"
            titlebar="normal"
            close="true"
            onpopuphiding="InspectorUI.closeInspectorUI(true);"
            label="&inspectPanelTitle.label;">
       <toolbar id="inspector-toolbar"
                nowindowdrag="true">
         <toolbarbutton id="inspector-inspect-toolbutton"
+                       type="checkbox"
                        label="&inspectButton.label;"
                        accesskey="&inspectButton.accesskey;"
                        class="toolbarbutton-text"
                        command="Inspector:Inspect"/>
         <toolbarbutton id="inspector-previous-toolbutton"
                        label="&inspectPreviousButton.label;"
                        accesskey="&inspectPreviousButton.accesskey;"
                        class="toolbarbutton-text"
                        command="Inspector:Previous"/>
         <toolbarbutton id="inspector-next-toolbutton"
                        label="&inspectNextButton.label;"
                        accesskey="&inspectNextButton.accesskey;"
                        class="toolbarbutton-text"
                        command="Inspector:Next"/>
         <toolbarbutton id="inspector-style-toolbutton"
+                       type="checkbox"
                        label="&inspectStyleButton.label;"
                        accesskey="&inspectStyleButton.accesskey;"
                        class="toolbarbutton-text"
                        oncommand="InspectorUI.toggleStylePanel();"/>
         <toolbarbutton id="inspector-dom-toolbutton"
+                       type="checkbox"
                        label="&inspectObjectButton.label;"
                        accesskey="&inspectObjectButton.accesskey;"
                        class="toolbarbutton-text"
                        oncommand="InspectorUI.toggleDOMPanel();"/>
       </toolbar>
       <hbox id="tree-panel-resizer-box" align="end">
         <spacer flex="1" />
         <resizer dir="bottomend" />
diff --git a/browser/base/content/inspector.js b/browser/base/content/inspector.js
--- a/browser/base/content/inspector.js
+++ b/browser/base/content/inspector.js
@@ -368,31 +368,33 @@ var InspectorUI = {
 
   /**
    * Toggle the style panel. Invoked from the toolbar's Style button.
    */
   toggleStylePanel: function IUI_toggleStylePanel()
   {
     if (this.isStylePanelOpen) {
       this.stylePanel.hidePopup();
+      this.styleButton.checked = false;
     } else {
       this.openStylePanel();
       if (this.selection) {
         this.updateStylePanel(this.selection);
       }
     }
   },
 
   /**
    * Toggle the DOM panel. Invoked from the toolbar's DOM button.
    */
   toggleDOMPanel: function IUI_toggleDOMPanel()
   {
     if (this.isDOMPanelOpen) {
       this.domPanel.hidePopup();
+      this.domButton.checked = false;
     } else {
       this.clearDOMPanel();
       this.openDOMPanel();
       if (this.selection) {
         this.updateDOMPanel(this.selection);
       }
     }
   },
@@ -607,31 +609,33 @@ var InspectorUI = {
     if (!this.stylePanel)
       this.stylePanel = document.getElementById("inspector-style-panel");
     if (!this.isStylePanelOpen) {
       this.stylePanel.hidden = false;
       // open at top right of browser panel, offset by 20px from top.
       this.stylePanel.openPopup(this.browser, "end_before", 0, 20, false, false);
       // size panel to 200px wide by half browser height - 60.
       this.stylePanel.sizeTo(200, this.win.outerHeight / 2 - 60);
+      this.styleButton.checked = true;
     }
   },
 
   /**
    * Open the DOM panel if not already onscreen.
    */
   openDOMPanel: function IUI_openDOMPanel()
   {
     if (!this.isDOMPanelOpen) {
       this.domPanel.hidden = false;
       // open at middle right of browser panel, offset by 20px from middle.
       this.domPanel.openPopup(this.browser, "end_before", 0,
         this.win.outerHeight / 2 - 20, false, false);
       // size panel to 200px wide by half browser height - 60.
       this.domPanel.sizeTo(200, this.win.outerHeight / 2 - 60);
+      this.domButton.checked = true;
     }
   },
 
   /**
    * Toggle the dimmed (semi-transparent) state for a panel by setting or
    * removing a dimmed attribute.
    *
    * @param aDim
@@ -790,22 +794,24 @@ var InspectorUI = {
       this.domplateUtils.setDOM(null);
       delete this.domplate;
       delete this.HTMLTemplates;
       delete this.domplateUtils;
     }
 
     if (this.isStylePanelOpen) {
       this.stylePanel.hidePopup();
+      this.styleButton.checked = false;
     }
     if (this.domPanel) {
       this.domPanel.hidePopup();
       this.domBox = null;
       this.domTreeView = null;
       this.propertyPanel.destroy();
+      this.domButton.checked = false;
     }
     this.inspectCmd.setAttribute("checked", false);
     this.browser = this.win = null; // null out references to browser and window
     this.winID = null;
     this.selection = null;
     this.treeLoaded = false;
     this.closing = false;
     Services.obs.notifyObservers(null, "inspector-closed", null);
@@ -816,16 +822,17 @@ var InspectorUI = {
    * highlighter event listeners.
    */
   startInspecting: function IUI_startInspecting()
   {
     this.attachPageListeners();
     this.inspecting = true;
     this.toggleDimForPanel(this.stylePanel);
     this.toggleDimForPanel(this.domPanel);
+    this.inspectButton.checked = true;
   },
 
   /**
    * Stop inspecting webpage, detach page listeners, disable highlighter
    * event listeners.
    */
   stopInspecting: function IUI_stopInspecting()
   {
@@ -833,16 +840,17 @@ var InspectorUI = {
       return;
     this.detachPageListeners();
     this.inspecting = false;
     this.toggleDimForPanel(this.stylePanel);
     this.toggleDimForPanel(this.domPanel);
     if (this.highlighter.node) {
       this.select(this.highlighter.node, true, true);
     }
+    this.inspectButton.checked = false;
   },
 
   /**
    * Select an object in the tree view.
    * @param aNode
    *        node to inspect
    * @param forceUpdate
    *        force an update?
@@ -1414,16 +1422,28 @@ var InspectorStore = {
 
 /////////////////////////////////////////////////////////////////////////
 //// Initializors
 
 XPCOMUtils.defineLazyGetter(InspectorUI, "inspectCmd", function () {
   return document.getElementById("Tools:Inspect");
 });
 
+XPCOMUtils.defineLazyGetter(InspectorUI, "inspectButton", function () {
+  return document.getElementById("inspector-inspect-toolbutton");
+});
+
+XPCOMUtils.defineLazyGetter(InspectorUI, "styleButton", function () {
+  return document.getElementById("inspector-style-toolbutton");
+});
+
+XPCOMUtils.defineLazyGetter(InspectorUI, "domButton", function () {
+  return document.getElementById("inspector-dom-toolbutton");
+});
+
 XPCOMUtils.defineLazyGetter(InspectorUI, "strings", function () {
   return Services.strings.createBundle("chrome://browser/locale/inspector.properties");
 });
 
 XPCOMUtils.defineLazyGetter(InspectorUI, "PropertyTreeView", function () {
   var obj = {};
   Cu.import("resource://gre/modules/PropertyPanel.jsm", obj);
   return obj.PropertyTreeView;
diff --git a/browser/base/content/test/browser_inspector_initialization.js b/browser/base/content/test/browser_inspector_initialization.js
--- a/browser/base/content/test/browser_inspector_initialization.js
+++ b/browser/base/content/test/browser_inspector_initialization.js
@@ -17,16 +17,17 @@
  *
  * The Initial Developer of the Original Code is
  * The Mozilla Foundation.
  * Portions created by the Initial Developer are Copyright (C) 2010
  * the Initial Developer. All Rights Reserved.
  *
  * Contributor(s):
  *   Rob Campbell <rcampbell@mozilla.com>
+ *   Mihai È˜ucan <mihai.sucan@gmail.com>
  *
  * Alternatively, the contents of this file may be used under the terms of
  * either the GNU General Public License Version 2 or later (the "GPL"), or
  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
  * in which case the provisions of the GPL or the LGPL are applicable instead
  * of those above. If you wish to allow use of your version of this file only
  * under the terms of either the GPL or the LGPL, and not to allow others to
  * use your version of this file under the terms of the MPL, indicate your
@@ -51,26 +52,73 @@ function runInspectorTests()
   Services.obs.removeObserver(runInspectorTests, "inspector-opened", false);
   Services.obs.addObserver(finishInspectorTests, "inspector-closed", false);
   let iframe = document.getElementById("inspector-tree-iframe");
   is(InspectorUI.treeIFrame, iframe, "Inspector IFrame matches");
   ok(InspectorUI.inspecting, "Inspector is highlighting");
   ok(InspectorUI.isTreePanelOpen, "Inspector Tree Panel is open");
   ok(InspectorUI.isStylePanelOpen, "Inspector Style Panel is open");
   ok(InspectorUI.isDOMPanelOpen, "Inspector DOM Panel is open");
+
+  is(InspectorUI.inspectButton.checked, true,
+    "The Inspect Toolbar Button is checked");
+
+  is(InspectorUI.styleButton.checked, true,
+    "Inspector Style Toolbar Button is checked");
+
+  is(InspectorUI.domButton.checked, true,
+    "Inspector DOM Toolbar Button is checked");
+
+  // Toggle each panel individually and see if the states are properly updated.
+
+  InspectorUI.toggleStylePanel();
+  is(InspectorUI.styleButton.checked, false,
+    "Inspector Style Toolbar Button is not checked");
+  ok(!InspectorUI.isStylePanelOpen, "Inspector Style Panel is not open");
+
+  InspectorUI.toggleStylePanel();
+  is(InspectorUI.styleButton.checked, true,
+    "Inspector Style Toolbar Button is checked");
+  ok(InspectorUI.isStylePanelOpen, "Inspector Style Panel is open");
+
+  InspectorUI.toggleDOMPanel();
+  is(InspectorUI.domButton.checked, false,
+    "Inspector DOM Toolbar Button is not checked");
+  ok(!InspectorUI.isDOMPanelOpen, "Inspector DOM Panel is not open");
+
+  InspectorUI.toggleDOMPanel();
+  is(InspectorUI.domButton.checked, true,
+    "Inspector DOM Toolbar Button is checked");
+  ok(InspectorUI.isDOMPanelOpen, "Inspector DOM Panel is open");
+
+  InspectorUI.toggleInspection();
+  ok(!InspectorUI.inspecting, "Inspector is not highlighting");
+  InspectorUI.toggleInspection();
+  ok(InspectorUI.inspecting, "Inspector is highlighting");
+
   InspectorUI.closeInspectorUI(true);
 }
 
 function finishInspectorTests()
 {
   Services.obs.removeObserver(finishInspectorTests, "inspector-closed", false);
   ok(!InspectorUI.isDOMPanelOpen, "Inspector DOM Panel is closed");
   ok(!InspectorUI.isStylePanelOpen, "Inspector Style Panel is closed");
   ok(!InspectorUI.isTreePanelOpen, "Inspector Tree Panel is closed");
   ok(!InspectorUI.inspecting, "Inspector is not highlighting");
+
+  is(InspectorUI.inspectButton.checked, false,
+    "The Inspect Toolbar Button is not checked");
+
+  is(InspectorUI.styleButton.checked, false,
+    "Inspector Style Toolbar Button is not checked");
+
+  is(InspectorUI.domButton.checked, false,
+    "Inspector DOM Toolbar Button is not checked");
+
   gBrowser.removeCurrentTab();
   finish();
 }
 
 function test()
 {
   waitForExplicitFinish();
   gBrowser.selectedTab = gBrowser.addTab();
