diff --git a/browser/base/Makefile.in b/browser/base/Makefile.in
--- a/browser/base/Makefile.in
+++ b/browser/base/Makefile.in
@@ -52,17 +52,16 @@ CHROME_DEPS += $(abs_srcdir)/content/ove
 ifdef ENABLE_TESTS
 DIRS += content/test
 endif
 
 EXTRA_JS_MODULES = \
 	content/openLocationLastURL.jsm \
 	content/NetworkPrioritizer.jsm \
 	content/domplate.jsm \
-	content/stylePanel.jsm \
 	$(NULL)
 
 include $(topsrcdir)/config/rules.mk
 
 PRE_RELEASE_SUFFIX := $(shell $(PYTHON) $(topsrcdir)/config/printprereleasesuffix.py \
                         $(shell cat $(srcdir)/../config/version.txt))
 
 DEFINES += \
diff --git a/browser/base/content/csslogic.js b/browser/base/content/csslogic.js
--- a/browser/base/content/csslogic.js
+++ b/browser/base/content/csslogic.js
@@ -44,27 +44,20 @@
  * many questions about why the users styles did not work, specifically because
  * it only looks at the things that did. This approach takes into account all
  * the available styles, and shows why each rule is not applicable.
  *
  * <p>This approach can be considerably more costly while a page's stylesheets
  * are examined, so this class tries to be smart about the information that it
  * caches.
  *
- * <p>These functions could probably be merged into stylePanel.jsm.
- *
  * @constructor
- * @param {object} aStylePanel a reference to the stylePanel object instance
- * from the stylePanel.jsm file.
  */
-function CssLogic(aStylePanel)
+function CssLogic()
 {
-  // Instance of stylePanel.jsm.
-  this.stylePanel = aStylePanel;
-
   // Both setup by highlight().
   this.viewedElement = null;
   this.viewedDocument = null;
 
   // The cache of the known sheets.
   this.sheets = [];
   // Part of the specificity of a rule is its order in the sheet.
   this._ruleCount = 0;
@@ -76,16 +69,19 @@ function CssLogic(aStylePanel)
 
   // Source filter. Only display properties coming from the given source (web
   // address). Special values:
   // - "all": will show properties from all style sheets.
   // - "ua": will show properties from all style sheets, including the browser
   // styles (user agent ones).
   this._sourceFilter = "all";
 
+  this.domUtils = Cc["@mozilla.org/inspector/dom-utils;1"].
+    getService(Ci["inIDOMUtils"]);
+
   // See CssLogic.l10n
   XPCOMUtils.defineLazyGetter(CssLogic, "_strings", function() {
     return Services.strings.createBundle(
         "chrome://browser/locale/inspector.properties");
   });
 };
 
 /**
@@ -323,16 +319,48 @@ CssLogic.getShortNamePath = function Css
  * @returns A localized version of the given key.
  */
 CssLogic.l10n = function CssLogic_l10n(aName)
 {
   return CssLogic._strings.GetStringFromName(aName);
 };
 
 /**
+ * Is the given property sheet a system (user agent) stylesheet?
+ *
+ * @param {CSSStyleSheet} aSheet a stylesheet
+ * @return {boolean} true if the given stylesheet is a system stylesheet or 
+ * false otherwise.
+ */
+CssLogic.isSystemStyleSheet = function CssLogic_isSystemStyleSheet(aSheet)
+{
+  if (!aSheet)
+    return true;
+
+  let url = aSheet.href;
+
+  if (!url)
+    return false;
+  if (url.length == 0)
+    return true;
+  if (url[0] == 'h') 
+    return false;
+  if (url.substr(0, 9) == "resource:")
+    return true;
+  if (url.substr(0, 7) == "chrome:")
+    return true;
+  if (url  == "XPCSafeJSObjectWrapper.cpp")
+    return true;
+  if (url.substr(0, 6) == "about:")
+    return true;
+
+  return false;
+};
+
+/**
  * Split a rule.selectorText into an array of simpler selectors, taking into
  * consideration any nested selectors inside parentheses.
  *
  * @param {string} selector The rule.selectorText you want split.
  * @return {array} the array of simpler selectors found in rule.selectorText.
  */
 CssLogic.selectorTextSplit = function CssLogic_selectorTextSplit(selector) {
   if (!selector) {
@@ -653,28 +681,27 @@ CssInfo.prototype = {
   /**
    * Find the user-agent rules (Gecko-provided rules).
    */
   _findUARules: function CssInfo_findUARules()
   {
     let cssLogic = this._cssLogic;
     let doc = this._cssLogic.viewedDocument;
     let element = this._cssLogic.viewedElement;
-    let stylePanel = this._cssLogic.stylePanel;
     let sheets = [];
     let sheetsMap = {};
 
     // Find the system sheets for the highlighted element.
-    let matchedRules = stylePanel.domUtils.getCSSStyleRules(element);
+    let matchedRules = cssLogic.domUtils.getCSSStyleRules(element);
     for (let i = 0, n = matchedRules.Count(); i < n; i++) {
       let domRule = matchedRules.GetElementAt(i);
       let domSheet = domRule.parentStyleSheet;
       let href = domSheet.href;
       if (!(href in sheetsMap) && domRule.style &&
-        stylePanel.isSystemStyleSheet(domSheet)) {
+        CssLogic.isSystemStyleSheet(domSheet)) {
         sheets.push(new CssSheet(domSheet, true));
         sheetsMap[href] = true;
       }
     }
 
     // Find all the rules in each system sheet.
     for (let i = 0, n = sheets.length; i < n; i++) {
       let sheet = sheets[i];
@@ -835,19 +862,19 @@ function CssRule(aCssLogic, aDomRule, aP
   }
 
   this.systemSheet = aSystemSheet;
   this.specificity = new CssSpecificity(this.selector, ruleCount, pri,
     this.systemSheet);
 
   // domUtils.getRuleLine fails for @import rules. See bug 591303.
   this.line = -1;
-  if (aCssLogic.stylePanel && this.selector != "@element.style") {
+  if (this.selector != "@element.style") {
     try {
-      this.line = aCssLogic.stylePanel.domUtils.getRuleLine(aDomRule);
+      this.line = aCssLogic.domUtils.getRuleLine(aDomRule);
     } catch (ex) {
       Services.console.logStringMessage("domUtils.getRuleLine failed for " +
         aDomRule.cssText);
     }
   }
 
   if (this.selector == "@element.style") {
     this.source = CssLogic.l10n("style.rule.sourceElement");
diff --git a/browser/base/content/inspector.js b/browser/base/content/inspector.js
--- a/browser/base/content/inspector.js
+++ b/browser/base/content/inspector.js
@@ -661,17 +661,17 @@ var InspectorUI = {
     this.domBox = this.propertyPanel.tree;
     this.domTreeView = this.propertyPanel.treeView;
 
     // open inspector UI
     this.openTreePanel();
 
     // style panel setup and activation
     let styleWin = document.getElementById("inspector-style-browser");
-    this.cssLogic = new CssLogic(this.style);
+    this.cssLogic = new CssLogic();
     this.cssHtmlTree = new CssHtmlTree(styleWin, this.cssLogic);
     this.openStylePanel();
 
     // DOM panel setup and activation
     this.clearDOMPanel();
     this.openDOMPanel();
 
     // setup highlighter and start inspecting
@@ -1330,15 +1330,8 @@ XPCOMUtils.defineLazyGetter(InspectorUI,
 });
 
 XPCOMUtils.defineLazyGetter(InspectorUI, "PropertyPanel", function () {
   var obj = {};
   Cu.import("resource://gre/modules/PropertyPanel.jsm", obj);
   return obj.PropertyPanel;
 });
 
-XPCOMUtils.defineLazyGetter(InspectorUI, "style", function () {
-  var obj = {};
-  Cu.import("resource:///modules/stylePanel.jsm", obj);
-  obj.style.initialize();
-  return obj.style;
-});
-
diff --git a/browser/base/content/stylePanel.jsm b/browser/base/content/stylePanel.jsm
deleted file mode 100644
--- a/browser/base/content/stylePanel.jsm
+++ /dev/null
@@ -1,315 +0,0 @@
-/*
- * Software License Agreement (BSD License)
- *
- * Copyright (c) 2007, Parakey Inc.
- * All rights reserved.
- * 
- * Redistribution and use of this software in source and binary forms, with or without modification,
- * are permitted provided that the following conditions are met:
- * 
- * * Redistributions of source code must retain the above
- *   copyright notice, this list of conditions and the
- *   following disclaimer.
- * 
- * * Redistributions in binary form must reproduce the above
- *   copyright notice, this list of conditions and the
- *   following disclaimer in the documentation and/or other
- *   materials provided with the distribution.
- * 
- * * Neither the name of Parakey Inc. nor the names of its
- *   contributors may be used to endorse or promote products
- *   derived from this software without specific prior
- *   written permission of Parakey Inc.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
- * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-/*
- * Creator:
- *  Joe Hewitt
- * Contributors
- *  John J. Barton (IBM Almaden)
- *  Jan Odvarko (Mozilla Corp.)
- *  Max Stepanov (Aptana Inc.)
- *  Rob Campbell (Mozilla Corp.)
- *  Hans Hillen (Paciello Group, Mozilla)
- *  Curtis Bartley (Mozilla Corp.)
- *  Mike Collins (IBM Almaden)
- *  Kevin Decker
- *  Mike Ratcliffe (Comartis AG)
- *  Hernan RodrÃ­guez Colmeiro
- *  Austin Andrews
- *  Christoph Dorn
- *  Steven Roussey (AppCenter Inc, Network54)
- */
-
-var EXPORTED_SYMBOLS = ["style"];
-
-const Cc = Components.classes;
-const Ci = Components.interfaces;
-const Cu = Components.utils;
-
-Cu.import("resource://gre/modules/Services.jsm");
-
-var style = {
-
-  /**
-   * initialize domUtils
-   */
-  initialize: function CSS_initialize()
-  {
-    this.domUtils = Cc["@mozilla.org/inspector/dom-utils;1"].
-      getService(Ci["inIDOMUtils"]);
-  },
-
-  /**
-   * Is the given property sheet a system (user agent) stylesheet?
-   *
-   * @param aSheet
-   *        a stylesheet
-   */
-  isSystemStyleSheet: function CSS_isSystemStyleSheet(aSheet)
-  {
-    if (!aSheet)
-      return true;
-
-    let url = aSheet.href;
-
-    if (!url)
-      return false;
-    if (url.length == 0)
-      return true;
-    if (url[0] == 'h') 
-      return false;
-    if (url.substr(0, 9) == "resource:")
-      return true;
-    if (url.substr(0, 7) == "chrome:")
-      return true;
-    if (url  == "XPCSafeJSObjectWrapper.cpp")
-      return true;
-    if (url.substr(0, 6) == "about:")
-      return true;
-
-    return false;
-  },
-
-  /**
-   * Parse properties from a given style object.
-   * Borrowed from Firebug's css.js.
-   *
-   * @param aStyle
-   *        a style object
-   */
-  parseCSSProperties: function CSS_parseCSSProps(aStyle)
-  {
-    let properties = [];
-    let lines = aStyle.cssText.match(/(?:[^;\(]*(?:\([^\)]*?\))?[^;\(]*)*;?/g);
-    let propRE = /\s*([^:\s]*)\s*:\s*(.*?)\s*(! important)?;?$/;
-    let line, i = 0;
-    while(line = lines[i++]) {
-      let match = propRE.exec(line);
-      if (!match)
-        continue;
-      let name = match[1];
-      let value = match[2];
-      let important = !!match[3]; // true if match[3] is non-empty
-      properties.unshift({name: name, value: value, important: important});
-    }
-
-    return properties;
-  },
-
-  /**
-   * Mark properties overridden further up the hierarchy.
-   *
-   * @param aProps
-   *        Array of properties.
-   * @param aUsedProps
-   *        Object of arrays keyed by property name.
-   * @param aInherit
-   *        Boolean of whether or not we are in inherited mode.
-   */
-  markOverriddenProperties: function CSS_markOverriddenProperties(aProps, aUsedProps, aInherit)
-  {
-    for (let i = 0; i < aProps.length; ++i) {
-      let prop = aProps[i];
-      if (aUsedProps.hasOwnProperty(prop.name)) {
-        // all previous occurrences of this property
-        let deadProps = aUsedProps[prop.name];
-        for (let j = 0; j < deadProps.length; ++j) {
-          let deadProp = deadProps[j];
-          if (!deadProp.disabled && !deadProp.wasInherited &&
-              deadProp.important && !prop.important) {
-            prop.overridden = true;  // new occurrence overridden
-          } else if (!prop.disabled) {
-            deadProp.overridden = true;  // previous occurrences overridden
-          } else {
-            aUsedProps[prop.name] = [];
-          }
-
-          prop.wasInherited = aInherit ? true : false;
-          // all occurrences of a property seen so far, by name
-          aUsedProps[prop.name].push(prop);
-        }
-      }
-    }
-  },
-
-  /**
-   * Sort given properties in lexical order by name.
-   *
-   * @param properties
-   *        An array of properties.
-   * @returns sorted array.
-   */
-  sortProperties: function CSS_sortProperties(properties)
-  {
-    properties.sort(function(a, b)
-    {
-      if (a.name < b.name) {
-        return -1;
-      }
-      if (a.name > b.name) {
-        return 1;
-      }
-      return 0;
-    });
-  },
-
-  /**
-   * Get properties for a given element and push them to the rules array.
-   *
-   * @param aNode
-   *        a DOM node
-   * @param rules
-   *        An array of rules to add properties to.
-   * @param usedProps
-   *        Object of arrays keyed by property name.
-   * @param inherit
-   *        boolean determining whether or not we're in inherit mode
-   */
-  getStyleProperties: function CSS_getStyleProperties(aNode, aRules, aUsedProps, aInherit)
-  {
-    let properties = this.parseCSSProperties(aNode.style, aInherit);
-
-    this.sortProperties(properties);
-    this.markOverriddenProperties(properties, aUsedProps, aInherit);
-
-    if (properties.length) {
-      aRules.push({rule: aNode, selector: "element.style",
-        properties: properties, inherited: aInherit});
-    }
-  },
-
-  /**
-   * Get properties for a given rule.
-   *
-   * @param aRule
-   *        A Rule from a stylesheet.
-   */
-  getRuleProperties: function CSS_getRuleProperties(aRule)
-  {
-    let style = aRule.style;
-    return this.parseCSSProperties(style);
-  },
-
-  /**
-   * Recursively get rules for an element's parents and add them to the
-   * sections array.
-   *
-   * @param aNode
-   *        an element in a DOM tree.
-   * @param sections
-   *        an array of sections
-   * @param usedProps
-   *        Object of arrays keyed by property name.
-   */
-  getInheritedRules: function CSS_getInheritedRules(aNode, aSections, aUsedProps)
-  {
-    let parent = aNode.parentNode;
-    if (parent && parent.nodeType == 1) {
-      this.getInheritedRules(parent, aSections, aUsedProps);
-
-      let rules = [];
-      this.getElementRules(parent, rules, aUsedProps, true);
-
-      if (rules.length) {
-        aSections.unshift({element: parent, rules: rules});
-      }
-    }
-  },
-
-  /**
-   * Get the CSS style rules for a given node in the DOM and append them to the
-   * rules array.
-   *
-   * @param aNode
-   *        an element in the DOM tree.
-   * @param aRules
-   *        an array of rules.
-   * @param aUsedProps
-   *        Object of arrays keyed by property name.
-   * @param aInherit
-   *        boolean indicating whether we are in an inherited mode or not
-   */
-  getElementRules: function CSS_getElementRules(aNode, aRules, aUsedProps, aInherit)
-  {
-    let inspectedRules;
-
-    try {
-      inspectedRules = this.domUtils.getCSSStyleRules(aNode);
-    } catch (ex) {
-      Services.console.logStringMessage(ex);
-    }
-
-    if (!inspectedRules)
-      return;
-
-    for (let i = 0; i < inspectedRules.Count(); ++i) {
-      let rule = inspectedRules.GetElementAt(i);
-      let href = rule.parentStyleSheet.href;
-
-      if (!href) {
-        // Null href means inline style.
-        href = aNode.ownerDocument.location.href;
-      }
-
-      let isSystemSheet = this.isSystemStyleSheet(rule.parentStyleSheet);
-
-      if (isSystemSheet)
-        continue;
-
-      let properties = this.getRuleProperties(rule, aInherit);
-      if (aInherit && !properties.length)
-        continue;
-
-      let line = this.domUtils.getRuleLine(rule);
-      let ruleId = rule.selectorText + " " + href + " (" + line + ")";
-
-      let sourceLink = "view-source:" + href + "#" + line;
-
-      this.markOverriddenProperties(properties, aUsedProps, aInherit);
-
-      aRules.unshift(
-        {rule: rule,
-         id: ruleId,
-         selector: rule.selectorText,
-         properties: properties,
-         inherited: aInherit,
-         sourceLink: sourceLink,
-         isSystemSheet: isSystemSheet});
-    }
-
-    if (aNode.style) {
-      this.getStyleProperties(aNode, aRules, aUsedProps, aInherit);
-    }
-  },
-};
-
