diff -r 58101a16aff7 toolkit/components/console/hudservice/HUDService.jsm
--- a/toolkit/components/console/hudservice/HUDService.jsm	Fri Jul 23 12:49:57 2010 +0300
+++ b/toolkit/components/console/hudservice/HUDService.jsm	Sat Jul 24 14:35:38 2010 +0300
@@ -1,10 +1,10 @@
 /* -*- Mode: js2; js2-basic-offset: 2; indent-tabs-mode: nil; -*- */
-/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* vim:set ft=javascript ts=2 sw=2 sts=2 et tw=80: */
 /* ***** BEGIN LICENSE BLOCK *****
  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
  *
  * The contents of this file are subject to the Mozilla Public License Version
  * 1.1 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * http://www.mozilla.org/MPL/
  *
@@ -19,16 +19,17 @@
  *   Mozilla Foundation
  * Portions created by the Initial Developer are Copyright (C) 2010
  * the Initial Developer. All Rights Reserved.
  *
  * Contributor(s):
  *   David Dahl <ddahl@mozilla.com> (original author)
  *   Rob Campbell <rcampbell@mozilla.com>
  *   Johnathan Nightingale <jnightingale@mozilla.com>
+ *   Mihai Șucan <mihai.sucan@gmail.com>
  *
  * Alternatively, the contents of this file may be used under the terms of
  * either the GNU General Public License Version 2 or later (the "GPL"), or
  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
  * in which case the provisions of the GPL or the LGPL are applicable instead
  * of those above. If you wish to allow use of your version of this file only
  * under the terms of either the GPL or the LGPL, and not to allow others to
  * use your version of this file under the terms of the MPL, indicate your
@@ -1602,16 +1603,18 @@ function HeadsUpDisplay(aConfig)
   }
   catch(ex) {
     Cu.reportError(ex);
   }
 
   this.XULFactory = NodeFactory("xul", "xul", this.chromeDocument);
   this.textFactory = NodeFactory("text", "xul", this.chromeDocument);
 
+  this.chromeWindow = HUDService.getChromeWindowFromContentWindow(this.contentWindow);
+
   // create a panel dynamically and attach to the parentNode
   let hudBox = this.createHUD();
 
   let splitter = this.chromeDocument.createElement("splitter");
   splitter.setAttribute("collapse", "before");
   splitter.setAttribute("resizeafter", "flex");
   splitter.setAttribute("class", "hud-splitter");
 
@@ -1791,16 +1794,17 @@ HeadsUpDisplay.prototype = {
     let consoleWrap = this.makeXULNode("vbox");
     this.consoleWrap = consoleWrap;
     consoleWrap.setAttribute("class", "hud-console-wrapper");
     consoleWrap.setAttribute("flex", "1");
 
     this.outputNode = this.makeXULNode("vbox");
     this.outputNode.setAttribute("class", "hud-output-node");
     this.outputNode.setAttribute("flex", "1");
+    this.outputNode.setAttribute("context", this.hudId + "-output-contextmenu");
 
     this.filterBox = this.makeXULNode("textbox");
     this.filterBox.setAttribute("class", "hud-filter-box");
     this.filterBox.setAttribute("hudId", this.hudId);
 
     this.filterClearButton = this.makeXULNode("button");
     this.filterClearButton.setAttribute("class", "hud-filter-clear");
     this.filterClearButton.setAttribute("label", this.getStr("stringFilterClear"));
@@ -1811,24 +1815,37 @@ HeadsUpDisplay.prototype = {
     this.consoleClearButton = this.makeXULNode("button");
     this.consoleClearButton.setAttribute("class", "hud-console-clear");
     this.consoleClearButton.setAttribute("label", this.getStr("btnClear"));
     this.consoleClearButton.setAttribute("buttonType", "clear");
     this.consoleClearButton.setAttribute("hudId", this.hudId);
     var command = "HUDConsoleUI.command(this)";
     this.consoleClearButton.setAttribute("oncommand", command);
 
+    this.copyOutputMenuItem = this.makeXULNode("menuitem");
+    this.copyOutputMenuItem.setAttribute("label", this.getStr("copyCmd.label"));
+    this.copyOutputMenuItem.setAttribute("accesskey", this.getStr("copyCmd.accesskey"));
+    this.copyOutputMenuItem.setAttribute("key", "key_copy");
+    this.copyOutputMenuItem.setAttribute("command", "cmd_copy");
+
+    this.contextMenu = this.makeXULNode("menupopup");
+    this.contextMenu.setAttribute("id", this.hudId + "-output-contextmenu");
+    this.contextMenu.addEventListener("popupshowing",
+      function () { self.contextMenuShowing(); }, false);
+    this.contextMenu.appendChild(this.copyOutputMenuItem);
+
     this.filterPrefs = HUDService.getDefaultFilterPrefs(this.hudId);
 
     let consoleFilterToolbar = this.makeFilterToolbar();
     consoleFilterToolbar.setAttribute("id", "viewGroup");
     this.consoleFilterToolbar = consoleFilterToolbar;
     consoleWrap.appendChild(consoleFilterToolbar);
 
     consoleWrap.appendChild(this.outputNode);
+    outerWrap.appendChild(this.contextMenu);
     outerWrap.appendChild(consoleWrap);
 
     this.jsTermParentNode = outerWrap;
     this.HUDBox.appendChild(outerWrap);
     return this.HUDBox;
   },
 
 
@@ -1949,16 +1966,36 @@ HeadsUpDisplay.prototype = {
    *
    * @returns console
    */
   createConsole: function HUD_createConsole()
   {
     return new HUDConsole(this);
   },
 
+  /**
+   * The popupshowing event handler for the outputNode context menu.
+   */
+  contextMenuShowing: function HUD_contextMenuShowing()
+  {
+    var disabled = true, selection = this.chromeWindow.getSelection();
+
+    // make sure the selected range is within the outputNode.
+    if (selection && !selection.isCollapsed && selection.rangeCount) {
+      let ancestor = selection.getRangeAt(0).commonAncestorContainer;
+      if (this.outputNode == ancestor ||
+        this.outputNode.compareDocumentPosition(ancestor) &
+        this.outputNode.DOCUMENT_POSITION_CONTAINED_BY) {
+        disabled = false;
+      }
+    }
+
+    this.copyOutputMenuItem.disabled = disabled;
+  },
+
   ERRORS: {
     HUD_BOX_DOES_NOT_EXIST: "Heads Up Display does not exist",
     TAB_ID_REQUIRED: "Tab DOM ID is required",
     PARENTNODE_NOT_FOUND: "parentNode element not found"
   }
 };
 
 
diff -r 58101a16aff7 toolkit/components/console/hudservice/tests/browser/browser_HUDServiceTestsAll.js
--- a/toolkit/components/console/hudservice/tests/browser/browser_HUDServiceTestsAll.js	Fri Jul 23 12:49:57 2010 +0300
+++ b/toolkit/components/console/hudservice/tests/browser/browser_HUDServiceTestsAll.js	Sat Jul 24 14:35:38 2010 +0300
@@ -1,9 +1,9 @@
-/* vim:set ts=2 sw=2 sts=2 et: */
+/* vim:set ts=2 sw=2 sts=2 et tw=80: */
 /* ***** BEGIN LICENSE BLOCK *****
  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
  *
  * The contents of this file are subject to the Mozilla Public License Version
  * 1.1 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * http://www.mozilla.org/MPL/
  *
@@ -15,16 +15,17 @@
  * The Original Code is DevTools test code.
  *
  * The Initial Developer of the Original Code is Mozilla Foundation.
  * Portions created by the Initial Developer are Copyright (C) 2010
  * the Initial Developer. All Rights Reserved.
  *
  * Contributor(s):
  *  David Dahl <ddahl@mozilla.com>
+ *  Mihai Șucan <mihai.sucan@gmail.com>
  *
  * Alternatively, the contents of this file may be used under the terms of
  * either the GNU General Public License Version 2 or later (the "GPL"), or
  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
  * in which case the provisions of the GPL or the LGPL are applicable instead
  * of those above. If you wish to allow use of your version of this file only
  * under the terms of either the GPL or the LGPL, and not to allow others to
  * use your version of this file under the terms of the MPL, indicate your
@@ -583,16 +584,48 @@ function testPageReload() {
     is(typeof console.exception, "function", "console.exception is a function");
 
     testEnd();
   }, false);
 
   content.location.reload();
 }
 
+function testCopyOutputMenuItem()
+{
+  var HUD = HUDService.hudWeakReferences[hudId].get();
+  var chromeWindow = HUD.chromeWindow;
+  var chromeDocument = HUD.chromeDocument;
+  var selection = chromeWindow.getSelection();
+  var console = tab.linkedBrowser.contentWindow.wrappedJSObject.console;
+
+  if (selection.rangeCount > 0) {
+    selection.removeAllRanges();
+  }
+
+  // test 1: check that the copyOutputMenuItem is disabled
+  HUD.contextMenuShowing();
+  ok(HUD.copyOutputMenuItem.disabled, "HUD.copyOutputMenuItem is disabled");
+
+  console.log("Hello world!");
+
+  executeSoon(function () {
+    var range = chromeDocument.createRange();
+    range.selectNode(HUD.outputNode.firstChild);
+    selection.addRange(range);
+
+    // test 2: check that the copyOutputMenuItem is enabled, because a node is 
+    // selected.
+    HUD.contextMenuShowing();
+    ok(!HUD.copyOutputMenuItem.disabled, "HUD.copyOutputMenuItem is enabled");
+
+    selection.removeAllRanges();
+  });
+}
+
 function testEnd() {
   // testUnregister();
   executeSoon(function () {
     HUDService.deactivateHUDForContext(tab);
     HUDService.shutdown();
   });
   finish();
 }
@@ -638,15 +671,16 @@ function test() {
       // ConsoleStorageTests
       testCreateDisplay();
       testRecordEntry();
       testRecordManyEntries();
       testIteration();
       testConsoleHistory();
       testOutputOrder();
       testNullUndefinedOutput();
+      testCopyOutputMenuItem();
       testExecutionScope();
       testCompletion();
       testPropertyProvider();
       testNet();
     });
   }, false);
 }
diff -r 58101a16aff7 toolkit/locales/en-US/chrome/global/headsUpDisplay.properties
--- a/toolkit/locales/en-US/chrome/global/headsUpDisplay.properties	Fri Jul 23 12:49:57 2010 +0300
+++ b/toolkit/locales/en-US/chrome/global/headsUpDisplay.properties	Sat Jul 24 14:35:38 2010 +0300
@@ -29,8 +29,10 @@ tipWarn=Toggle console.warn logging
 btnLog=Log
 tipLog=Toggle console.log logging
 btnGlobal=Global Messages
 tipGlobal=Toggle Global Message logging
 localConsole=Local Console
 btnClear=Clear Console
 tipClear=Clear the console output
 stringFilterClear=Clear Filter
+copyCmd.label=Copy
+copyCmd.accesskey=C
diff -r 58101a16aff7 toolkit/themes/pinstripe/global/headsUpDisplay.css
--- a/toolkit/themes/pinstripe/global/headsUpDisplay.css	Fri Jul 23 12:49:57 2010 +0300
+++ b/toolkit/themes/pinstripe/global/headsUpDisplay.css	Sat Jul 24 14:35:38 2010 +0300
@@ -53,16 +53,17 @@
     font-size: 1em;
     padding-top: 0.33em;
     font-weight: bold;
 }
 
 .hud-output-node div {
     -moz-user-select: text;
     white-space: pre-wrap;
+    -moz-user-focus: normal;
 }
 
 .hud-output-node .hud-network {
     color: blue;
 }
 
 .hud-output-node .hud-error {
     color: red;
diff -r 58101a16aff7 toolkit/themes/winstripe/global/headsUpDisplay.css
--- a/toolkit/themes/winstripe/global/headsUpDisplay.css	Fri Jul 23 12:49:57 2010 +0300
+++ b/toolkit/themes/winstripe/global/headsUpDisplay.css	Sat Jul 24 14:35:38 2010 +0300
@@ -53,16 +53,17 @@
     font-size: 1em;
     padding-top: 0.33em;
     font-weight: bold;
 }
 
 .hud-output-node div {
     -moz-user-select: text;
     white-space: pre-wrap;
+    -moz-user-focus: normal;
 }
 
 .hud-output-node .hud-network {
     color: blue;
 }
 
 .hud-output-node .hud-error {
     color: red;
