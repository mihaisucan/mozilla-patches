# HG changeset patch
# Parent 735ff84db7b1db38ee70902be7f81ff809292033
Refactor the creation of the Web Console UI to avoid unnecessarily hanging onto nodes

diff --git a/toolkit/components/console/hudservice/HUDService.jsm b/toolkit/components/console/hudservice/HUDService.jsm
--- a/toolkit/components/console/hudservice/HUDService.jsm
+++ b/toolkit/components/console/hudservice/HUDService.jsm
@@ -1863,49 +1863,53 @@ HeadsUpDisplay.prototype = {
     this.outputNode = this.makeXULNode("vbox");
     this.outputNode.setAttribute("class", "hud-output-node");
     this.outputNode.setAttribute("flex", "1");
     this.outputNode.setAttribute("context", this.hudId + "-output-contextmenu");
 
     this.filterSpacer = this.makeXULNode("spacer");
     this.filterSpacer.setAttribute("flex", "1");
 
+    let consoleFilterToolbar = this.makeXULNode("toolbar");
+    consoleFilterToolbar.setAttribute("class", "hud-console-filter-toolbar");
+    consoleFilterToolbar.setAttribute("id", "viewGroup");
+    consoleFilterToolbar.setAttribute("mode", "text");
+
+    let consoleClearButton = this.makeXULNode("button");
+    consoleClearButton.setAttribute("class", "hud-console-clear");
+    consoleClearButton.setAttribute("label", this.getStr("btnClear"));
+    consoleClearButton.setAttribute("buttonType", "clear");
+    consoleClearButton.setAttribute("hudId", this.hudId);
+    var command = "HUDConsoleUI.command(this)";
+    consoleClearButton.setAttribute("oncommand", command);
+    consoleFilterToolbar.appendChild(consoleClearButton);
+
+    this.filterPrefs = HUDService.getDefaultFilterPrefs(this.hudId);
+    this.createFilterButtons(consoleFilterToolbar);
+
     this.filterBox = this.makeXULNode("textbox");
     this.filterBox.setAttribute("class", "compact hud-filter-box");
     this.filterBox.setAttribute("hudId", this.hudId);
     this.filterBox.setAttribute("placeholder", this.getStr("stringFilter"));
     this.filterBox.setAttribute("type", "search");
+    consoleFilterToolbar.appendChild(this.filterBox);
 
     this.setFilterTextBoxEvents();
 
-    this.consoleClearButton = this.makeXULNode("button");
-    this.consoleClearButton.setAttribute("class", "hud-console-clear");
-    this.consoleClearButton.setAttribute("label", this.getStr("btnClear"));
-    this.consoleClearButton.setAttribute("buttonType", "clear");
-    this.consoleClearButton.setAttribute("hudId", this.hudId);
-    var command = "HUDConsoleUI.command(this)";
-    this.consoleClearButton.setAttribute("oncommand", command);
-
     this.copyOutputMenuItem = this.makeXULNode("menuitem");
     this.copyOutputMenuItem.setAttribute("label", this.getStr("copyCmd.label"));
     this.copyOutputMenuItem.setAttribute("accesskey", this.getStr("copyCmd.accesskey"));
     this.copyOutputMenuItem.setAttribute("key", "key_copy");
     this.copyOutputMenuItem.setAttribute("command", "cmd_copy");
 
     this.contextMenu = this.makeXULNode("menupopup");
     this.contextMenu.setAttribute("id", this.hudId + "-output-contextmenu");
     this.contextMenu.appendChild(this.copyOutputMenuItem);
 
-    this.filterPrefs = HUDService.getDefaultFilterPrefs(this.hudId);
-
-    let consoleFilterToolbar = this.makeFilterToolbar();
-    consoleFilterToolbar.setAttribute("id", "viewGroup");
-    this.consoleFilterToolbar = consoleFilterToolbar;
     consoleWrap.appendChild(consoleFilterToolbar);
-
     consoleWrap.appendChild(this.outputNode);
 
     // We want the context menu inside the console wrapper, but outside the
     // outputNode.
     outerWrap.appendChild(this.contextMenu);
 
     outerWrap.appendChild(consoleWrap);
 
@@ -1928,56 +1932,46 @@ HeadsUpDisplay.prototype = {
     function keyPress(aEvent)
     {
       HUDService.updateFilterText(aEvent.target);
     }
     this.filterBox.addEventListener("keydown", keyPress, false);
   },
 
   /**
-   * Make the filter toolbar where we can toggle logging filters
+   * Creates the filter buttons to allow the user to toggle logging filters,
+   * and appends them to the given toolbar.
    *
-   * @returns nsIDOMNode
+   * @param nsIDOMNode aToolbar
+   *        The toolbar node.
+   * @returns void
    */
-  makeFilterToolbar: function HUD_makeFilterToolbar()
+  createFilterButtons: function HUD_createFilterButtons(aToolbar)
   {
-    let buttons = ["Network", "CSSParser", "Exception", "Error",
-                   "Info", "Warn", "Log",];
-
     const pageButtons = [
       { prefKey: "network", name: "PageNet" },
       { prefKey: "cssparser", name: "PageCSS" },
       { prefKey: "exception", name: "PageJS" }
     ];
     const consoleButtons = [
       { prefKey: "error", name: "ConsoleErrors" },
       { prefKey: "warn", name: "ConsoleWarnings" },
       { prefKey: "info", name: "ConsoleInfo" },
       { prefKey: "log", name: "ConsoleLog" }
     ];
 
-    let toolbar = this.makeXULNode("toolbar");
-    toolbar.setAttribute("class", "hud-console-filter-toolbar");
-    toolbar.setAttribute("mode", "text");
-
-    toolbar.appendChild(this.consoleClearButton);
-
     let pageCategoryTitle = this.getStr("categoryPage");
-    this.addButtonCategory(toolbar, pageCategoryTitle, pageButtons);
+    this.addButtonCategory(aToolbar, pageCategoryTitle, pageButtons);
 
     let separator = this.makeXULNode("separator");
     separator.setAttribute("orient", "vertical");
-    toolbar.appendChild(separator);
+    aToolbar.appendChild(separator);
 
     let consoleCategoryTitle = this.getStr("categoryConsole");
-    this.addButtonCategory(toolbar, consoleCategoryTitle, consoleButtons);
-
-    toolbar.appendChild(this.filterSpacer);
-    toolbar.appendChild(this.filterBox);
-    return toolbar;
+    this.addButtonCategory(aToolbar, consoleCategoryTitle, consoleButtons);
   },
 
   makeButton: function HUD_makeButton(aName, aPrefKey, aType)
   {
     var self = this;
     let prefKey = aPrefKey;
 
     let btn;
