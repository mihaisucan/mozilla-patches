diff --git a/toolkit/components/console/hudservice/tests/browser/Makefile.in b/toolkit/components/console/hudservice/tests/browser/Makefile.in
--- a/toolkit/components/console/hudservice/tests/browser/Makefile.in
+++ b/toolkit/components/console/hudservice/tests/browser/Makefile.in
@@ -88,16 +88,17 @@ _BROWSER_TEST_FILES = \
 	browser_webconsole_bug_581231_close_button.js \
 	browser_webconsole_bug_582201_duplicate_errors.js \
 	browser_webconsole_bug_580454_timestamp_l10n.js \
 	browser_webconsole_netlogging.js \
 	browser_webconsole_bug_583816_tab_focus.js \
 	browser_webconsole_bug_594477_clickable_output.js \
 	browser_webconsole_bug_589162_css_filter.js \
 	browser_webconsole_bug_597103_deactivateHUDForContext_unfocused_window.js \
+	browser_webconsole_bug_595350_multiple_windows_and_tabs.js \
 	head.js \
 	$(NULL)
 
 _BROWSER_TEST_PAGES = \
 	test-console.html \
 	test-network.html \
 	test-network-request.html \
 	test-mutation.html \
diff --git a/toolkit/components/console/hudservice/tests/browser/browser_webconsole_bug_595350_multiple_windows_and_tabs.js b/toolkit/components/console/hudservice/tests/browser/browser_webconsole_bug_595350_multiple_windows_and_tabs.js
--- a/toolkit/components/console/hudservice/tests/browser/browser_webconsole_bug_595350_multiple_windows_and_tabs.js
+++ b/toolkit/components/console/hudservice/tests/browser/browser_webconsole_bug_595350_multiple_windows_and_tabs.js
@@ -1,70 +1,84 @@
 /* vim:set ts=2 sw=2 sts=2 et: */
 /* ***** BEGIN LICENSE BLOCK *****
  * Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/
  *
  * Contributor(s):
  *  Patrick Walton <pcwalton@mozilla.com>
+ *  Mihai È˜ucan <mihai.sucan@gmail.com>
  *
  * ***** END LICENSE BLOCK ***** */
 
 // Tests that the Web Console doesn't leak when multiple tabs and windows are
 // opened and then closed.
 
-const TEST_URI = "http://example.com/";
+const TEST_URI = "data:text/html,Web Console test for bug 595350";
 
-let mainWindowTabs = [], newWindowTabs = [];
+let win1 = window, win2;
+let openTabs = [];
 let loadedTabCount = 0;
-let newWindow;
 
 function test() {
-  window.open(TEST_URI);
-  browser.addEventListener("DOMContentLoaded", onWindowLoad, false);
+  // Add two tabs in the main window.
+  addTabs(win1);
+
+  // Open a new window.
+  win2 = OpenBrowserWindow();
+  win2.addEventListener("load", onWindowLoad, true);
 }
 
-function onWindowLoad() {
-  browser.removeEventListener("DOMContentLoaded", onWindowLoad, false);
-  newWindow = Services.wm.getMostRecentWindow("navigator:browser");
-  ok(newWindow, "we have the window");
+function onWindowLoad(aEvent) {
+  win2.removeEventListener(aEvent.type, arguments.callee, true);
 
-  addTabs(mainWindowTabs, gBrowser);
-  addTabs(newWindowTabs, newWindow.gBrowser);
+  // Add two tabs in the new window.
+  addTabs(win2);
 }
 
-let funcArr = [];
+function addTabs(aWindow) {
+  for (let i = 0; i < 2; i++) {
+    let tab = aWindow.gBrowser.addTab(TEST_URI);
+    openTabs.push(tab);
 
-function addTabs(aTabList, aGBrowser) {
-  for (let i = 0; i < 3; i++) {
-    let tab = aGBrowser.addTab(TEST_URI);
-    funcArr.push(function(){onTabLoad(tab, i);});
-    tab.linkedBrowser.addEventListener("DOMContentLoaded", funcArr[i], false);
-    aTabList.push(tab);
+    tab.linkedBrowser.addEventListener("load", function(aEvent) {
+      tab.linkedBrowser.removeEventListener(aEvent.type, arguments.callee,
+        true);
+
+      loadedTabCount++;
+      if (loadedTabCount >= 4) {
+        executeSoon(performTest);
+      }
+    }, true);
   }
 }
 
-function onTabLoad(aTab, idx) {
-  aTab.linkedBrowser.removeEventListener("DOMContentLoaded", funcArr[idx] , false);
-  loadedTabCount++;
-  if (loadedTabCount < 6) {
-    return;
+function performTest() {
+  // open the Web Console for each of the four tabs and log a message.
+  for (let i = 0; i < openTabs.length; i++) {
+    let tab = openTabs[i];
+    HUDService.activateHUDForContext(tab);
+    let hudId = HUDService.getHudIdByWindow(tab.linkedBrowser.contentWindow);
+    ok(hudId, "HUD is open for tab " + i);
+    let HUD = HUDService.hudWeakReferences[hudId].get();
+    HUD.console.log("message for tab " + i);
   }
 
-  testMultipleWindowsAndTabs();
-}
+  let displays = HUDService.displaysIndex();
+  is(displays.length, 4, "four displays found");
 
-function testMultipleWindowsAndTabs() {
-  for (let i = 0; i < 3; i++) {
-    HUDService.activateHUDForContext(mainWindowTabs[i]);
-    HUDService.activateHUDForContext(newWindowTabs[i]);
-  }
+  win2.close();
 
   executeSoon(function() {
-    newWindow.close();
-    for (let i = 0; i < 3; i++) {
-      gBrowser.removeTab(mainWindowTabs[i]);
-    }
+    win1.gBrowser.removeTab(openTabs[0]);
+    win1.gBrowser.removeTab(openTabs[1]);
 
-    finishTest();
+    executeSoon(function() {
+      displays = HUDService.displaysIndex();
+      is(displays.length, 0, "no displays found");
+
+      displays = openTabs = win1 = win2 = null;
+
+      finishTest();
+    });
   });
 }
 
diff --git a/toolkit/components/console/hudservice/tests/browser/head.js b/toolkit/components/console/hudservice/tests/browser/head.js
--- a/toolkit/components/console/hudservice/tests/browser/head.js
+++ b/toolkit/components/console/hudservice/tests/browser/head.js
@@ -129,17 +129,19 @@ function finishTest()
 function tearDown()
 {
   try {
     HUDService.deactivateHUDForContext(gBrowser.selectedTab);
   }
   catch (ex) {
     log(ex);
   }
-  gBrowser.removeCurrentTab();
+  while (gBrowser.tabs.length > 1) {
+    gBrowser.removeCurrentTab();
+  }
   tab = browser = hudId = hud = filterBox = outputNode = cs = null;
 }
 
 registerCleanupFunction(tearDown);
 
 waitForExplicitFinish();
 
 // removed tests:
