diff --git a/toolkit/components/console/hudservice/tests/browser/Makefile.in b/toolkit/components/console/hudservice/tests/browser/Makefile.in
--- a/toolkit/components/console/hudservice/tests/browser/Makefile.in
+++ b/toolkit/components/console/hudservice/tests/browser/Makefile.in
@@ -86,16 +86,17 @@ _BROWSER_TEST_FILES = \
 	browser_webconsole_bug_588342_document_focus.js \
 	browser_webconsole_bug_585237_line_limit.js \
 	browser_webconsole_bug_581231_close_button.js \
 	browser_webconsole_bug_582201_duplicate_errors.js \
 	browser_webconsole_bug_580454_timestamp_l10n.js \
 	browser_webconsole_netlogging.js \
 	browser_webconsole_bug_583816_tab_focus.js \
 	browser_webconsole_bug_594477_clickable_output.js \
+	browser_webconsole_bug_580030_errors_after_page_reload.js \
 	head.js \
 	$(NULL)
 
 _BROWSER_TEST_PAGES = \
 	test-console.html \
 	test-network.html \
 	test-network-request.html \
 	test-mutation.html \
diff --git a/toolkit/components/console/hudservice/tests/browser/browser_webconsole_bug_580030_errors_after_page_reload.js b/toolkit/components/console/hudservice/tests/browser/browser_webconsole_bug_580030_errors_after_page_reload.js
--- a/toolkit/components/console/hudservice/tests/browser/browser_webconsole_bug_580030_errors_after_page_reload.js
+++ b/toolkit/components/console/hudservice/tests/browser/browser_webconsole_bug_580030_errors_after_page_reload.js
@@ -35,86 +35,75 @@
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 // Tests that errors still show up in the Web Console after a page reload.
 
-const TEST_ERROR_URI = "http://example.com/browser/toolkit/components/console/hudservice/tests/browser/test-error.html";
+const TEST_URI = "http://example.com/browser/toolkit/components/console/hudservice/tests/browser/test-error.html";
 
 function test() {
-  return;
-  // XXX: this tests fails en mass...
-
-  addTab(TEST_ERROR_URI);
-  browser.addEventListener("DOMContentLoaded", onLoad, false);
+  addTab(TEST_URI);
+  browser.addEventListener("load", onLoad, true);
 }
 
 // see bug 580030: the error handler fails silently after page reload.
 // https://bugzilla.mozilla.org/show_bug.cgi?id=580030
-function onLoad() {
-  browser.removeEventListener("DOMContentLoaded", onLoad, false);
+function onLoad(aEvent) {
+  browser.removeEventListener(aEvent.type, arguments.callee, true);
 
   openConsole();
 
-  browser.addEventListener("DOMContentLoaded", testErrorsAfterPageReload,
-                           false);
-  browser.contentWindow.wrappedJSObject.location.reload();
+  browser.addEventListener("load", testErrorsAfterPageReload, true);
+  executeSoon(function() {
+    content.location.reload();
+  });
 }
 
-function testErrorsAfterPageReload() {
-  browser.removeEventListener("DOMContentLoaded", testErrorsAfterPageReload,
-                              false);
+function testErrorsAfterPageReload(aEvent) {
+  browser.removeEventListener(aEvent.type, arguments.callee, true);
 
   // dispatch a click event to the button in the test page and listen for
   // errors.
 
-  var contentDocument = browser.contentDocument.wrappedJSObject;
-  var button = contentDocument.getElementsByTagName("button")[0];
-  var clickEvent = contentDocument.createEvent("MouseEvents");
+  Services.console.registerListener(consoleObserver);
+
+  var button = content.document.wrappedJSObject.querySelector("button");
+  var clickEvent = content.document.wrappedJSObject.createEvent("MouseEvents");
   clickEvent.initMouseEvent("click", true, true,
-    browser.contentWindow.wrappedJSObject, 0, 0, 0, 0, 0, false, false,
+    content.wrappedJSObject, 0, 0, 0, 0, 0, false, false,
     false, false, 0, null);
 
-  Services.console.registerListener(consoleObserver);
-  button.dispatchEvent(clickEvent);
+  executeSoon(function() {
+    button.dispatchEvent(clickEvent);
+  });
 }
 
 var consoleObserver = {
   QueryInterface: XPCOMUtils.generateQI([Ci.nsIObserver]),
 
-  observe: function (aMessage)
+  observe: function test_observe(aMessage)
   {
-    // we ignore errors we don't care about
+    // Ignore errors we don't care about.
     if (!(aMessage instanceof Ci.nsIScriptError) ||
       aMessage.category != "content javascript") {
       return;
     }
 
     Services.console.unregisterListener(this);
 
     const successMsg = "Found the error message after page reload";
     const errMsg = "Could not get the error message after page reload";
 
-    const successMsgErrorLine = "Error line is correct";
-    const errMsgErrorLine = "Error line is incorrect";
+    var display = HUDService.getDisplayByURISpec(content.location.href);
+    var outputNode = display.querySelector(".hud-output-node");
 
-    var display = HUDService.getDisplayByURISpec(content.location.href);
-    var outputNodes = display.querySelectorAll(".hud-msg-node");
+    executeSoon(function() {
+      testLogEntry(outputNode, "fooBazBaz",
+                   { success: successMsg, err: errMsg });
 
-    executeSoon(function () {
-      executeSoon(function (){
-        testLogEntry(outputNodes[1], "fooBazBaz",
-                     { success: successMsg, err: errMsg });
-
-        testLogEntry(outputNodes[1], "Line:",
-                     { success: successMsgErrorLine, err: errMsgErrorLine });
-
-        outputNodes = display = null;
-
-        finishTest();
-      });
+      finishTest();
     });
   }
 };
 
