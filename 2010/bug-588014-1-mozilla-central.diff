diff --git a/toolkit/components/console/hudservice/HUDService.jsm b/toolkit/components/console/hudservice/HUDService.jsm
--- a/toolkit/components/console/hudservice/HUDService.jsm
+++ b/toolkit/components/console/hudservice/HUDService.jsm
@@ -2341,16 +2341,19 @@ HUD_SERVICE.prototype =
 
       var messageObject =
         this.messageFactory(message, aType, outputNode, aActivityObject);
 
       var timestampedMessage = messageObject.timestampedMessage;
       var urlIdx = timestampedMessage.indexOf(aActivityObject.url);
       messageObject.prefix = timestampedMessage.substring(0, urlIdx);
 
+      messageObject.messageNode.classList.add("hud-clickable");
+      messageObject.messageNode.setAttribute("crop", "end");
+
       this.logMessage(messageObject.messageObject, outputNode, messageObject.messageNode);
       return messageObject;
     }
     catch (ex) {
       Cu.reportError(ex);
     }
   },
 
@@ -2475,20 +2478,22 @@ HUD_SERVICE.prototype =
         return lastGroupNode;
       }
     }
 
     let chromeDocument = aConsoleNode.ownerDocument;
     let groupNode = chromeDocument.createElement("vbox");
     groupNode.setAttribute("class", "hud-group");
 
+    /*
     let separatorNode = chromeDocument.createElement("separator");
     separatorNode.setAttribute("class", "groove hud-divider");
     separatorNode.setAttribute("orient", "horizontal");
     groupNode.appendChild(separatorNode);
+    */
 
     aConsoleNode.appendChild(groupNode);
     return groupNode;
   },
 
   /**
    * gets the DOM Node that maps back to what context/tab that
    * activity originated via the URI
@@ -3304,40 +3309,44 @@ function HUDConsole(aHeadsUpDisplay)
   this.exception = function console_exception()
   {
     sendToHUDService("exception", arguments);
   }
 };
 
 /**
  * Creates a DOM Node factory for XUL nodes - as well as textNodes
- * @param   aFactoryType
- *          "xul" or "text"
- * @returns DOM Node Factory function
+ * @param aFactoryType "xul" or "text"
+ * @param ignored This parameter is currently ignored, and will be removed
+ * See bug 594304
+ * @param aDocument The document, the factory is to generate nodes from
+ * @return DOM Node Factory function
  */
-function NodeFactory(aFactoryType, aNameSpace, aDocument)
+function NodeFactory(aFactoryType, ignored, aDocument)
 {
   // aDocument is presumed to be a XULDocument
   if (aFactoryType == "text") {
-    function factory(aText) {
+    return function factory(aText)
+    {
       return aDocument.createTextNode(aText);
     }
-    return factory;
+  }
+  else if (aFactoryType == "xul") {
+    return function factory(aTag)
+    {
+      return aDocument.createElement(aTag);
+    }
   }
   else {
-    if (aNameSpace == "xul") {
-      function factory(aTag)
-      {
-        return aDocument.createElement(aTag);
-      }
-      return factory;
-    }
+    throw new Error('NodeFactory: Unknown factory type: ' + aFactoryType);
   }
 }
 
+
+
 //////////////////////////////////////////////////////////////////////////
 // JS Completer
 //////////////////////////////////////////////////////////////////////////
 
 const STATE_NORMAL = 0;
 const STATE_QUOTE = 2;
 const STATE_DQUOTE = 3;
 
@@ -3945,18 +3954,19 @@ JSTerm.prototype = {
    */
   writeOutputJS: function JST_writeOutputJS(aEvalString, aOutputObject)
   {
     let lastGroupNode = HUDService.appendGroupIfNecessary(this.outputNode,
                                                       Date.now());
 
     var self = this;
     var node = this.xulElementFactory("label");
-    node.setAttribute("class", "jsterm-output-line");
+    node.setAttribute("class", "jsterm-output-line hud-clickable");
     node.setAttribute("aria-haspopup", "true");
+    node.setAttribute("crop", "end");
     node.onclick = function() {
       self.openPropertyPanel(aEvalString, aOutputObject, node);
     }
 
     // TODO: format the aOutputObject and don't just use the
     // aOuputObject.toString() function: [object object] -> Object {prop, ...}
     // See bug 586249.
     let textNode = this.textFactory(aOutputObject);
@@ -4632,42 +4642,16 @@ ConsoleUtils = {
     }
 
     let boxObject = scrollBoxNode.boxObject;
     let nsIScrollBoxObject = boxObject.QueryInterface(Ci.nsIScrollBoxObject);
     nsIScrollBoxObject.ensureElementIsVisible(aNode);
   }
 };
 
-/**
- * Creates a DOM Node factory for XUL nodes - as well as textNodes
- * @param   aFactoryType
- *          "xul" or "text"
- * @returns DOM Node Factory function
- */
-function NodeFactory(aFactoryType, aNameSpace, aDocument)
-{
-  // aDocument is presumed to be a XULDocument
-  if (aFactoryType == "text") {
-    function factory(aText) {
-      return aDocument.createTextNode(aText);
-    }
-    return factory;
-  }
-  else {
-    if (aNameSpace == "xul") {
-      function factory(aTag) {
-        return aDocument.createElement(aTag);
-      }
-      return factory;
-    }
-  }
-}
-
-
 //////////////////////////////////////////////////////////////////////////
 // HeadsUpDisplayUICommands
 //////////////////////////////////////////////////////////////////////////
 
 HeadsUpDisplayUICommands = {
   toggleHUD: function UIC_toggleHUD() {
     var window = HUDService.currentContext();
     var gBrowser = window.gBrowser;
diff --git a/toolkit/components/console/hudservice/tests/browser/browser_HUDServiceTestsAll.js b/toolkit/components/console/hudservice/tests/browser/browser_HUDServiceTestsAll.js
--- a/toolkit/components/console/hudservice/tests/browser/browser_HUDServiceTestsAll.js
+++ b/toolkit/components/console/hudservice/tests/browser/browser_HUDServiceTestsAll.js
@@ -216,19 +216,19 @@ function testConsoleLoggingAPI(aMethod)
 
   // test for multiple arguments.
   HUDService.clearDisplay(hudId);
   HUDService.setFilterState(hudId, aMethod, true);
   browser.contentWindow.wrappedJSObject.console[aMethod]("foo", "bar");
 
   let HUD = HUDService.hudWeakReferences[hudId].get();
   let jsterm = HUD.jsterm;
-  let group = jsterm.outputNode.querySelector(".hud-group");
-  ok(/foo bar/.test(group.childNodes[1].childNodes[0].nodeValue),
-    "Emitted both console arguments");
+  let node = jsterm.outputNode.
+    querySelector(".hud-group:last-child > label:last-child");
+  ok(/foo bar/.test(node.textContent), "Emitted both console arguments");
 }
 
 function testLogEntry(aOutputNode, aMatchString, aSuccessErrObj)
 {
   var msgs = aOutputNode.querySelector(".hud-group").childNodes;
   for (var i = 1; i < msgs.length; i++) {
     var message = msgs[i].textContent.indexOf(aMatchString);
     if (message > -1) {
@@ -253,33 +253,33 @@ function testNet()
   let outputNode = jsterm.outputNode;
   jsterm.clearOutput();
 
   browser.addEventListener("load", function onTestNetLoad () {
     browser.removeEventListener("load", onTestNetLoad, true);
 
     executeSoon(function(){
       let group = outputNode.querySelector(".hud-group");
-      is(group.childNodes.length, 5, "Four children in output");
+      is(group.childNodes.length, 4, "Four children in output");
       let outputChildren = group.childNodes;
 
-      isnot(outputChildren[1].textContent.indexOf("test-network.html"), -1,
+      isnot(outputChildren[0].textContent.indexOf("test-network.html"), -1,
                                                 "html page is logged");
-      isnot(outputChildren[2].textContent.indexOf("testscript.js"), -1,
+      isnot(outputChildren[1].textContent.indexOf("testscript.js"), -1,
                                                 "javascript is logged");
 
       let imageLogged =
-        (outputChildren[3].textContent.indexOf("test-image.png") != -1 ||
-         outputChildren[4].textContent.indexOf("test-image.png") != -1);
+        (outputChildren[2].textContent.indexOf("test-image.png") != -1 ||
+         outputChildren[3].textContent.indexOf("test-image.png") != -1);
       ok(imageLogged, "image is logged");
 
       let logOutput = "running network console logging tests";
       let logLogged =
-        (outputChildren[3].textContent.indexOf(logOutput) != -1 ||
-         outputChildren[4].textContent.indexOf(logOutput) != -1);
+        (outputChildren[2].textContent.indexOf(logOutput) != -1 ||
+         outputChildren[3].textContent.indexOf(logOutput) != -1);
       ok(logLogged, "log() is logged")
 
       testLiveFilteringForMessageTypes();
     });
   }, true);
 
   content.location = TEST_NETWORK_URI;
 }
@@ -379,24 +379,24 @@ function testOutputOrder()
   let HUD = HUDService.hudWeakReferences[hudId].get();
   let jsterm = HUD.jsterm;
   let outputNode = jsterm.outputNode;
 
   jsterm.clearOutput();
   jsterm.execute("console.log('foo', 'bar');");
 
   let group = outputNode.querySelector(".hud-group");
-  is(group.childNodes.length, 4, "Four children in output");
+  is(group.childNodes.length, 3, "Four children in output");
   let outputChildren = group.childNodes;
 
   let executedStringFirst =
-    /console\.log\('foo', 'bar'\);/.test(outputChildren[1].childNodes[0].nodeValue);
+    /console\.log\('foo', 'bar'\);/.test(outputChildren[0].childNodes[0].nodeValue);
 
   let outputSecond =
-    /foo bar/.test(outputChildren[2].childNodes[0].nodeValue);
+    /foo bar/.test(outputChildren[1].childNodes[0].nodeValue);
 
   ok(executedStringFirst && outputSecond, "executed string comes first");
 }
 
 function testGroups()
 {
   let HUD = HUDService.hudWeakReferences[hudId].get();
   let jsterm = HUD.jsterm;
@@ -427,48 +427,48 @@ function testNullUndefinedOutput()
   let HUD = HUDService.hudWeakReferences[hudId].get();
   let jsterm = HUD.jsterm;
   let outputNode = jsterm.outputNode;
 
   jsterm.clearOutput();
   jsterm.execute("null;");
 
   let group = outputNode.querySelector(".hud-group");
-  is(group.childNodes.length, 3, "Three children in output");
+  is(group.childNodes.length, 2, "Three children in output");
   let outputChildren = group.childNodes;
 
-  is (outputChildren[2].childNodes[0].nodeValue, "null",
+  is (outputChildren[1].childNodes[0].nodeValue, "null",
       "'null' printed to output");
 
   jsterm.clearOutput();
   jsterm.execute("undefined;");
 
   group = outputNode.querySelector(".hud-group");
-  is(group.childNodes.length, 3, "Three children in output");
+  is(group.childNodes.length, 2, "Three children in output");
   outputChildren = group.childNodes;
 
-  is (outputChildren[2].childNodes[0].nodeValue, "undefined",
+  is (outputChildren[1].childNodes[0].nodeValue, "undefined",
       "'undefined' printed to output");
 }
 
 function testJSInputAndOutputStyling() {
   let jsterm = HUDService.hudWeakReferences[hudId].get().jsterm;
 
   jsterm.clearOutput();
   jsterm.execute("2 + 2");
 
   let group = jsterm.outputNode.querySelector(".hud-group");
   let outputChildren = group.childNodes;
-  let jsInputNode = outputChildren[1];
+  let jsInputNode = outputChildren[0];
   isnot(jsInputNode.childNodes[0].nodeValue.indexOf("2 + 2"), -1,
     "JS input node contains '2 + 2'");
   isnot(jsInputNode.getAttribute("class").indexOf("jsterm-input-line"), -1,
     "JS input node is of the CSS class 'jsterm-input-line'");
 
-  let jsOutputNode = outputChildren[2];
+  let jsOutputNode = outputChildren[1];
   isnot(jsOutputNode.childNodes[0].textContent.indexOf("4"), -1,
     "JS output node contains '4'");
   isnot(jsOutputNode.getAttribute("class").indexOf("jsterm-output-line"), -1,
     "JS output node is of the CSS class 'jsterm-output-line'");
 }
 
 function testCreateDisplay() {
   ok(typeof cs.consoleDisplays == "object",
@@ -1001,69 +1001,69 @@ function testExecutionScope()
   let HUD = HUDService.hudWeakReferences[hudId].get();
   let jsterm = HUD.jsterm;
 
   jsterm.clearOutput();
   jsterm.execute("location;");
 
   let group = jsterm.outputNode.querySelector(".hud-group");
 
-  is(group.childNodes.length, 3, "Three children in output");
+  is(group.childNodes.length, 2, "Three children in output");
   let outputChildren = group.childNodes;
 
-  is(/location;/.test(outputChildren[1].childNodes[0].nodeValue), true,
+  is(/location;/.test(outputChildren[0].childNodes[0].nodeValue), true,
     "'location;' written to output");
 
-  isnot(outputChildren[2].childNodes[0].textContent.indexOf(TEST_URI), -1,
+  isnot(outputChildren[1].childNodes[0].textContent.indexOf(TEST_URI), -1,
     "command was executed in the window scope");
 }
 
 function testJSTermHelper()
 {
   content.location.href = TEST_URI;
 
   let HUD = HUDService.hudWeakReferences[hudId].get();
   let jsterm = HUD.jsterm;
 
   jsterm.clearOutput();
   jsterm.execute("'id=' + $('header').getAttribute('id')");
   let group = jsterm.outputNode.querySelector(".hud-group");
-  is(group.childNodes[2].textContent, "id=header", "$() worked");
+  is(group.childNodes[1].textContent, "id=header", "$() worked");
 
   jsterm.clearOutput();
   jsterm.execute("headerQuery = $$('h1')");
   jsterm.execute("'length=' + headerQuery.length");
   let group = jsterm.outputNode.querySelector(".hud-group");
-  is(group.childNodes[4].textContent, "length=1", "$$() worked");
+  is(group.childNodes[3].textContent, "length=1", "$$() worked");
 
   jsterm.clearOutput();
   jsterm.execute("xpathQuery = $x('.//*', document.body);");
   jsterm.execute("'headerFound='  + (xpathQuery[0] == headerQuery[0])");
   let group = jsterm.outputNode.querySelector(".hud-group");
-  is(group.childNodes[4].textContent, "headerFound=true", "$x() worked");
+  is(group.childNodes[3].textContent, "headerFound=true", "$x() worked");
 
   // no jsterm.clearOutput() here as we clear the output using the clear() fn.
   jsterm.execute("clear()");
   let group = jsterm.outputNode.querySelector(".hud-group");
-  is(group.childNodes[1].textContent, "undefined", "clear() worked");
+  is(group.childNodes[0].textContent, "undefined", "clear() worked");
 
   jsterm.clearOutput();
   jsterm.execute("'keysResult=' + (keys({b:1})[0] == 'b')");
   let group = jsterm.outputNode.querySelector(".hud-group");
-  is(group.childNodes[2].textContent, "keysResult=true", "keys() worked");
+  is(group.childNodes[1].textContent, "keysResult=true", "keys() worked");
 
   jsterm.clearOutput();
   jsterm.execute("'valuesResult=' + (values({b:1})[0] == 1)");
   let group = jsterm.outputNode.querySelector(".hud-group");
-  is(group.childNodes[2].textContent, "valuesResult=true", "values() worked");
+  is(group.childNodes[1].textContent, "valuesResult=true", "values() worked");
 
   jsterm.clearOutput();
   jsterm.execute("pprint({b:2, a:1})");
   let group = jsterm.outputNode.querySelector(".hud-group");
-  is(group.childNodes[2].textContent, "  a: 1\n  b: 2", "pprint() worked");
+  is(group.childNodes[1].textContent, "  a: 1\n  b: 2", "pprint() worked");
 }
 
 function testPropertyPanel()
 {
   var HUD = HUDService.hudWeakReferences[hudId].get();
   var jsterm = HUD.jsterm;
 
   let propPanel = jsterm.openPropertyPanel("Test", [
diff --git a/toolkit/themes/gnomestripe/global/webConsole.css b/toolkit/themes/gnomestripe/global/webConsole.css
--- a/toolkit/themes/gnomestripe/global/webConsole.css
+++ b/toolkit/themes/gnomestripe/global/webConsole.css
@@ -35,16 +35,20 @@
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 .hud-box {
     border-bottom: 1px solid #aaa;
 }
 
+.hud-group label {
+    padding-left: 1em;
+}
+
 .hud-outer-wrapper {
     width: 100%; 
     height: 100%;
 }
 
 .hud-console-wrapper {
     width: 100%; 
     overflow: auto; 
@@ -57,16 +61,21 @@
 }
 
 .hud-output-node div {
     -moz-user-select: text;
     white-space: pre-wrap;
     -moz-user-focus: normal;
 }
 
+.hud-clickable {
+    cursor: pointer !important;
+    text-decoration: underline;
+}
+
 .hud-output-node .hud-network {
     color: blue;
 }
 
 .hud-output-node .hud-error {
     color: red;
 }
 
@@ -86,17 +95,17 @@
     color: red; font-weight: bold;
 }
 
 .hud-msg-node {    
     width: 100%;
     margin-top: 0.3em; 
     margin-bottom: 0.3em; 
     padding-left: 0.3em;
-    border-bottom: 1px solid #eee;   
+    /* border-bottom: 1px solid #eee; */
 }
 
 .hud-output-node {
     border-bottom: 1px solid #ddd; 
     border-top: 1px solid #ddd; 
     overflow-x: auto; overflow: auto;
     font: 1em monospace; background-color: white;
     width: 100%;
diff --git a/toolkit/themes/pinstripe/global/webConsole.css b/toolkit/themes/pinstripe/global/webConsole.css
--- a/toolkit/themes/pinstripe/global/webConsole.css
+++ b/toolkit/themes/pinstripe/global/webConsole.css
@@ -37,16 +37,20 @@
  * ***** END LICENSE BLOCK ***** */
 
 %include shared.inc
 
 .hud-box {
     border-bottom: 1px solid #aaa;
 }
 
+.hud-group label {
+    padding-left: 1em;
+}
+
 .hud-outer-wrapper {
     width: 100%; 
     height: 100%;
 }
 
 .hud-console-wrapper {
     width: 100%; 
     overflow: auto; 
@@ -59,16 +63,21 @@
 }
 
 .hud-output-node * {
     -moz-user-select: text;
     white-space: pre-wrap;
     -moz-user-focus: normal;
 }
 
+.hud-clickable {
+    cursor: pointer !important;
+    text-decoration: underline;
+}
+
 .hud-output-node .hud-network {
     color: blue;
 }
 
 .hud-output-node .hud-error {
     color: red;
 }
 
@@ -88,17 +97,17 @@
     color: red; font-weight: bold;
 }
 
 .hud-msg-node {    
     width: 100%;
     margin-top: 0.3em; 
     margin-bottom: 0.3em; 
     padding-left: 0.3em;
-    border-bottom: 1px solid #eee;   
+    /* border-bottom: 1px solid #eee; */
 }
 
 .hud-output-node {
     border-bottom: 1px solid #ddd; 
     border-top: 1px solid #ddd; 
     overflow-x: auto; overflow: auto;
     font: 1em monospace; background-color: white;
     width: 100%;
diff --git a/toolkit/themes/winstripe/global/webConsole.css b/toolkit/themes/winstripe/global/webConsole.css
--- a/toolkit/themes/winstripe/global/webConsole.css
+++ b/toolkit/themes/winstripe/global/webConsole.css
@@ -35,16 +35,20 @@
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 .hud-box {
     border-bottom: 1px solid #aaa;
 }
 
+.hud-group label {
+    padding-left: 1em;
+}
+
 .hud-outer-wrapper {
     width: 100%; 
     height: 100%;
 }
 
 .hud-console-wrapper {
     width: 100%; 
     overflow: auto; 
@@ -57,16 +61,21 @@
 }
 
 .hud-output-node * {
     -moz-user-select: text;
     white-space: pre-wrap;
     -moz-user-focus: normal;
 }
 
+.hud-clickable {
+    cursor: pointer !important;
+    text-decoration: underline;
+}
+
 .hud-output-node .hud-network {
     color: blue;
 }
 
 .hud-output-node .hud-error {
     color: red;
 }
 
@@ -86,17 +95,17 @@
     color: red; font-weight: bold;
 }
 
 .hud-msg-node {    
     width: 100%;
     margin-top: 0.3em; 
     margin-bottom: 0.3em; 
     padding-left: 0.3em;
-    border-bottom: 1px solid #eee;   
+    /* border-bottom: 1px solid #eee; */
 }
 
 .hud-output-node {
     border-bottom: 1px solid #ddd; 
     border-top: 1px solid #ddd; 
     overflow-x: auto; overflow: auto;
     font: 1em monospace; background-color: white;
     width: 100%;
