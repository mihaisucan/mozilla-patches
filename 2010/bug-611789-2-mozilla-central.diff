diff --git a/toolkit/components/console/hudservice/HUDService.jsm b/toolkit/components/console/hudservice/HUDService.jsm
--- a/toolkit/components/console/hudservice/HUDService.jsm
+++ b/toolkit/components/console/hudservice/HUDService.jsm
@@ -1165,34 +1165,19 @@ HUD_SERVICE.prototype =
 
   /**
    * Collection of HUDIds that map to the tabs/windows/contexts
    * that a HeadsUpDisplay can be activated for.
    */
   activatedContexts: [],
 
   /**
-   * Registry of HeadsUpDisplay DOM node ids
+   * Collection of outer window IDs mapping to HUD IDs.
    */
-  _headsUpDisplays: {},
-
-  /**
-   * Mapping of HUDIds to URIspecs
-   */
-  displayRegistry: {},
-
-  /**
-   * Mapping of HUDIds to contentWindows.
-   */
-  windowRegistry: {},
-
-  /**
-   * Mapping of URISpecs to HUDIds
-   */
-  uriRegistry: {},
+  windowIds: {},
 
   /**
    * The sequencer is a generator (after initialization) that returns unique
    * integers
    */
   sequencer: null,
 
   /**
@@ -1215,19 +1200,31 @@ HUD_SERVICE.prototype =
    * Gets the top level content window that has an outer window with
    * the given ID or returns null if no such content window exists
    *
    * @param integer aId
    * @returns nsIDOMWindow
    */
   getWindowByWindowId: function HS_getWindowByWindowId(aId)
   {
+    // In the future (post-Electrolysis), getOuterWindowWithId() could
+    // return null, because the originating window could have gone away
+    // while we were in the process of receiving and/or processing a
+    // message. For future-proofing purposes, we do a null check here.
+
     let someWindow = Services.wm.getMostRecentWindow(null);
-    let windowUtils = someWindow.getInterface(Ci.nsIDOMWindowUtils);
-    return windowUtils.getOuterWindowWithId(aId);
+    let content = null;
+
+    if (someWindow) {
+      let windowUtils = someWindow.QueryInterface(Ci.nsIInterfaceRequestor)
+                                  .getInterface(Ci.nsIDOMWindowUtils);
+      content = windowUtils.getOuterWindowWithId(aId);
+    }
+
+    return content;
   },
 
   /**
    * Whether to save the bodies of network requests and responses. Disabled by
    * default to save memory.
    */
   saveRequestAndResponseBodies: false,
 
@@ -1290,23 +1287,24 @@ HUD_SERVICE.prototype =
    * @param Element aContext the tab element.
    * @param boolean aAnimated animate opening the Web Console?
    * @returns void
    */
   activateHUDForContext: function HS_activateHUDForContext(aContext, aAnimated)
   {
     this.wakeup();
 
-    var window = aContext.linkedBrowser.contentWindow;
-    var id = aContext.linkedBrowser.parentNode.parentNode.getAttribute("id");
-    this.registerActiveContext(id);
+    let window = aContext.linkedBrowser.contentWindow;
+    let nBox = aContext.ownerDocument.defaultView.
+      getNotificationBox(window);
+    this.registerActiveContext(nBox.id);
     this.windowInitializer(window);
 
     if (!aAnimated) {
-      this.disableAnimation("hud_" + id);
+      this.disableAnimation("hud_" + nBox.id);
     }
   },
 
   /**
    * Deactivate a HeadsUpDisplay for the given tab context.
    *
    * @param nsIDOMWindow aContext
    * @param aAnimated animate closing the web console?
@@ -1315,22 +1313,21 @@ HUD_SERVICE.prototype =
   deactivateHUDForContext: function HS_deactivateHUDForContext(aContext, aAnimated)
   {
     let window = aContext.linkedBrowser.contentWindow;
     let nBox = aContext.ownerDocument.defaultView.
       getNotificationBox(window);
     let hudId = "hud_" + nBox.id;
     let displayNode = nBox.querySelector("#" + hudId);
 
-    if (hudId in this.displayRegistry && displayNode) {
+    if (hudId in this.hudReferences && displayNode) {
       if (!aAnimated) {
         this.storeHeight(hudId);
       }
 
-      this.unregisterActiveContext(hudId);
       this.unregisterDisplay(displayNode);
       window.focus();
     }
   },
 
   /**
    * Clear the specified HeadsUpDisplay
    *
@@ -1578,75 +1575,29 @@ HUD_SERVICE.prototype =
    */
   registerHUDReference:
   function HS_registerHUDReference(aHUD)
   {
     this.hudReferences[aHUD.hudId] = aHUD;
   },
 
   /**
-   * Deletes a HeadsUpDisplay object from memory
+   * Register a new Heads Up Display
    *
-   * @param string aHUDId
    * @returns void
    */
-  deleteHeadsUpDisplay: function HS_deleteHeadsUpDisplay(aHUDId)
+  registerDisplay: function HS_registerDisplay(aHUDId)
   {
-    delete this.hudReferences[aHUDId];
-  },
-
-  /**
-   * Register a new Heads Up Display
-   *
-   * @param nsIDOMWindow aContentWindow
-   * @returns void
-   */
-  registerDisplay: function HS_registerDisplay(aHUDId, aContentWindow)
-  {
-    // register a display DOM node Id and HUD uriSpec with the service
-
-    if (!aHUDId || !aContentWindow){
+    // register a display DOM node Id with the service.
+    if (!aHUDId){
       throw new Error(ERRORS.MISSING_ARGS);
     }
-    var URISpec = aContentWindow.document.location.href;
     this.filterPrefs[aHUDId] = this.defaultFilterPrefs;
-    this.displayRegistry[aHUDId] = URISpec;
-
-    this._headsUpDisplays[aHUDId] = { id: aHUDId };
-
-    this.registerActiveContext(aHUDId);
     // init storage objects:
     this.storage.createDisplay(aHUDId);
-
-    var huds = this.uriRegistry[URISpec];
-    var foundHUDId = false;
-
-    if (huds) {
-      var len = huds.length;
-      for (var i = 0; i < len; i++) {
-        if (huds[i] == aHUDId) {
-          foundHUDId = true;
-          break;
-        }
-      }
-      if (!foundHUDId) {
-        this.uriRegistry[URISpec].push(aHUDId);
-      }
-    }
-    else {
-      this.uriRegistry[URISpec] = [aHUDId];
-    }
-
-    var windows = this.windowRegistry[aHUDId];
-    if (!windows) {
-      this.windowRegistry[aHUDId] = [aContentWindow];
-    }
-    else {
-      windows.push(aContentWindow);
-    }
   },
 
   /**
    * When a display is being destroyed, unregister it first
    *
    * @param string|nsIDOMNode aHUD
    *        Either the ID of a HUD or the DOM node corresponding to an outer
    *        HUD box.
@@ -1657,17 +1608,17 @@ HUD_SERVICE.prototype =
     // Remove children from the output. If the output is not cleared, there can
     // be leaks as some nodes has node.onclick = function; set and GC can't
     // remove the nodes then.
     HUDService.clearDisplay(aHUD);
 
     var id, outputNode;
     if (typeof(aHUD) === "string") {
       id = aHUD;
-      outputNode = this.mixins.getOutputNodeById(aHUD);
+      outputNode = this.getHeadsUpDisplay(aHUD);
     }
     else {
       id = aHUD.getAttribute("id");
       outputNode = aHUD;
     }
 
     // remove HUD DOM node and
     // remove display references from local registries get the outputNode
@@ -1678,51 +1629,43 @@ HUD_SERVICE.prototype =
       if (splitters[i].getAttribute("class") == "hud-splitter") {
         splitters[i].parentNode.removeChild(splitters[i]);
         break;
       }
     }
     // remove the DOM Nodes
     parent.removeChild(outputNode);
 
-    // remove our record of the DOM Nodes from the registry
-    delete this._headsUpDisplays[id];
     // remove the HeadsUpDisplay object from memory
-    this.deleteHeadsUpDisplay(id);
+    delete this.hudReferences[id];
     // remove the related storage object
     this.storage.removeDisplay(id);
-    // remove the related window objects
-    delete this.windowRegistry[id];
-
-    let displays = this.displays();
-
-    var uri  = this.displayRegistry[id];
-
-    if (this.uriRegistry[uri]) {
-      this.uriRegistry[uri] = this.uriRegistry[uri].filter(function(e) e != id);
+
+    for (let windowID in this.windowIds) {
+      if (this.windowIds[windowID] == id) {
+        delete this.windowIds[windowID];
+      }
     }
 
-    delete displays[id];
-    delete this.displayRegistry[id];
-    delete this.uriRegistry[uri];
-
-    if (Object.keys(this._headsUpDisplays).length == 0) {
+    this.unregisterActiveContext(id);
+
+    if (Object.keys(this.hudReferences).length == 0) {
       this.suspend();
     }
   },
 
   /**
    * "Wake up" the Web Console activity. This is called when the first Web
    * Console is open. This method initializes the various observers we have.
    *
    * @returns void
    */
   wakeup: function HS_wakeup()
   {
-    if (Object.keys(this._headsUpDisplays).length > 0) {
+    if (Object.keys(this.hudReferences).length > 0) {
       return;
     }
 
     this.storage = new ConsoleStorage();
     this.defaultFilterPrefs = this.storage.defaultDisplayPrefs;
     this.defaultGlobalConsolePrefs = this.storage.defaultGlobalConsolePrefs;
 
     // begin observing HTTP traffic
@@ -1756,108 +1699,76 @@ HUD_SERVICE.prototype =
 
   /**
    * Shutdown all HeadsUpDisplays on xpcom-shutdown
    *
    * @returns void
    */
   shutdown: function HS_shutdown()
   {
-    for (var displayId in this._headsUpDisplays) {
-      this.unregisterDisplay(displayId);
+    for (let hudId in this.hudReferences) {
+      this.unregisterDisplay(hudId);
     }
   },
 
   /**
    * Returns the hudId that is corresponding to the hud activated for the
    * passed aContentWindow. If there is no matching hudId null is returned.
    *
    * @param nsIDOMWindow aContentWindow
    * @returns string or null
    */
   getHudIdByWindow: function HS_getHudIdByWindow(aContentWindow)
   {
-    // Fast path: check the cached window registry.
-    for (let hudId in this.windowRegistry) {
-      if (this.windowRegistry[hudId] &&
-          this.windowRegistry[hudId].indexOf(aContentWindow) != -1) {
-        return hudId;
-      }
-    }
-
-    // As a fallback, do a little pointer chasing to try to find the Web
-    // Console. This fallback approach occurs when opening the Console on a
-    // page with subframes.
-    let [ , tabBrowser, browser ] = ConsoleUtils.getParents(aContentWindow);
-    if (!tabBrowser) {
-      return null;
-    }
-
-    let notificationBox = tabBrowser.getNotificationBox(browser);
-    let hudBox = notificationBox.querySelector(".hud-box");
-    if (!hudBox) {
-      return null;
-    }
-
-    // Cache it!
-    let hudId = hudBox.id;
-    this.windowRegistry[hudId].push(aContentWindow);
-
-    let uri = aContentWindow.document.location.href;
-    if (!this.uriRegistry[uri]) {
-      this.uriRegistry[uri] = [ hudId ];
-    } else {
-      this.uriRegistry[uri].push(hudId);
-    }
-
-    return hudId;
+    let windowId = this.getWindowId(aContentWindow);
+    return this.getHudIdByWindowId(windowId);
   },
 
   /**
-   * Gets HUD DOM Node
+   * Gets the Web Console DOM node, the .hud-box.
+   *
    * @param string id
    *        The Heads Up Display DOM Id
    * @returns nsIDOMNode
    */
   getHeadsUpDisplay: function HS_getHeadsUpDisplay(aId)
   {
-    return this.mixins.getOutputNodeById(aId);
+    return aId in this.hudReferences ? this.hudReferences[aId].HUDBox : null;
   },
 
   /**
-   * gets the nsIDOMNode outputNode by ID via the gecko app mixins
+   * Gets the Web Console DOM node, the .hud-box.
    *
    * @param string aId
    * @returns nsIDOMNode
    */
   getOutputNodeById: function HS_getOutputNodeById(aId)
   {
-    return this.mixins.getOutputNodeById(aId);
+    return this.getHeadsUpDisplay(aId);
   },
 
   /**
-   * Gets an object that contains active DOM Node Ids for all Heads Up Displays
-   *
-   * @returns object
-   */
-  displays: function HS_displays() {
-    return this._headsUpDisplays;
-  },
-
-  /**
-   * Gets an array that contains active DOM Node Ids for all HUDs
+   * Gets an array that contains all the HUD IDs.
    * @returns array
    */
   displaysIndex: function HS_displaysIndex()
   {
-    var props = [];
-    for (var prop in this._headsUpDisplays) {
-      props.push(prop);
-    }
-    return props;
+    return Object.keys(this.hudReferences);
+  },
+
+  /**
+   * Returns the hudId that is corresponding to the given outer window ID.
+   *
+   * @param number aWindowId
+   *        the outer window ID
+   * @returns string the hudId
+   */
+  getHudIdByWindowId: function HS_getHudIdByWindowId(aWindowId)
+  {
+    return this.windowIds[aWindowId];
   },
 
   /**
    * get the current filter string for the HeadsUpDisplay
    *
    * @param string aHUDId
    * @returns string
    */
@@ -1960,31 +1871,32 @@ HUD_SERVICE.prototype =
     // Warnings and legacy strict errors become warnings; other types become
     // errors.
     let severity = SEVERITY_ERROR;
     if ((aScriptError.flags & aScriptError.warningFlag) ||
         (aScriptError.flags & aScriptError.strictFlag)) {
       severity = SEVERITY_WARNING;
     }
 
-    // Sends the error to all applicable Web Consoles.
-    let hudIds = ConsoleUtils.getHUDIdsForScriptError(aScriptError);
-    for (let i = 0; i < hudIds.length; i++) {
-      let hudId = hudIds[i];
-      let outputNode = this.hudReferences[hudId].outputNode;
-      let chromeDocument = outputNode.ownerDocument;
-
-      let node = ConsoleUtils.createMessageNode(chromeDocument,
-                                                aCategory,
-                                                severity,
-                                                aScriptError.errorMessage,
-                                                aScriptError.sourceName,
-                                                aScriptError.lineNumber);
-
-      ConsoleUtils.outputMessageNode(node, hudId);
+    let window = HUDService.getWindowByWindowId(aScriptError.outerWindowID);
+    if (window) {
+      let hudId = HUDService.getHudIdByWindow(window.top);
+      if (hudId) {
+        let outputNode = this.hudReferences[hudId].outputNode;
+        let chromeDocument = outputNode.ownerDocument;
+
+        let node = ConsoleUtils.createMessageNode(chromeDocument,
+                                                  aCategory,
+                                                  severity,
+                                                  aScriptError.errorMessage,
+                                                  aScriptError.sourceName,
+                                                  aScriptError.lineNumber);
+
+        ConsoleUtils.outputMessageNode(node, hudId);
+      }
     }
   },
 
   /**
    * Register a Gecko app's specialized ApplicationHooks object
    *
    * @returns void or throws "UNSUPPORTED APPLICATION" error
    */
@@ -2091,17 +2003,17 @@ HUD_SERVICE.prototype =
               activityDistributor.ACTIVITY_SUBTYPE_REQUEST_HEADER ) {
             // Try to get the source window of the request.
             let win = NetworkHelper.getWindowForRequest(aChannel);
             if (!win) {
               return;
             }
 
             // Try to get the hudId that is associated to the window.
-            hudId = self.getHudIdByWindow(win);
+            hudId = self.getHudIdByWindow(win.top);
             if (!hudId) {
               return;
             }
 
             // The httpActivity object will hold all information concerning
             // this request and later response.
 
             let httpActivity = {
@@ -2556,17 +2468,17 @@ HUD_SERVICE.prototype =
     let nBox = gBrowser.getNotificationBox(_browser);
     let nBoxId = nBox.getAttribute("id");
     let hudId = "hud_" + nBoxId;
 
     if (!this.canActivateContext(hudId)) {
       return;
     }
 
-    this.registerDisplay(hudId, aContentWindow);
+    this.registerDisplay(hudId);
 
     let hudNode;
     let childNodes = nBox.childNodes;
 
     for (let i = 0; i < childNodes.length; i++) {
       let id = childNodes[i].getAttribute("id");
       // `id` is a string with the format "hud_<number>".
       if (id.split("_")[0] == "hud") {
@@ -2581,16 +2493,18 @@ HUD_SERVICE.prototype =
       // get nBox object and call new HUD
       let config = { parentNode: nBox,
                      contentWindow: aContentWindow
                    };
 
       hud = new HeadsUpDisplay(config);
 
       HUDService.registerHUDReference(hud);
+      let windowId = this.getWindowId(aContentWindow.top);
+      this.windowIds[windowId] = hudId;
     }
     else {
       hud = this.hudReferences[hudId];
       if (aContentWindow == aContentWindow.top) {
         // TODO: name change?? doesn't actually re-attach the console
         hud.reattachConsole(aContentWindow);
       }
     }
@@ -4673,61 +4587,25 @@ JSTermFirefoxMixin.prototype = {
  * Firefox-specific Application Hooks.
  * Each Gecko-based application will need an object like this in
  * order to use the Heads Up Display
  */
 function FirefoxApplicationHooks()
 { }
 
 FirefoxApplicationHooks.prototype = {
-
-  /**
-   * Firefox-specific method for getting an array of chrome Window objects
-   */
-  get chromeWindows()
-  {
-    var windows = [];
-    var enumerator = Services.ww.getWindowEnumerator(null);
-    while (enumerator.hasMoreElements()) {
-      windows.push(enumerator.getNext());
-    }
-    return windows;
-  },
-
-  /**
-   * Firefox-specific method for getting the DOM node (per tab) that message
-   * nodes are appended to.
-   * @param aId
-   *        The DOM node's id.
-   */
-  getOutputNodeById: function FAH_getOutputNodeById(aId)
-  {
-    if (!aId) {
-      throw new Error("FAH_getOutputNodeById: id is null!!");
-    }
-    var enumerator = Services.ww.getWindowEnumerator(null);
-    while (enumerator.hasMoreElements()) {
-      let window = enumerator.getNext();
-      let node = window.document.getElementById(aId);
-      if (node) {
-        return node;
-      }
-    }
-    throw new Error("Cannot get outputNode by id");
-  },
-
   /**
    * gets the current contentWindow (Firefox-specific)
    *
    * @returns nsIDOMWindow
    */
   getCurrentContext: function FAH_getCurrentContext()
   {
     return Services.wm.getMostRecentWindow("navigator:browser");
-  }
+  },
 };
 
 //////////////////////////////////////////////////////////////////////////////
 // Utility functions used by multiple callers
 //////////////////////////////////////////////////////////////////////////////
 
 /**
  * ConsoleUtils: a collection of globally used functions
@@ -5047,89 +4925,16 @@ ConsoleUtils = {
 
     // Remove all but the last path component.
     let slashIndex = aSourceURL.lastIndexOf("/");
     if (slashIndex > -1) {
       aSourceURL = aSourceURL.substring(slashIndex + 1);
     }
 
     return aSourceURL;
-  },
-
-  /**
-   * Given an instance of nsIScriptError, attempts to work out the IDs of HUDs
-   * to which the script should be sent.
-   *
-   * @param nsIScriptError aScriptError
-   *        The script error that was received.
-   * @returns Array<string>
-   */
-  getHUDIdsForScriptError:
-  function ConsoleUtils_getHUDIdsForScriptError(aScriptError) {
-    if (aScriptError instanceof Ci.nsIScriptError2) {
-      let windowID = aScriptError.outerWindowID;
-      if (windowID) {
-        // We just need some arbitrary window here so that we can GI to
-        // nsIDOMWindowUtils...
-        let someWindow = Services.wm.getMostRecentWindow(null);
-        if (someWindow) {
-          let windowUtils = someWindow.QueryInterface(Ci.nsIInterfaceRequestor)
-                                      .getInterface(Ci.nsIDOMWindowUtils);
-
-          // In the future (post-Electrolysis), getOuterWindowWithId() could
-          // return null, because the originating window could have gone away
-          // while we were in the process of receiving and/or processing a
-          // message. For future-proofing purposes, we do a null check here.
-          let content = windowUtils.getOuterWindowWithId(windowID);
-          if (content) {
-            let hudId = HUDService.getHudIdByWindow(content);
-            if (hudId) {
-              return [ hudId ];
-            }
-          }
-        }
-      }
-    }
-
-    // The error had no window ID. As a less precise fallback, see whether we
-    // can find some consoles to send to via the URI.
-    let hudIds = HUDService.uriRegistry[aScriptError.sourceName];
-    return hudIds ? hudIds : [];
-  },
-
-  /**
-   * Returns the chrome window, the tab browser, and the browser that
-   * contain the given content window.
-   *
-   * NB: This function only works in Firefox.
-   *
-   * @param nsIDOMWindow aContentWindow
-   *        The content window to query. If this parameter is not a content
-   *        window, then [ null, null, null ] will be returned.
-   */
-  getParents: function ConsoleUtils_getParents(aContentWindow) {
-    let chromeEventHandler =
-      aContentWindow.QueryInterface(Ci.nsIInterfaceRequestor)
-                    .getInterface(Ci.nsIWebNavigation)
-                    .QueryInterface(Ci.nsIDocShell)
-                    .chromeEventHandler;
-    if (!chromeEventHandler) {
-      return [ null, null, null ];
-    }
-
-    let chromeWindow = chromeEventHandler.ownerDocument.defaultView;
-    let gBrowser = XPCNativeWrapper.unwrap(chromeWindow).gBrowser;
-    let documentElement = chromeWindow.document.documentElement;
-    if (!documentElement || !gBrowser ||
-        documentElement.getAttribute("windowtype") !== "navigator:browser") {
-      // Not a browser window.
-      return [ chromeWindow, null, null ];
-    }
-
-    return [ chromeWindow, gBrowser, chromeEventHandler ];
   }
 };
 
 //////////////////////////////////////////////////////////////////////////
 // HeadsUpDisplayUICommands
 //////////////////////////////////////////////////////////////////////////
 
 HeadsUpDisplayUICommands = {
@@ -5687,18 +5492,21 @@ HUDConsoleObserver = {
 
   observe: function HCO_observe(aSubject, aTopic, aData)
   {
     if (aTopic == "xpcom-shutdown") {
       this.uninit();
       return;
     }
 
-    if (!(aSubject instanceof Ci.nsIScriptError))
+    if (!(aSubject instanceof Ci.nsIScriptError) ||
+        !(aSubject instanceof Ci.nsIScriptError2) ||
+        !aSubject.outerWindowID) {
       return;
+    }
 
     switch (aSubject.category) {
       // We ignore chrome-originating errors as we only
       // care about content.
       case "XPConnect JavaScript":
       case "component javascript":
       case "chrome javascript":
       case "chrome registration":
diff --git a/toolkit/components/console/hudservice/tests/browser/browser_webconsole_bug_581231_close_button.js b/toolkit/components/console/hudservice/tests/browser/browser_webconsole_bug_581231_close_button.js
--- a/toolkit/components/console/hudservice/tests/browser/browser_webconsole_bug_581231_close_button.js
+++ b/toolkit/components/console/hudservice/tests/browser/browser_webconsole_bug_581231_close_button.js
@@ -30,15 +30,15 @@ function testCloseButton() {
     let closeButton = hudBox.querySelector(".webconsole-close-button");
     ok(closeButton != null, "we have the close button");
 
     // XXX: ASSERTION: ###!!! ASSERTION: XPConnect is being called on a scope without a 'Components' property!: 'Error', file /home/ddahl/code/moz/mozilla-central/mozilla-central/js/src/xpconnect/src/xpcwrappednativescope.cpp, line 795
 
     EventUtils.synthesizeMouse(closeButton, 0, 0, {});
 
     executeSoon(function (){
-      ok(!(hudId in HUDService.windowRegistry), "the console is closed when " +
+      ok(!(hudId in HUDService.hudReferences), "the console is closed when " +
          "the close button is pressed");
       closeButton = null;
       finishTest();
     });
   });
 }
diff --git a/toolkit/components/console/hudservice/tests/browser/browser_webconsole_display_accessors.js b/toolkit/components/console/hudservice/tests/browser/browser_webconsole_display_accessors.js
--- a/toolkit/components/console/hudservice/tests/browser/browser_webconsole_display_accessors.js
+++ b/toolkit/components/console/hudservice/tests/browser/browser_webconsole_display_accessors.js
@@ -48,18 +48,16 @@ function test() {
 }
 
 function testDisplayAccessors() {
   browser.removeEventListener("DOMContentLoaded", testDisplayAccessors,
                               false);
 
   openConsole();
 
-  var allHuds = HUDService.displays();
-  ok(typeof allHuds == "object", "allHuds is an object");
   var idx = HUDService.displaysIndex();
 
   let hudId = idx[0];
 
   ok(typeof idx == "object", "displays is an object");
   ok(typeof idx.push == "function", "displaysIndex is an array");
 
   var len = idx.length;
diff --git a/toolkit/components/console/hudservice/tests/browser/browser_webconsole_registries.js b/toolkit/components/console/hudservice/tests/browser/browser_webconsole_registries.js
--- a/toolkit/components/console/hudservice/tests/browser/browser_webconsole_registries.js
+++ b/toolkit/components/console/hudservice/tests/browser/browser_webconsole_registries.js
@@ -52,18 +52,16 @@ function testRegistries() {
   browser.removeEventListener("DOMContentLoaded", testRegistries, false);
 
   openConsole();
 
   var displaysIdx = HUDService.displaysIndex();
   ok(displaysIdx.length == 1, "one display id found");
 
   var display = displaysIdx[0];
-  var registry = HUDService.displayRegistry;
-  var uri = registry[display];
-  ok(registry[display], "we have a URI: " + registry[display]);
+  ok(HUDService.hudReferences[display], "we have a HUD");
 
-  var uriRegistry = HUDService.uriRegistry;
-  ok(uriRegistry[uri].length == 1, "uri registry is working");
+  let windowID = HUDService.getWindowId(content);
+  is(HUDService.windowIds[windowID], display, "windowIds is working");
 
   finishTest();
 }
 
