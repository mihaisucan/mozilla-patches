diff --git a/toolkit/components/console/hudservice/HUDService.jsm b/toolkit/components/console/hudservice/HUDService.jsm
--- a/toolkit/components/console/hudservice/HUDService.jsm
+++ b/toolkit/components/console/hudservice/HUDService.jsm
@@ -1759,16 +1759,22 @@ HUD_SERVICE.prototype =
     for (let windowID in this.windowIds) {
       if (this.windowIds[windowID] == id) {
         delete this.windowIds[windowID];
       }
     }
 
     this.unregisterActiveContext(id);
 
+    let popupset = outputNode.ownerDocument.getElementById("mainPopupSet");
+    let panels = popupset.querySelectorAll("panel[hudId=" + id + "]");
+    for (let i = 0; i < panels.length; i++) {
+      panels[i].hidePopup();
+    }
+
     let id = ConsoleUtils.supString(id);
     Services.obs.notifyObservers(id, "web-console-destroyed", null);
 
     if (Object.keys(this.hudReferences).length == 0) {
       this.suspend();
     }
   },
 
@@ -2126,16 +2132,17 @@ HUD_SERVICE.prototype =
     let doc = aNode.ownerDocument;
     let parent = doc.getElementById("mainPopupSet");
     let netPanel = new NetworkPanel(parent, aHttpActivity);
     netPanel.linkNode = aNode;
 
     let panel = netPanel.panel;
     panel.openPopup(aNode, "after_pointer", 0, 0, false, false);
     panel.sizeTo(450, 500);
+    panel.setAttribute("hudId", aHttpActivity.hudId);
     aHttpActivity.panels.push(Cu.getWeakReference(netPanel));
     return netPanel;
   },
 
   /**
    * Begin observing HTTP traffic that we care about,
    * namely traffic that originates inside any context that a Heads Up Display
    * is active for.
@@ -3912,17 +3919,18 @@ function JSTermHelper(aJSTerm)
    *
    * @param object aObject
    *        Object to inspect.
    * @returns void
    */
   aJSTerm.sandbox.inspect = function JSTH_inspect(aObject)
   {
     aJSTerm.helperEvaluated = true;
-    aJSTerm.openPropertyPanel(null, unwrap(aObject));
+    let propPanel = aJSTerm.openPropertyPanel(null, unwrap(aObject));
+    propPanel.panel.setAttribute("hudId", aJSTerm.hudId);
   };
 
   /**
    * Prints aObject to the output.
    *
    * @param object aObject
    *        Object to print to the output.
    * @returns void
@@ -4237,17 +4245,18 @@ JSTerm.prototype = {
     node.addEventListener("click", function(aEvent) {
       if (aEvent.detail != 1 || aEvent.button != 0 ||
           (this._startX != aEvent.clientX &&
            this._startY != aEvent.clientY)) {
         return;
       }
 
       if (!this._panelOpen) {
-        self.openPropertyPanel(aEvalString, aOutputObject, this);
+        let propPanel = self.openPropertyPanel(aEvalString, aOutputObject, this);
+        propPanel.panel.setAttribute("hudId", self.hudId);
         this._panelOpen = true;
       }
     }, false);
 
     ConsoleUtils.outputMessageNode(node, this.hudId);
   },
 
   /**
diff --git a/toolkit/components/console/hudservice/tests/browser/Makefile.in b/toolkit/components/console/hudservice/tests/browser/Makefile.in
--- a/toolkit/components/console/hudservice/tests/browser/Makefile.in
+++ b/toolkit/components/console/hudservice/tests/browser/Makefile.in
@@ -121,16 +121,18 @@ _BROWSER_TEST_FILES = \
 	browser_webconsole_bug_613642_maintain_scroll.js \
 	browser_webconsole_bug_613642_prune_scroll.js \
 	browser_webconsole_bug_618078_network_exceptions.js \
 	browser_webconsole_bug_613280_jsterm_copy.js \
 	browser_webconsole_bug_630733_response_redirect_headers.js \
 	browser_webconsole_bug_621644_jsterm_dollar.js \
 	browser_webconsole_bug_632817.js \
 	browser_webconsole_bug_611795.js \
+	browser_webconsole_bug_618311_close_panels.js \
+	browser_webconsole_bug_618311_private_browsing.js \
 	head.js \
 	$(NULL)
 
 _BROWSER_TEST_PAGES = \
 	test-console.html \
 	test-network.html \
 	test-network-request.html \
 	test-mutation.html \
diff --git a/toolkit/components/console/hudservice/tests/browser/browser_webconsole_bug_581231_close_button.js b/toolkit/components/console/hudservice/tests/browser/browser_webconsole_bug_581231_close_button.js
--- a/toolkit/components/console/hudservice/tests/browser/browser_webconsole_bug_581231_close_button.js
+++ b/toolkit/components/console/hudservice/tests/browser/browser_webconsole_bug_581231_close_button.js
@@ -27,18 +27,20 @@ function testCloseButton() {
 
   HUDService.disableAnimation(hudId);
   executeSoon(function() {
     let closeButton = hudBox.querySelector(".webconsole-close-button");
     ok(closeButton != null, "we have the close button");
 
     // XXX: ASSERTION: ###!!! ASSERTION: XPConnect is being called on a scope without a 'Components' property!: 'Error', file /home/ddahl/code/moz/mozilla-central/mozilla-central/js/src/xpconnect/src/xpcwrappednativescope.cpp, line 795
 
-    EventUtils.synthesizeMouse(closeButton, 0, 0, {});
+    closeButton.addEventListener("command", function() {
+      closeButton.removeEventListener("command", arguments.callee, false);
 
-    executeSoon(function (){
       ok(!(hudId in HUDService.hudReferences), "the console is closed when " +
          "the close button is pressed");
       closeButton = null;
       finishTest();
-    });
+    }, false);
+
+    EventUtils.synthesizeMouse(closeButton, 2, 2, {});
   });
 }
diff --git a/toolkit/components/console/hudservice/tests/browser/browser_webconsole_bug_618311_close_panels.js b/toolkit/components/console/hudservice/tests/browser/browser_webconsole_bug_618311_close_panels.js
new file mode 100644
--- /dev/null
+++ b/toolkit/components/console/hudservice/tests/browser/browser_webconsole_bug_618311_close_panels.js
@@ -0,0 +1,123 @@
+/* vim:set ts=2 sw=2 sts=2 et: */
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is Web Console test suite.
+ *
+ * The Initial Developer of the Original Code is
+ * Mozilla Corporation.
+ * Portions created by the Initial Developer are Copyright (C) 2011
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Mihai Sucan <mihai.sucan@gmail.com>
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+const TEST_URI = "http://example.com/browser/toolkit/components/console/hudservice/tests/browser/test-console.html";
+
+function test() {
+  addTab(TEST_URI);
+  browser.addEventListener("load", function() {
+    browser.removeEventListener("load", arguments.callee, true);
+
+    openConsole();
+    content.location.reload();
+    browser.addEventListener("load", tabLoaded, true);
+  }, true);
+}
+
+function tabLoaded() {
+  browser.removeEventListener("load", tabLoaded, true);
+
+  let hudId = HUDService.getHudIdByWindow(content);
+  let HUD = HUDService.hudReferences[hudId];
+
+  HUD.jsterm.execute("document");
+
+  let networkMessage = HUD.outputNode.querySelector(".webconsole-msg-network");
+  ok(networkMessage, "found network message");
+
+  let networkLink = networkMessage.querySelector(".webconsole-msg-link");
+  ok(networkLink, "found network message link");
+
+  let jstermMessage = HUD.outputNode.querySelector(".webconsole-msg-output");
+  ok(jstermMessage, "found output message");
+
+  let popupset = document.getElementById("mainPopupSet");
+  ok(popupset, "found #mainPopupSet");
+
+  let popupsShown = 0;
+  let hiddenPopups = 0;
+
+  let onpopupshown = function() {
+    popupsShown++;
+    if (popupsShown == 2) {
+      document.removeEventListener("popupshown", onpopupshown, false);
+
+      executeSoon(function() {
+        let popups = popupset.querySelectorAll("panel[hudId=" + hudId + "]");
+        is(popups.length, 2, "found two popups");
+
+        document.addEventListener("popuphidden", onpopuphidden, false);
+
+        registerCleanupFunction(function() {
+          is(hiddenPopups, 2, "correct number of popups hidden");
+          if (hiddenPopups != 2) {
+            document.removeEventListener("popuphidden", onpopuphidden, false);
+          }
+        });
+
+        executeSoon(closeConsole);
+      });
+    }
+  };
+
+  let onpopuphidden = function() {
+    hiddenPopups++;
+    if (hiddenPopups == 2) {
+      document.removeEventListener("popuphidden", onpopuphidden, false);
+
+      executeSoon(function() {
+        let popups = popupset.querySelectorAll("panel[hudId=" + hudId + "]");
+        is(popups.length, 0, "no popups found");
+
+        executeSoon(finishTest);
+      });
+    }
+  };
+
+  document.addEventListener("popupshown", onpopupshown, false);
+
+  registerCleanupFunction(function() {
+    is(popupsShown, 2, "correct number of popups shown");
+    if (popupsShown != 2) {
+      document.removeEventListener("popupshown", onpopupshown, false);
+    }
+  });
+
+  EventUtils.synthesizeMouse(networkLink, 2, 2, {});
+  EventUtils.synthesizeMouse(jstermMessage, 2, 2, {});
+}
diff --git a/toolkit/components/console/hudservice/tests/browser/browser_webconsole_bug_618311_private_browsing.js b/toolkit/components/console/hudservice/tests/browser/browser_webconsole_bug_618311_private_browsing.js
new file mode 100644
--- /dev/null
+++ b/toolkit/components/console/hudservice/tests/browser/browser_webconsole_bug_618311_private_browsing.js
@@ -0,0 +1,162 @@
+/* vim:set ts=2 sw=2 sts=2 et: */
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is Web Console test suite.
+ *
+ * The Initial Developer of the Original Code is
+ * Mozilla Corporation.
+ * Portions created by the Initial Developer are Copyright (C) 2011
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Mihai Sucan <mihai.sucan@gmail.com>
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+const TEST_URI = "http://example.com/browser/toolkit/components/console/hudservice/tests/browser/test-console.html";
+
+let pb = Cc["@mozilla.org/privatebrowsing;1"].
+         getService(Ci.nsIPrivateBrowsingService);
+
+function test() {
+  addTab("data:text/html,Web Console test for bug 618311 (private browsing)");
+
+  browser.addEventListener("load", function() {
+    browser.removeEventListener("load", arguments.callee, true);
+
+    registerCleanupFunction(function() {
+      pb.privateBrowsingEnabled = false;
+      pb = null;
+    });
+
+    ok(!pb.privateBrowsingEnabled, "private browsing is not enabled");
+
+    togglePBAndThen(function() {
+      ok(pb.privateBrowsingEnabled, "private browsing is enabled");
+
+      HUDService.activateHUDForContext(gBrowser.selectedTab);
+      content.location = TEST_URI;
+      gBrowser.selectedBrowser.addEventListener("load", tabLoaded, true);
+    });
+  }, true);
+}
+
+function tabLoaded() {
+  gBrowser.selectedBrowser.removeEventListener("load", tabLoaded, true);
+
+  let hudId = HUDService.getHudIdByWindow(content);
+  let HUD = HUDService.hudReferences[hudId];
+
+  HUD.jsterm.execute("document");
+
+  let networkMessage = HUD.outputNode.querySelector(".webconsole-msg-network");
+  ok(networkMessage, "found network message");
+
+  let networkLink = networkMessage.querySelector(".webconsole-msg-link");
+  ok(networkLink, "found network message link");
+
+  let jstermMessage = HUD.outputNode.querySelector(".webconsole-msg-output");
+  ok(jstermMessage, "found output message");
+
+  let popupset = document.getElementById("mainPopupSet");
+  ok(popupset, "found #mainPopupSet");
+
+  let popupsShown = 0;
+  let hiddenPopups = 0;
+
+  let onpopupshown = function() {
+    popupsShown++;
+    if (popupsShown == 2) {
+      document.removeEventListener("popupshown", onpopupshown, false);
+
+      executeSoon(function() {
+        // Make sure the two panels are open.
+        let popups = popupset.querySelectorAll("panel[hudId=" + hudId + "]");
+        is(popups.length, 2, "found two popups");
+
+        document.addEventListener("popuphidden", onpopuphidden, false);
+
+        registerCleanupFunction(function() {
+          is(hiddenPopups, 2, "correct number of popups hidden");
+          if (hiddenPopups != 2) {
+            document.removeEventListener("popuphidden", onpopuphidden, false);
+          }
+        });
+
+        // Now toggle private browsing off. We expect the panels to close.
+        pb.privateBrowsingEnabled = !pb.privateBrowsingEnabled;
+      });
+    }
+  };
+
+  let onpopuphidden = function(aEvent) {
+    // Skip popups that are not opened by the Web Console.
+    if (!aEvent.target.hasAttribute("hudId")) {
+      return;
+    }
+
+    hiddenPopups++;
+    if (hiddenPopups == 2) {
+      document.removeEventListener("popuphidden", onpopuphidden, false);
+
+      executeSoon(function() {
+        let popups = popupset.querySelectorAll("panel[hudId=" + hudId + "]");
+        is(popups.length, 0, "no popups found");
+
+        ok(!pb.privateBrowsingEnabled, "private browsing is not enabled");
+
+        executeSoon(finishTest);
+      });
+    }
+  };
+
+  document.addEventListener("popupshown", onpopupshown, false);
+
+  registerCleanupFunction(function() {
+    is(popupsShown, 2, "correct number of popups shown");
+    if (popupsShown != 2) {
+      document.removeEventListener("popupshown", onpopupshown, false);
+    }
+  });
+
+  // Show the network and object inspector panels.
+  EventUtils.synthesizeMouse(networkLink, 2, 2, {});
+  EventUtils.synthesizeMouse(jstermMessage, 2, 2, {});
+}
+
+function togglePBAndThen(callback) {
+  function pbObserver(aSubject, aTopic, aData) {
+    if (aTopic != "private-browsing-transition-complete") {
+      return;
+    }
+
+    Services.obs.removeObserver(pbObserver, "private-browsing-transition-complete");
+    afterAllTabsLoaded(callback);
+  }
+
+  Services.obs.addObserver(pbObserver, "private-browsing-transition-complete", false);
+  pb.privateBrowsingEnabled = !pb.privateBrowsingEnabled;
+}
diff --git a/toolkit/components/console/hudservice/tests/browser/head.js b/toolkit/components/console/hudservice/tests/browser/head.js
--- a/toolkit/components/console/hudservice/tests/browser/head.js
+++ b/toolkit/components/console/hudservice/tests/browser/head.js
@@ -77,16 +77,40 @@ let win = gBrowser.selectedBrowser;
 function addTab(aURL)
 {
   gBrowser.selectedTab = gBrowser.addTab();
   content.location = aURL;
   tab = gBrowser.selectedTab;
   browser = gBrowser.getBrowserForTab(tab);
 }
 
+function afterAllTabsLoaded(callback, win) {
+  win = win || window;
+
+  let stillToLoad = 0;
+
+  function onLoad() {
+    this.removeEventListener("load", onLoad, true);
+    stillToLoad--;
+    if (!stillToLoad)
+      callback();
+  }
+
+  for (let a = 0; a < win.gBrowser.tabs.length; a++) {
+    let browser = win.gBrowser.tabs[a].linkedBrowser;
+    if (browser.contentDocument.readyState != "complete") {
+      stillToLoad++;
+      browser.addEventListener("load", onLoad, true);
+    }
+  }
+
+  if (!stillToLoad)
+    callback();
+}
+
 /**
  * Check if a log entry exists in the HUD output node.
  *
  * @param {Element} aOutputNode
  *        the HUD output node.
  * @param {string} aMatchString
  *        the string you want to check if it exists in the output node.
  * @param {string} aMsg
