diff --git a/browser/app/profile/firefox.js b/browser/app/profile/firefox.js
--- a/browser/app/profile/firefox.js
+++ b/browser/app/profile/firefox.js
@@ -1000,19 +1000,21 @@ pref("services.sync.prefs.sync.security.
 pref("services.sync.prefs.sync.security.warn_leaving_secure", true);
 pref("services.sync.prefs.sync.security.warn_submit_insecure", true);
 pref("services.sync.prefs.sync.security.warn_viewing_mixed", true);
 pref("services.sync.prefs.sync.signon.rememberSignons", true);
 pref("services.sync.prefs.sync.spellchecker.dictionary", true);
 pref("services.sync.prefs.sync.xpinstall.whitelist.required", true);
 #endif
 
-// Disable the error console and inspector
+// Disable the error console
 pref("devtools.errorconsole.enabled", false);
-pref("devtools.inspector.enabled", false);
+
+// Enable the Inspector
+pref("devtools.inspector.enabled", true);
 
 // Enable the Scratchpad tool.
 pref("devtools.scratchpad.enabled", true);
 
 // Enable tools for Chrome development.
 pref("devtools.chrome.enabled", false);
 
 // The last Web Console height. This is initially 0 which means that the Web
diff --git a/browser/base/content/browser.xul b/browser/base/content/browser.xul
--- a/browser/base/content/browser.xul
+++ b/browser/base/content/browser.xul
@@ -219,25 +219,16 @@
                 class="editBookmarkPanelBottomButton"
                 label="&editBookmark.done.label;"
                 default="true"
                 oncommand="StarUI.panel.hidePopup();"/>
 #endif
       </hbox>
     </panel>
 
-    <panel id="highlighter-panel"
-           hidden="true"
-           ignorekeys="true"
-           noautofocus="true"
-           noautohide="true"
-           onclick="InspectorUI.stopInspecting();"
-           onmousemove="InspectorUI.highlighter.handleMouseMove(event);"
-           onMozMousePixelScroll="InspectorUI.highlighter.handlePixelScroll(event);"/>
-
     <panel id="inspector-tree-panel"
            orient="vertical"
            hidden="true"
            ignorekeys="true"
            noautofocus="true"
            noautohide="true"
            titlebar="normal"
            close="true"
@@ -1028,14 +1019,20 @@
       <svg:rect x="6" y="1" width="5" height="5" fill="white"/>
       <svg:circle cx="11" cy="6" r="5"/>
       <svg:rect x="0" y="0" width="12" height="1" fill="white"/>
     </svg:mask>
   </svg:svg>
 #endif
 
 </vbox>
+# <iframe id="highlighter-frame"
+#   transparent="true"
+#   type="content"
+#   src="chrome://content/base/highlighter.html"/> is dynamically appended as
+#     the last child of #tab-view-deck, only when it is needed, for minimal
+#     performance impact.
 # <iframe id="tab-view"> is dynamically appended as the 2nd child of #tab-view-deck.
 #     Introducing the iframe dynamically, as needed, was found to be better than
 #     starting with an empty iframe here in browser.xul from a Ts standpoint.
 </deck>
 
 </window>
diff --git a/browser/base/content/highlighter.xhtml b/browser/base/content/highlighter.xhtml
new file mode 100644
--- /dev/null
+++ b/browser/base/content/highlighter.xhtml
@@ -0,0 +1,63 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html>
+<!-- ***** BEGIN LICENSE BLOCK *****
+   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
+   -
+   - The contents of this file are subject to the Mozilla Public License Version
+   - 1.1 (the "License"); you may not use this file except in compliance with
+   - the License. You may obtain a copy of the License at
+   - http://www.mozilla.org/MPL/
+   -
+   - Software distributed under the License is distributed on an "AS IS" basis,
+   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+   - for the specific language governing rights and limitations under the
+   - License.
+   -
+   - The Original Code is Inspector Highlighter code.
+   -
+   - The Initial Developer of the Original Code is The Mozilla Foundation.
+   - Portions created by the Initial Developer are Copyright (C) 2011
+   - the Initial Developer. All Rights Reserved.
+   -
+   - Contributor(s):
+   -   Rob Campbell <rcampbell@mozilla.com> (Original Author)
+   -   Paul Rouget <paul@mozilla.com>
+   -
+   - Alternatively, the contents of this file may be used under the terms of
+   - either the GNU General Public License Version 2 or later (the "GPL"), or
+   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+   - in which case the provisions of the GPL or the LGPL are applicable instead
+   - of those above. If you wish to allow use of your version of this file only
+   - under the terms of either the GPL or the LGPL, and not to allow others to
+   - use your version of this file under the terms of the MPL, indicate your
+   - decision by deleting the provisions above and replace them with the notice
+   - and other provisions required by the LGPL or the GPL. If you do not delete
+   - the provisions above, a recipient may use your version of this file under
+   - the terms of any one of the MPL, the GPL or the LGPL.
+   -
+   - ***** END LICENSE BLOCK ***** -->
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head>
+  <link rel="stylesheet" href="chrome://browser/skin/highlighter.css" type="text/css"/>
+</head>
+<body>
+<div id="close-button" role="button" class="clickable"/>
+
+<!--
+    To darken the page around the selected node, we use black-transparent
+    divs, organized in 3 rows, keeping the div in the middle transparent.
+-->
+<div id="veil-container">
+  <div id="veil">
+    <div id="veil-topbox" class="veil"/>
+    <div id="veil-middlebox">
+      <div id="veil-leftbox" class="veil"/>
+      <div id="veil-transparentbox"/>
+      <div id="veil-rightbox" class="veil"/>
+    </div>
+    <div id="veil-bottombox" class="veil"/>
+  </div>
+</div>
+
+</body>
+</html>
diff --git a/browser/base/content/insideOutBox.js b/browser/base/content/insideOutBox.js
--- a/browser/base/content/insideOutBox.js
+++ b/browser/base/content/insideOutBox.js
@@ -187,22 +187,29 @@ InsideOutBox.prototype =
    * @param aObject
    *        The object node to select.
    * @param makeBoxVisible
    *        Boolean. Open the object box in the tree?
    * @param forceOpen
    *        Force the object box open by expanding all elements in the tree?
    * @param scrollIntoView
    *        Scroll the objectBox into view?
-   * @returns objectBox
+   * @returns nsIDOMNode|null
+   *          A DOM node that represents the "object box", the element that
+   *          holds/displays the given aObject representation in the tree. If
+   *          the object cannot be selected, if it is a stale object, null is
+   *          returned.
    */
   select:
   function IOBox_select(aObject, makeBoxVisible, forceOpen, scrollIntoView)
   {
     let objectBox = this.createObjectBox(aObject);
+    if (!objectBox) {
+      return null;
+    }
     this.selectObjectBox(objectBox, forceOpen);
     if (makeBoxVisible) {
       this.openObjectBox(objectBox);
       if (scrollIntoView) {
         objectBox.scrollIntoView(true);
       }
     }
     return objectBox;
diff --git a/browser/base/content/inspector.js b/browser/base/content/inspector.js
--- a/browser/base/content/inspector.js
+++ b/browser/base/content/inspector.js
@@ -20,16 +20,17 @@
  * The Mozilla Foundation.
  * Portions created by the Initial Developer are Copyright (C) 2010
  * the Initial Developer. All Rights Reserved.
  *
  * Contributor(s):
  *   Rob Campbell <rcampbell@mozilla.com> (original author)
  *   Mihai È˜ucan <mihai.sucan@gmail.com>
  *   Julian Viereck <jviereck@mozilla.com>
+ *   Paul Rouget <paul@mozilla.com>
  *
  * Alternatively, the contents of this file may be used under the terms of
  * either the GNU General Public License Version 2 or later (the "GPL"), or
  * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
  * in which case the provisions of the GPL or the LGPL are applicable instead
  * of those above. If you wish to allow use of your version of this file only
  * under the terms of either the GPL or the LGPL, and not to allow others to
  * use your version of this file under the terms of the MPL, indicate your
@@ -51,293 +52,486 @@ const INSPECTOR_INVISIBLE_ELEMENTS = {
   "link": true,
   "meta": true,
   "script": true,
   "style": true,
   "title": true,
 };
 
 ///////////////////////////////////////////////////////////////////////////
-//// PanelHighlighter
+//// IFrameHighlighter
 
 /**
- * A highlighter mechanism using xul panels.
+ * A highlighter mechanism using a transparent xul iframe.
  *
- * @param aBrowser
- *        The XUL browser object for the content window being highlighted.
+ * @param nsIDOMNode aBrowser
+ *        The xul:browser object for the content window being highlighted.
  */
-function PanelHighlighter(aBrowser)
+function IFrameHighlighter(aBrowser)
 {
-  this.panel = document.getElementById("highlighter-panel");
-  this.panel.hidden = false;
-  this.browser = aBrowser;
-  this.win = this.browser.contentWindow;
+  this._init(aBrowser);
 }
 
-PanelHighlighter.prototype = {
+IFrameHighlighter.prototype = {
+
+  _init: function IFH__init(aBrowser)
+  {
+    this.browser = aBrowser;
+    let stack = this.browser.parentNode;
+    this.win = this.browser.contentWindow;
+    this._highlighting = false;
+
+    let div = document.createElement("div");
+    div.flex = 1;
+    div.setAttribute("style", "pointer-events: none; -moz-user-focus: ignore");
+
+    let iframe = document.createElement("iframe");
+    iframe.setAttribute("id", "highlighter-frame");
+    iframe.setAttribute("transparent", "true");
+    iframe.setAttribute("type", "content");
+    iframe.addEventListener("DOMTitleChanged", function(aEvent) {
+      aEvent.stopPropagation();
+    }, true);
+    iframe.flex = 1;
+    iframe.setAttribute("style", "-moz-user-focus: ignore");
+
+    this.listenOnce(iframe, "load", (function iframeLoaded() {
+      this.iframeDoc = iframe.contentDocument;
+
+      this.veilTopDiv = this.iframeDoc.getElementById("veil-topbox");
+      this.veilLeftDiv = this.iframeDoc.getElementById("veil-leftbox");
+      this.veilMiddleDiv = this.iframeDoc.getElementById("veil-middlebox");
+      this.veilTransparentDiv = this.iframeDoc.getElementById("veil-transparentbox");
+
+      let closeButton = this.iframeDoc.getElementById("close-button");
+      this.listenOnce(closeButton, "click",
+        InspectorUI.closeInspectorUI.bind(InspectorUI, false), false);
+
+      this.browser.addEventListener("click", this, true);
+      iframe.contentWindow.addEventListener("resize", this, false);
+      this.handleResize();
+      Services.obs.notifyObservers(null, "highlighter-ready", null);
+    }).bind(this), true);
+
+    iframe.setAttribute("src", "chrome://browser/content/highlighter.xhtml");
+
+    div.appendChild(iframe);
+    stack.appendChild(div);
+    this.iframe = iframe;
+    this.iframeContainer = div;
+  },
+
+  /**
+   * Destroy the iframe and its nodes.
+   */
+  destroy: function IFH_destroy()
+  {
+    this.browser.removeEventListener("click", this, true);
+    this._highlightRect = null;
+    this._highlighting = false;
+    this.veilTopDiv = null;
+    this.veilLeftDiv = null;
+    this.veilMiddleDiv = null;
+    this.veilTransparentDiv = null;
+    this.node = null;
+    this.iframeDoc = null;
+    this.browser.parentNode.removeChild(this.iframeContainer);
+    this.iframeContainer = null;
+    this.iframe = null;
+    this.win = null
+    this.browser = null;
+  },
+
+  /**
+   * Is the highlighter highlighting? Public method for querying the state
+   * of the highlighter.
+   */
+  get isHighlighting() {
+    return this._highlighting;
+  },
 
   /**
    * Highlight this.node, unhilighting first if necessary.
    *
-   * @param scroll
+   * @param boolean aScroll
    *        Boolean determining whether to scroll or not.
    */
-  highlight: function PanelHighlighter_highlight(scroll)
+  highlight: function IFH_highlight(aScroll)
   {
     // node is not set or node is not highlightable, bail
-    if (!this.isNodeHighlightable()) {
+    if (!this.node || !this.isNodeHighlightable()) {
       return;
     }
 
-    this.unhighlight();
+    let clientRect = this.node.getBoundingClientRect();
 
-    let rect = this.node.getBoundingClientRect();
+    // clientRect is read-only, we need to be able to change properties.
+    let rect = {top: clientRect.top,
+                left: clientRect.left,
+                width: clientRect.width,
+                height: clientRect.height};
+    let oldRect = this._highlightRect;
 
-    if (scroll) {
+    if (oldRect && rect.top == oldRect.top && rect.left == oldRect.left &&
+        rect.width == oldRect.width && rect.height == oldRect.height) {
+      return; // same rectangle
+    }
+
+    if (aScroll) {
       this.node.scrollIntoView();
     }
 
-    if (this.viewContainsRect(rect)) {
-      // TODO check for offscreen boundaries, bug565301
-      this.panel.openPopup(this.node, "overlap", 0, 0, false, false);
-      this.panel.sizeTo(rect.width, rect.height);
-    } else {
-      this.highlightVisibleRegion(rect);
+    // Go up in the tree of frames to determine the correct rectangle
+    // coordinates and size.
+    let frameWin = this.node.ownerDocument.defaultView;
+    do {
+      let frameRect = frameWin.frameElement ?
+                      frameWin.frameElement.getBoundingClientRect() :
+                      {top: 0, left: 0};
+
+      if (rect.top < 0) {
+        rect.height += rect.top;
+        rect.top = 0;
+      }
+
+      if (rect.left < 0) {
+        rect.width += rect.left;
+        rect.left = 0;
+      }
+
+      let diffx = frameWin.innerWidth - rect.left - rect.width;
+      if (diffx < 0) {
+        rect.width += diffx;
+      }
+      let diffy = frameWin.innerHeight - rect.top - rect.height;
+      if (diffy < 0) {
+        rect.height += diffy;
+      }
+
+      rect.left += frameRect.left;
+      rect.top += frameRect.top;
+
+      frameWin = frameWin.parent;
+    } while (frameWin != this.win);
+
+    this.highlightRectangle(rect);
+
+    if (this._highlighting) {
+      Services.obs.notifyObservers(null, "inspector-highlighting", null);
     }
   },
 
   /**
    * Highlight the given node.
    *
-   * @param aNode
+   * @param nsIDOMNode aNode
    *        a DOM element to be highlighted
-   * @param aParams
+   * @param object aParams
    *        extra parameters object
    */
-  highlightNode: function PanelHighlighter_highlightNode(aNode, aParams)
+  highlightNode: function IFH_highlightNode(aNode, aParams)
   {
     this.node = aNode;
     this.highlight(aParams && aParams.scroll);
   },
 
   /**
-   * Highlight the visible region of the region described by aRect, if any.
+   * Highlight a rectangular region.
    *
-   * @param aRect
+   * @param object aRect
+   *        The rectangle region to highlight.
    * @returns boolean
-   *          was a region highlighted?
+   *          True if the rectangle was highlighted, false otherwise.
    */
-  highlightVisibleRegion: function PanelHighlighter_highlightVisibleRegion(aRect)
+  highlightRectangle: function IFH_highlightRectangle(aRect)
   {
-    let offsetX = 0;
-    let offsetY = 0;
-    let width = 0;
-    let height = 0;
-    let visibleWidth = this.win.innerWidth;
-    let visibleHeight = this.win.innerHeight;
+    if (aRect.left >= 0 && aRect.top >= 0 &&
+        aRect.width > 0 && aRect.height > 0) {
+      // The bottom div and the right div are flexibles (flex=1).
+      // We don't need to resize them.
+      this.veilTopDiv.style.height = aRect.top + "px";
+      this.veilLeftDiv.style.width = aRect.left + "px";
+      this.veilMiddleDiv.style.height = aRect.height + "px";
+      this.veilTransparentDiv.style.width = aRect.width + "px";
 
-    // If any of these edges are out-of-bounds, the node's rectangle is
-    // completely out-of-view and we can return.
-    if (aRect.top > visibleHeight || aRect.left > visibleWidth ||
-        aRect.bottom < 0 || aRect.right < 0) {
-      return false;
+      this._highlighting = true;
+    } else {
+      this.unhighlight();
     }
 
-    // Calculate node offsets, if values are negative, then start the offsets
-    // at their absolute values from node origin. The delta should be the edge
-    // of view.
-    offsetX = aRect.left < 0 ? Math.abs(aRect.left) : 0;
-    offsetY = aRect.top < 0 ? Math.abs(aRect.top) : 0;
+    this._highlightRect = aRect;
 
-    // Calculate actual node width, taking into account the available visible
-    // width and then subtracting the offset for the final dimension.
-    width = aRect.right > visibleWidth ? visibleWidth - aRect.left :
-      aRect.width;
-    width -= offsetX;
-
-    // Calculate actual node height using the same formula as above for width.
-    height = aRect.bottom > visibleHeight ? visibleHeight - aRect.top :
-      aRect.height;
-    height -= offsetY;
-
-    // If width and height are non-negative, open the highlighter popup over the
-    // node and sizeTo width and height.
-    if (width > 0 && height > 0) {
-      this.panel.openPopup(this.node, "overlap", offsetX, offsetY, false,
-        false);
-      this.panel.sizeTo(width, height);
-      return true;
-    }
-
-    return false;
+    return this._highlighting;
   },
 
   /**
-   * Close the highlighter panel.
+   * Clear the highlighter surface.
    */
-  unhighlight: function PanelHighlighter_unhighlight()
+  unhighlight: function IFH_unhighlight()
   {
-    if (this.isHighlighting) {
-      this.panel.hidePopup();
-    }
-  },
-
-  /**
-   * Is the highlighter panel open?
-   *
-   * @returns boolean
-   */
-  get isHighlighting()
-  {
-    return this.panel.state == "open";
+    this._highlighting = false;
+    this.veilMiddleDiv.style.height = 0;
+    this.veilTransparentDiv.style.width = 0;
+    Services.obs.notifyObservers(null, "inspector-unhighlighting", null);
   },
 
   /**
    * Return the midpoint of a line from pointA to pointB.
    *
-   * @param aPointA
+   * @param object aPointA
    *        An object with x and y properties.
-   * @param aPointB
+   * @param object aPointB
    *        An object with x and y properties.
-   * @returns aPoint
+   * @returns object
    *          An object with x and y properties.
    */
-  midPoint: function PanelHighlighter_midPoint(aPointA, aPointB)
+  midPoint: function IFH_midPoint(aPointA, aPointB)
   {
     let pointC = { };
     pointC.x = (aPointB.x - aPointA.x) / 2 + aPointA.x;
     pointC.y = (aPointB.y - aPointA.y) / 2 + aPointA.y;
     return pointC;
   },
 
   /**
    * Return the node under the highlighter rectangle. Useful for testing.
    * Calculation based on midpoint of diagonal from top left to bottom right
    * of panel.
    *
-   * @returns a DOM node or null if none
+   * @returns nsIDOMNode|null
+   *          Returns the node under the current highlighter rectangle. Null is
+   *          returned if there is no node highlighted.
    */
   get highlitNode()
   {
-    // No highlighter panel? Bail.
-    if (!this.isHighlighting) {
+    // Not highlighting? Bail.
+    if (!this._highlighting || !this._highlightRect) {
       return null;
     }
 
-    let browserRect = this.browser.getBoundingClientRect();
-    let clientRect = this.panel.getBoundingClientRect();
-
-    // Calculate top left point offset minus browser chrome.
     let a = {
-      x: clientRect.left - browserRect.left,
-      y: clientRect.top - browserRect.top
+      x: this._highlightRect.left,
+      y: this._highlightRect.top
     };
 
-    // Calculate bottom right point minus browser chrome.
     let b = {
-      x: clientRect.right - browserRect.left,
-      y: clientRect.bottom - browserRect.top
+      x: a.x + this._highlightRect.width,
+      y: a.y + this._highlightRect.height
     };
 
     // Get midpoint of diagonal line.
     let midpoint = this.midPoint(a, b);
 
     return InspectorUI.elementFromPoint(this.win.document, midpoint.x,
       midpoint.y);
   },
 
   /**
    * Is this.node highlightable?
    *
    * @returns boolean
+   *          True if the node is highlightable or false otherwise.
    */
-  isNodeHighlightable: function PanelHighlighter_isNodeHighlightable()
+  isNodeHighlightable: function IFH_isNodeHighlightable()
   {
-    if (!this.node) {
+    if (!this.node || this.node.nodeType != Node.ELEMENT_NODE) {
       return false;
     }
     let nodeName = this.node.nodeName.toLowerCase();
-    if (nodeName[0] == '#') {
-      return false;
-    }
     return !INSPECTOR_INVISIBLE_ELEMENTS[nodeName];
   },
 
-  /**
-   * Returns true if the given viewport-relative rect is within the visible area
-   * of the window.
-   *
-   * @param aRect
-   *        a CSS rectangle object
-   * @returns boolean
-   */
-  viewContainsRect: function PanelHighlighter_viewContainsRect(aRect)
-  {
-    let visibleWidth = this.win.innerWidth;
-    let visibleHeight = this.win.innerHeight;
-
-    return ((0 <= aRect.left) && (aRect.right <= visibleWidth) &&
-        (0 <= aRect.top) && (aRect.bottom <= visibleHeight))
-  },
-
   /////////////////////////////////////////////////////////////////////////
   //// Event Handling
 
+  attachInspectListeners: function IFH_attachInspectListeners()
+  {
+    this.browser.addEventListener("mousemove", this, true);
+    this.browser.addEventListener("dblclick", this, true);
+    this.browser.addEventListener("mousedown", this, true);
+    this.browser.addEventListener("mouseup", this, true);
+  },
+
+  detachInspectListeners: function IFH_detachInspectListeners()
+  {
+    this.browser.removeEventListener("mousemove", this, true);
+    this.browser.removeEventListener("dblclick", this, true);
+    this.browser.removeEventListener("mousedown", this, true);
+    this.browser.removeEventListener("mouseup", this, true);
+  },
+
+  /**
+   * Generic event handler.
+   *
+   * @param nsIDOMEvent aEvent
+   *        The DOM event object.
+   */
+  handleEvent: function IFH_handleEvent(aEvent)
+  {
+    switch (aEvent.type) {
+      case "click":
+        this.handleClick(aEvent);
+        break;
+      case "mousemove":
+        this.handleMouseMove(aEvent);
+        break;
+      case "resize":
+        this.handleResize(aEvent);
+        break;
+      case "dblclick":
+      case "mousedown":
+      case "mouseup":
+        aEvent.stopPropagation();
+        aEvent.preventDefault();
+        break;
+    }
+  },
+
+  /**
+   * Handle clicks on the iframe.
+   *
+   * @param nsIDOMEvent aEvent
+   *        The DOM event.
+   */
+  handleClick: function IFH_handleClick(aEvent)
+  {
+    // Proxy the click event to the iframe.
+    let x = aEvent.clientX;
+    let y = aEvent.clientY;
+    let frameWin = aEvent.view;
+    while (frameWin != this.win) {
+      if (frameWin.frameElement) {
+        let frameRect = frameWin.frameElement.getBoundingClientRect();
+        x += frameRect.left;
+        y += frameRect.top;
+      }
+      frameWin = frameWin.parent;
+    }
+
+    let element = this.iframeDoc.elementFromPoint(x, y);
+    if (element && element.classList &&
+        element.classList.contains("clickable")) {
+      let newEvent = this.iframeDoc.createEvent("MouseEvents");
+      newEvent.initMouseEvent(aEvent.type, aEvent.bubbles, aEvent.cancelable,
+        this.iframeDoc.defaultView, aEvent.detail, aEvent.screenX,
+        aEvent.screenY, x, y, aEvent.ctrlKey, aEvent.altKey, aEvent.shiftKey,
+        aEvent.metaKey, aEvent.button, null);
+      element.dispatchEvent(newEvent);
+      aEvent.preventDefault();
+      aEvent.stopPropagation();
+      return;
+    }
+
+    // Stop inspection when the user clicks on a node.
+    if (InspectorUI.inspecting) {
+      if (aEvent.button == 0) {
+        let win = aEvent.target.ownerDocument.defaultView;
+        InspectorUI.stopInspecting();
+        win.focus();
+      }
+      aEvent.preventDefault();
+      aEvent.stopPropagation();
+    }
+  },
+
   /**
    * Handle mousemoves in panel when InspectorUI.inspecting is true.
    *
    * @param aEvent
    *        The MouseEvent triggering the method.
    */
-  handleMouseMove: function PanelHighlighter_handleMouseMove(aEvent)
+  handleMouseMove: function IFH_handleMouseMove(aEvent)
   {
     if (!InspectorUI.inspecting) {
       return;
     }
-    let browserRect = this.browser.getBoundingClientRect();
-    let element = InspectorUI.elementFromPoint(this.win.document,
-      aEvent.clientX - browserRect.left, aEvent.clientY - browserRect.top);
+
+    let element = InspectorUI.elementFromPoint(aEvent.target.ownerDocument,
+      aEvent.clientX, aEvent.clientY);
     if (element && element != this.node) {
       InspectorUI.inspectNode(element);
     }
   },
 
   /**
-   * Handle MozMousePixelScroll in panel when InspectorUI.inspecting is true.
+   * Handle window resize events.
+   */
+  handleResize: function IFH_handleResize()
+  {
+    let style = this.iframeContainer.style;
+    if (this.win.scrollMaxY && this.win.scrollbars.visible) {
+      style.paddingRight = this.getScrollbarWidth() + "px";
+    } else {
+      style.paddingRight = 0;
+    }
+    if (this.win.scrollMaxX && this.win.scrollbars.visible) {
+      style.paddingBottom = this.getScrollbarWidth() + "px";
+    } else {
+      style.paddingBottom = 0;
+    }
+
+    this.highlight();
+  },
+
+  /**
+   * Determine the scrollbar width in the current document.
    *
-   * @param aEvent
-   *        The onMozMousePixelScrollEvent triggering the method.
+   * @returns number
+   *          The scrollbar width in pixels.
+   */
+  getScrollbarWidth: function IFH_getScrollbarWidth()
+  {
+    if (this._scrollbarWidth) {
+      return this._scrollbarWidth;
+    }
+
+    let hbox = document.createElement("hbox");
+    hbox.setAttribute("style", "height: 0%; overflow: hidden");
+
+    let scrollbar = document.createElement("scrollbar");
+    scrollbar.setAttribute("orient", "vertical");
+    hbox.appendChild(scrollbar);
+
+    document.documentElement.appendChild(hbox);
+    this._scrollbarWidth = scrollbar.clientWidth;
+    document.documentElement.removeChild(hbox);
+
+    return this._scrollbarWidth;
+  },
+
+  /**
+   * Helper to listen for an event only once.
+   *
+   * @param nsIDOMEventTarget aTarget
+   *        The DOM event target you want to add an event listener to.
+   * @param string aName
+   *        The event name you want to listen for.
+   * @param function aCallback
+   *        The function you want to execute once for the given event.
+   * @param boolean aCapturing
+   *        Tells if you want to use capture for the event listener.
    * @returns void
    */
-  handlePixelScroll: function PanelHighlighter_handlePixelScroll(aEvent) {
-    if (!InspectorUI.inspecting) {
-      return;
-    }
-    let browserRect = this.browser.getBoundingClientRect();
-    let element = InspectorUI.elementFromPoint(this.win.document,
-      aEvent.clientX - browserRect.left, aEvent.clientY - browserRect.top);
-    let win = element.ownerDocument.defaultView;
-
-    if (aEvent.axis == aEvent.HORIZONTAL_AXIS) {
-      win.scrollBy(aEvent.detail, 0);
-    } else {
-      win.scrollBy(0, aEvent.detail);
-    }
-  }
+  listenOnce: function IFH_listenOnce(aTarget, aName, aCallback, aCapturing)
+  {
+    aTarget.addEventListener(aName, function listenOnce_handler(aEvent) {
+      aTarget.removeEventListener(aName, listenOnce_handler, aCapturing);
+      aCallback.call(this, aEvent);
+    }, aCapturing);
+  },
 };
 
 ///////////////////////////////////////////////////////////////////////////
 //// InspectorUI
 
 /**
  * Main controller class for the Inspector.
  */
 var InspectorUI = {
   browser: null,
-  selectEventsSuppressed: false,
   showTextNodesWithWhitespace: false,
   inspecting: false,
   treeLoaded: false,
   prefEnabledName: "devtools.inspector.enabled",
 
   /**
    * Toggle the inspector interface elements on or off.
    *
@@ -390,26 +584,18 @@ var InspectorUI = {
     this.treeBrowserDocument = this.treeIFrame.contentDocument;
     this.treePanelDiv = this.treeBrowserDocument.createElement("div");
     this.treeBrowserDocument.body.appendChild(this.treePanelDiv);
     this.treePanelDiv.ownerPanel = this;
     this.ioBox = new InsideOutBox(this, this.treePanelDiv);
     this.ioBox.createObjectBox(this.win.document.documentElement);
     this.treeLoaded = true;
 
-    // setup highlighter and start inspecting
+    // initialize the highlighter
     this.initializeHighlighter();
-
-    // Setup the InspectorStore or restore state
-    this.initializeStore();
-
-    if (InspectorStore.getValue(this.winID, "inspecting"))
-      this.startInspecting();
-
-    this.notifyReady();
   },
 
   /**
    * Open the inspector's tree panel and initialize it.
    */
   openTreePanel: function IUI_openTreePanel()
   {
     if (!this.treePanel) {
@@ -579,30 +765,30 @@ var InspectorUI = {
     this.browser = gBrowser.selectedBrowser;
     this.win = this.browser.contentWindow;
     this.winID = this.getWindowID(this.win);
     if (!this.domplate) {
       Cu.import("resource:///modules/domplate.jsm", this);
       this.domplateUtils.setDOM(window);
     }
 
-    // open inspector UI
+-   // open inspector UI
     this.openTreePanel();
 
-    this.win.document.addEventListener("scroll", this, false);
-    this.win.addEventListener("resize", this, false);
+    this.browser.addEventListener("scroll", this, true);
     this.inspectCmd.setAttribute("checked", true);
   },
 
   /**
    * Initialize highlighter.
    */
   initializeHighlighter: function IUI_initializeHighlighter()
   {
-    this.highlighter = new PanelHighlighter(this.browser);
+    Services.obs.addObserver(this.highlighterReady, "highlighter-ready", false);
+    this.highlighter = new IFrameHighlighter(this.browser);
   },
 
   /**
    * Initialize the InspectorStore.
    */
   initializeStore: function IUI_initializeStore()
   {
     // First time opened, add the TabSelect listener
@@ -653,21 +839,21 @@ var InspectorUI = {
       }
       InspectorStore.setValue(this.winID, "inspecting", this.inspecting);
     }
 
     if (InspectorStore.isEmpty()) {
       gBrowser.tabContainer.removeEventListener("TabSelect", this, false);
     }
 
-    this.win.document.removeEventListener("scroll", this, false);
-    this.win.removeEventListener("resize", this, false);
+    this.browser.removeEventListener("scroll", this, true);
     this.stopInspecting();
-    if (this.highlighter && this.highlighter.isHighlighting) {
-      this.highlighter.unhighlight();
+    if (this.highlighter) {
+      this.highlighter.destroy();
+      this.highlighter = null;
     }
 
     if (this.treePanelDiv) {
       this.treePanelDiv.ownerPanel = null;
       let parent = this.treePanelDiv.parentNode;
       parent.removeChild(this.treePanelDiv);
       delete this.treePanelDiv;
       delete this.treeBrowserDocument;
@@ -710,22 +896,26 @@ var InspectorUI = {
   },
 
   /**
    * Stop inspecting webpage, detach page listeners, disable highlighter
    * event listeners.
    */
   stopInspecting: function IUI_stopInspecting()
   {
-    if (!this.inspecting)
+    if (!this.inspecting) {
       return;
+    }
+
     this.detachPageListeners();
     this.inspecting = false;
     if (this.highlighter.node) {
       this.select(this.highlighter.node, true, true);
+    } else {
+      this.select(null, true, true);
     }
   },
 
   /**
    * Select an object in the tree view.
    * @param aNode
    *        node to inspect
    * @param forceUpdate
@@ -735,32 +925,45 @@ var InspectorUI = {
    */
   select: function IUI_select(aNode, forceUpdate, aScroll)
   {
     if (!aNode)
       aNode = this.defaultSelection;
 
     if (forceUpdate || aNode != this.selection) {
       this.selection = aNode;
-      let box = this.ioBox.createObjectBox(this.selection);
       if (!this.inspecting) {
         this.highlighter.highlightNode(this.selection);
       }
-      this.ioBox.select(aNode, true, true, aScroll);
+      this.ioBox.select(this.selection, true, true, aScroll);
     }
   },
 
   /////////////////////////////////////////////////////////////////////////
   //// Event Handling
 
   notifyReady: function IUI_notifyReady()
   {
+    // Setup the InspectorStore or restore state
+    this.initializeStore();
+
+    if (InspectorStore.getValue(this.winID, "inspecting")) {
+      this.startInspecting();
+    }
+
+    this.win.focus();
     Services.obs.notifyObservers(null, "inspector-opened", null);
   },
 
+  highlighterReady: function IUI_highlighterReady()
+  {
+    Services.obs.removeObserver(InspectorUI.highlighterReady, "highlighter-ready", false);
+    InspectorUI.notifyReady();
+  },
+
   /**
    * Main callback handler for events.
    *
    * @param event
    *        The event to be handled.
    */
   handleEvent: function IUI_handleEvent(event)
   {
@@ -809,32 +1012,25 @@ var InspectorUI = {
         if (InspectorStore.isEmpty()) {
           gBrowser.tabContainer.removeEventListener("TabSelect", this, false);
         }
         break;
       case "keypress":
         switch (event.keyCode) {
           case KeyEvent.DOM_VK_RETURN:
           case KeyEvent.DOM_VK_ESCAPE:
-            this.stopInspecting();
+            if (this.inspecting) {
+              this.stopInspecting();
+              event.preventDefault();
+              event.stopPropagation();
+            }
             break;
         }
         break;
-      case "mousemove":
-        let element = this.elementFromPoint(event.target.ownerDocument,
-          event.clientX, event.clientY);
-        if (element && element != this.node) {
-          this.inspectNode(element);
-        }
-        break;
-      case "click":
-        this.stopInspecting();
-        break;
       case "scroll":
-      case "resize":
         this.highlighter.highlight();
         break;
     }
   },
 
   /**
    * Handle click events in the html tree panel.
    * @param aEvent
@@ -860,48 +1056,44 @@ var InspectorUI = {
   },
 
   /**
    * Attach event listeners to content window and child windows to enable
    * highlighting and click to stop inspection.
    */
   attachPageListeners: function IUI_attachPageListeners()
   {
-    this.win.addEventListener("keypress", this, true);
-    this.browser.addEventListener("mousemove", this, true);
-    this.browser.addEventListener("click", this, true);
+    this.browser.addEventListener("keypress", this, true);
+    this.highlighter.attachInspectListeners();
   },
 
   /**
    * Detach event listeners from content window and child windows
    * to disable highlighting.
    */
   detachPageListeners: function IUI_detachPageListeners()
   {
-    this.win.removeEventListener("keypress", this, true);
-    this.browser.removeEventListener("mousemove", this, true);
-    this.browser.removeEventListener("click", this, true);
+    this.browser.removeEventListener("keypress", this, true);
+    this.highlighter.detachInspectListeners();
   },
 
   /////////////////////////////////////////////////////////////////////////
   //// Utility Methods
 
   /**
    * inspect the given node, highlighting it on the page and selecting the
    * correct row in the tree panel
    *
    * @param aNode
    *        the element in the document to inspect
    */
   inspectNode: function IUI_inspectNode(aNode)
   {
+    this.select(aNode, true, true);
     this.highlighter.highlightNode(aNode);
-    this.selectEventsSuppressed = true;
-    this.select(aNode, true, true);
-    this.selectEventsSuppressed = false;
   },
 
   /**
    * Find an element from the given coordinates. This method descends through
    * frames to find the element the user clicked inside frames.
    *
    * @param DOMDocument aDocument the document to look into.
    * @param integer aX
diff --git a/browser/base/content/test/Makefile.in b/browser/base/content/test/Makefile.in
--- a/browser/base/content/test/Makefile.in
+++ b/browser/base/content/test/Makefile.in
@@ -35,17 +35,20 @@
 # ***** END LICENSE BLOCK *****
 
 DEPTH		= ../../../..
 topsrcdir	= @top_srcdir@
 srcdir		= @srcdir@
 VPATH		= @srcdir@
 relativesrcdir  = browser/base/content/test
 
-DIRS += tabview
+DIRS += \
+		tabview \
+		inspector \
+		$(NULL)
 
 include $(DEPTH)/config/autoconf.mk
 include $(topsrcdir)/config/rules.mk
 
 _TEST_FILES = \
 		test_feed_discovery.html \
 		feed_discovery.html \
 		test_bug395533.html \
@@ -178,26 +181,16 @@ _BROWSER_FILES = \
                  browser_ctrlTab.js \
                  browser_customize_popupNotification.js \
                  browser_disablechrome.js \
                  browser_discovery.js \
                  browser_duplicateIDs.js \
                  browser_gestureSupport.js \
                  browser_getshortcutoruri.js \
                  browser_hide_removing.js \
-                 browser_inspector_initialization.js \
-                 browser_inspector_treeSelection.js \
-                 browser_inspector_highlighter.js \
-                 browser_inspector_iframeTest.js \
-                 browser_inspector_scrolling.js \
-                 browser_inspector_store.js \
-                 browser_inspector_tab_switch.js \
-                 browser_inspector_treePanel_output.js \
-                 browser_inspector_treePanel_input.html \
-                 browser_inspector_treePanel_result.html \
                  browser_scratchpad_initialization.js \
                  browser_scratchpad_contexts.js \
                  browser_scratchpad_tab_switch.js \
                  browser_scratchpad_execute_print.js \
                  browser_scratchpad_inspect.js \
                  browser_scratchpad_files.js \
                  browser_scratchpad_ui.js \
                  browser_scratchpad_bug_646070_chrome_context_pref.js \
diff --git a/browser/base/content/test/browser_inspector_highlighter.js b/browser/base/content/test/browser_inspector_highlighter.js
deleted file mode 100644
--- a/browser/base/content/test/browser_inspector_highlighter.js
+++ /dev/null
@@ -1,126 +0,0 @@
-/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ts=2 et sw=2 tw=80: */
-/* ***** BEGIN LICENSE BLOCK *****
- * Version: MPL 1.1/GPL 2.0/LGPL 2.1
- *
- * The contents of this file are subject to the Mozilla Public License Version
- * 1.1 (the "License"); you may not use this file except in compliance with
- * the License. You may obtain a copy of the License at
- * http://www.mozilla.org/MPL/
- *
- * Software distributed under the License is distributed on an "AS IS" basis,
- * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
- * for the specific language governing rights and limitations under the
- * License.
- *
- * The Original Code is Inspector Highlighter Tests.
- *
- * The Initial Developer of the Original Code is
- * The Mozilla Foundation.
- * Portions created by the Initial Developer are Copyright (C) 2010
- * the Initial Developer. All Rights Reserved.
- *
- * Contributor(s):
- *   Rob Campbell <rcampbell@mozilla.com>
- *
- * Alternatively, the contents of this file may be used under the terms of
- * either the GNU General Public License Version 2 or later (the "GPL"), or
- * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
- * in which case the provisions of the GPL or the LGPL are applicable instead
- * of those above. If you wish to allow use of your version of this file only
- * under the terms of either the GPL or the LGPL, and not to allow others to
- * use your version of this file under the terms of the MPL, indicate your
- * decision by deleting the provisions above and replace them with the notice
- * and other provisions required by the GPL or the LGPL. If you do not delete
- * the provisions above, a recipient may use your version of this file under
- * the terms of any one of the MPL, the GPL or the LGPL.
- *
- * ***** END LICENSE BLOCK ***** */
-
-let doc;
-let h1;
-
-function createDocument()
-{
-  let div = doc.createElement("div");
-  let h1 = doc.createElement("h1");
-  let p1 = doc.createElement("p");
-  let p2 = doc.createElement("p");
-  let div2 = doc.createElement("div");
-  let p3 = doc.createElement("p");
-  doc.title = "Inspector Tree Selection Test";
-  h1.textContent = "Inspector Tree Selection Test";
-  p1.textContent = "This is some example text";
-  p2.textContent = "Lorem ipsum dolor sit amet, consectetur adipisicing " +
-    "elit, sed do eiusmod tempor incididunt ut labore et dolore magna " +
-    "aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco " +
-    "laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure " +
-    "dolor in reprehenderit in voluptate velit esse cillum dolore eu " +
-    "fugiat nulla pariatur. Excepteur sint occaecat cupidatat non " +
-    "proident, sunt in culpa qui officia deserunt mollit anim id est laborum.";
-  p3.textContent = "Lorem ipsum dolor sit amet, consectetur adipisicing " +
-    "elit, sed do eiusmod tempor incididunt ut labore et dolore magna " +
-    "aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco " +
-    "laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure " +
-    "dolor in reprehenderit in voluptate velit esse cillum dolore eu " +
-    "fugiat nulla pariatur. Excepteur sint occaecat cupidatat non " +
-    "proident, sunt in culpa qui officia deserunt mollit anim id est laborum.";
-  div.appendChild(h1);
-  div.appendChild(p1);
-  div.appendChild(p2);
-  div2.appendChild(p3);
-  doc.body.appendChild(div);
-  doc.body.appendChild(div2);
-  setupHighlighterTests();
-}
-
-function setupHighlighterTests()
-{
-  h1 = doc.querySelectorAll("h1")[0];
-  ok(h1, "we have the header node");
-  Services.obs.addObserver(runSelectionTests, "inspector-opened", false);
-  InspectorUI.toggleInspectorUI();
-}
-
-function runSelectionTests()
-{
-  Services.obs.removeObserver(runSelectionTests, "inspector-opened", false);
-  document.addEventListener("popupshown", performTestComparisons, false);
-  EventUtils.synthesizeMouse(h1, 2, 2, {type: "mousemove"}, content);
-}
-
-function performTestComparisons(evt)
-{
-  if (evt.target.id != "highlighter-panel")
-    return true;
-  document.removeEventListener("popupshown", performTestComparisons, false);
-  is(h1, InspectorUI.selection, "selection matches node");
-  ok(InspectorUI.highlighter.isHighlighting, "panel is highlighting");
-  is(InspectorUI.highlighter.highlitNode, h1, "highlighter matches selection");
-
-  Services.obs.addObserver(finishUp, "inspector-closed", false);
-  InspectorUI.closeInspectorUI();
-}
-
-function finishUp() {
-  Services.obs.removeObserver(finishUp, "inspector-closed", false);
-
-  ok(!InspectorUI.highlighter.isHighlighting, "panel is not highlighting");
-  doc = h1 = null;
-  gBrowser.removeCurrentTab();
-  finish();
-}
-
-function test()
-{
-  waitForExplicitFinish();
-  gBrowser.selectedTab = gBrowser.addTab();
-  gBrowser.selectedBrowser.addEventListener("load", function() {
-    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
-    doc = content.document;
-    waitForFocus(createDocument, content);
-  }, true);
-  
-  content.location = "data:text/html,basic tests for inspector";
-}
-
diff --git a/browser/base/content/test/browser_inspector_iframeTest.js b/browser/base/content/test/browser_inspector_iframeTest.js
deleted file mode 100644
--- a/browser/base/content/test/browser_inspector_iframeTest.js
+++ /dev/null
@@ -1,143 +0,0 @@
-/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ts=2 et sw=2 tw=80: */
-/* ***** BEGIN LICENSE BLOCK *****
- * Version: MPL 1.1/GPL 2.0/LGPL 2.1
- *
- * The contents of this file are subject to the Mozilla Public License Version
- * 1.1 (the "License"); you may not use this file except in compliance with
- * the License. You may obtain a copy of the License at
- * http://www.mozilla.org/MPL/
- *
- * Software distributed under the License is distributed on an "AS IS" basis,
- * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
- * for the specific language governing rights and limitations under the
- * License.
- *
- * The Original Code is Inspector iframe Tests.
- *
- * The Initial Developer of the Original Code is
- * The Mozilla Foundation.
- * Portions created by the Initial Developer are Copyright (C) 2010
- * the Initial Developer. All Rights Reserved.
- *
- * Contributor(s):
- *   Rob Campbell <rcampbell@mozilla.com>
- *   Mihai È˜ucan <mihai.sucan@gmail.com>
- *
- * Alternatively, the contents of this file may be used under the terms of
- * either the GNU General Public License Version 2 or later (the "GPL"), or
- * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
- * in which case the provisions of the GPL or the LGPL are applicable instead
- * of those above. If you wish to allow use of your version of this file only
- * under the terms of either the GPL or the LGPL, and not to allow others to
- * use your version of this file under the terms of the MPL, indicate your
- * decision by deleting the provisions above and replace them with the notice
- * and other provisions required by the GPL or the LGPL. If you do not delete
- * the provisions above, a recipient may use your version of this file under
- * the terms of any one of the MPL, the GPL or the LGPL.
- *
- * ***** END LICENSE BLOCK ***** */
-
-let doc;
-let div1;
-let div2;
-let iframe1;
-let iframe2;
-
-function createDocument()
-{
-  doc.title = "Inspector iframe Tests";
-
-  iframe1 = doc.createElement('iframe');
-
-  iframe1.addEventListener("load", function () {
-    iframe1.removeEventListener("load", arguments.callee, false);
-
-    div1 = iframe1.contentDocument.createElement('div');
-    div1.textContent = 'little div';
-    iframe1.contentDocument.body.appendChild(div1);
-
-    iframe2 = iframe1.contentDocument.createElement('iframe');
-
-    iframe2.addEventListener('load', function () {
-      iframe2.removeEventListener("load", arguments.callee, false);
-
-      div2 = iframe2.contentDocument.createElement('div');
-      div2.textContent = 'nested div';
-      iframe2.contentDocument.body.appendChild(div2);
-
-      setupIframeTests();
-    }, false);
-
-    iframe2.src = 'data:text/html,nested iframe';
-    iframe1.contentDocument.body.appendChild(iframe2);
-  }, false);
-
-  iframe1.src = 'data:text/html,little iframe';
-  doc.body.appendChild(iframe1);
-}
-
-function setupIframeTests()
-{
-  Services.obs.addObserver(runIframeTests, "inspector-opened", false);
-  InspectorUI.openInspectorUI();
-}
-
-function runIframeTests()
-{
-  Services.obs.removeObserver(runIframeTests, "inspector-opened", false);
-  document.addEventListener("popupshown", performTestComparisons1, false);
-  EventUtils.synthesizeMouse(div1, 2, 2, {type: "mousemove"},
-    iframe1.contentWindow);
-}
-
-function performTestComparisons1(evt)
-{
-  if (evt.target.id != "highlighter-panel") {
-    return true;
-  }
-
-  document.removeEventListener(evt.type, arguments.callee, false);
-
-  is(InspectorUI.selection, div1, "selection matches div1 node");
-  is(InspectorUI.highlighter.highlitNode, div1, "highlighter matches selection");
-
-  document.addEventListener("popupshown", performTestComparisons2, false);
-
-  EventUtils.synthesizeMouse(div2, 2, 2, {type: "mousemove"},
-    iframe2.contentWindow);
-}
-
-function performTestComparisons2(evt)
-{
-  if (evt.target.id != "highlighter-panel") {
-    return true;
-  }
-
-  document.removeEventListener(evt.type, arguments.callee, false);
-
-  is(InspectorUI.selection, div2, "selection matches div2 node");
-  is(InspectorUI.highlighter.highlitNode, div2, "highlighter matches selection");
-
-  executeSoon(finishUp);
-}
-
-function finishUp() {
-  InspectorUI.closeInspectorUI();
-  gBrowser.removeCurrentTab();
-  finish();
-}
-
-function test()
-{
-  waitForExplicitFinish();
-  gBrowser.selectedTab = gBrowser.addTab();
-  gBrowser.selectedBrowser.addEventListener("load", function() {
-    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
-    doc = content.document;
-    waitForFocus(createDocument, content);
-  }, true);
-
-  content.location = "data:text/html,iframe tests for inspector";
-}
-
diff --git a/browser/base/content/test/browser_inspector_initialization.js b/browser/base/content/test/browser_inspector_initialization.js
deleted file mode 100644
--- a/browser/base/content/test/browser_inspector_initialization.js
+++ /dev/null
@@ -1,81 +0,0 @@
-/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ts=2 et sw=2 tw=80: */
-/* ***** BEGIN LICENSE BLOCK *****
- * Version: MPL 1.1/GPL 2.0/LGPL 2.1
- *
- * The contents of this file are subject to the Mozilla Public License Version
- * 1.1 (the "License"); you may not use this file except in compliance with
- * the License. You may obtain a copy of the License at
- * http://www.mozilla.org/MPL/
- *
- * Software distributed under the License is distributed on an "AS IS" basis,
- * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
- * for the specific language governing rights and limitations under the
- * License.
- *
- * The Original Code is Inspector Initializationa and Shutdown Tests.
- *
- * The Initial Developer of the Original Code is
- * The Mozilla Foundation.
- * Portions created by the Initial Developer are Copyright (C) 2010
- * the Initial Developer. All Rights Reserved.
- *
- * Contributor(s):
- *   Rob Campbell <rcampbell@mozilla.com>
- *
- * Alternatively, the contents of this file may be used under the terms of
- * either the GNU General Public License Version 2 or later (the "GPL"), or
- * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
- * in which case the provisions of the GPL or the LGPL are applicable instead
- * of those above. If you wish to allow use of your version of this file only
- * under the terms of either the GPL or the LGPL, and not to allow others to
- * use your version of this file under the terms of the MPL, indicate your
- * decision by deleting the provisions above and replace them with the notice
- * and other provisions required by the GPL or the LGPL. If you do not delete
- * the provisions above, a recipient may use your version of this file under
- * the terms of any one of the MPL, the GPL or the LGPL.
- *
- * ***** END LICENSE BLOCK ***** */
-
-let doc;
-
-function startInspectorTests()
-{
-  ok(InspectorUI, "InspectorUI variable exists");
-  Services.obs.addObserver(runInspectorTests, "inspector-opened", false);
-  InspectorUI.toggleInspectorUI();
-}
-
-function runInspectorTests()
-{
-  Services.obs.removeObserver(runInspectorTests, "inspector-opened", false);
-  Services.obs.addObserver(finishInspectorTests, "inspector-closed", false);
-  let iframe = document.getElementById("inspector-tree-iframe");
-  is(InspectorUI.treeIFrame, iframe, "Inspector IFrame matches");
-  ok(InspectorUI.inspecting, "Inspector is highlighting");
-  ok(InspectorUI.isTreePanelOpen, "Inspector Tree Panel is open");
-  InspectorUI.closeInspectorUI();
-}
-
-function finishInspectorTests()
-{
-  Services.obs.removeObserver(finishInspectorTests, "inspector-closed", false);
-  ok(!InspectorUI.isTreePanelOpen, "Inspector Tree Panel is closed");
-  ok(!InspectorUI.inspecting, "Inspector is not highlighting");
-  gBrowser.removeCurrentTab();
-  finish();
-}
-
-function test()
-{
-  waitForExplicitFinish();
-  gBrowser.selectedTab = gBrowser.addTab();
-  gBrowser.selectedBrowser.addEventListener("load", function() {
-    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
-    doc = content.document;
-    waitForFocus(startInspectorTests, content);
-  }, true);
-  
-  content.location = "data:text/html,basic tests for inspector";
-}
-
diff --git a/browser/base/content/test/browser_inspector_scrolling.js b/browser/base/content/test/browser_inspector_scrolling.js
deleted file mode 100644
--- a/browser/base/content/test/browser_inspector_scrolling.js
+++ /dev/null
@@ -1,109 +0,0 @@
-/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ts=2 et sw=2 tw=80: */
-/* ***** BEGIN LICENSE BLOCK *****
- * Version: MPL 1.1/GPL 2.0/LGPL 2.1
- *
- * The contents of this file are subject to the Mozilla Public License Version
- * 1.1 (the "License"); you may not use this file except in compliance with
- * the License. You may obtain a copy of the License at
- * http://www.mozilla.org/MPL/
- *
- * Software distributed under the License is distributed on an "AS IS" basis,
- * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
- * for the specific language governing rights and limitations under the
- * License.
- *
- * The Original Code is Inspector iframe Tests.
- *
- * The Initial Developer of the Original Code is
- * The Mozilla Foundation.
- * Portions created by the Initial Developer are Copyright (C) 2010
- * the Initial Developer. All Rights Reserved.
- *
- * Contributor(s):
- *   Rob Campbell <rcampbell@mozilla.com>
- *   Mihai È˜ucan <mihai.sucan@gmail.com>
- *   Julian Viereck <jviereck@mozilla.com>
- *
- * Alternatively, the contents of this file may be used under the terms of
- * either the GNU General Public License Version 2 or later (the "GPL"), or
- * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
- * in which case the provisions of the GPL or the LGPL are applicable instead
- * of those above. If you wish to allow use of your version of this file only
- * under the terms of either the GPL or the LGPL, and not to allow others to
- * use your version of this file under the terms of the MPL, indicate your
- * decision by deleting the provisions above and replace them with the notice
- * and other provisions required by the GPL or the LGPL. If you do not delete
- * the provisions above, a recipient may use your version of this file under
- * the terms of any one of the MPL, the GPL or the LGPL.
- *
- * ***** END LICENSE BLOCK ***** */
-
-let doc;
-let div;
-let iframe;
-
-function createDocument()
-{
-  doc.title = "Inspector scrolling Tests";
-
-  iframe = doc.createElement("iframe");
-
-  iframe.addEventListener("load", function () {
-    iframe.removeEventListener("load", arguments.callee, false);
-
-    div = iframe.contentDocument.createElement("div");
-    div.textContent = "big div";
-    div.setAttribute("style", "height:500px; width:500px; border:1px solid gray;");
-    iframe.contentDocument.body.appendChild(div);
-    toggleInspector();
-  }, false);
-
-  iframe.src = "data:text/html,foo bar";
-  doc.body.appendChild(iframe);
-}
-
-function toggleInspector()
-{
-  Services.obs.addObserver(inspectNode, "inspector-opened", false);
-  InspectorUI.toggleInspectorUI();
-}
-
-function inspectNode()
-{
-  Services.obs.removeObserver(inspectNode, "inspector-opened", false);
-  document.addEventListener("popupshown", performScrollingTest, false);
-
-  InspectorUI.inspectNode(div)
-}
-
-function performScrollingTest(aEvent)
-{
-  if (aEvent.target.id != "highlighter-panel") {
-    return true;
-  }
-
-  document.removeEventListener("popupshown", performScrollingTest, false);
-
-  EventUtils.synthesizeMouseScroll(aEvent.target, 10, 10,
-    {axis:"vertical", delta:50, type:"MozMousePixelScroll"}, window);
-
-  is(iframe.contentDocument.body.scrollTop, 50, "inspected iframe scrolled");
-
-  InspectorUI.closeInspectorUI();
-  gBrowser.removeCurrentTab();
-  finish();
-}
-
-function test()
-{
-  waitForExplicitFinish();
-  gBrowser.selectedTab = gBrowser.addTab();
-  gBrowser.selectedBrowser.addEventListener("load", function() {
-    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
-    doc = content.document;
-    waitForFocus(createDocument, content);
-  }, true);
-
-  content.location = "data:text/html,mouse scrolling test for inspector";
-}
diff --git a/browser/base/content/test/browser_inspector_store.js b/browser/base/content/test/browser_inspector_store.js
deleted file mode 100644
--- a/browser/base/content/test/browser_inspector_store.js
+++ /dev/null
@@ -1,106 +0,0 @@
-/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ts=2 et sw=2 tw=80: */
-/* ***** BEGIN LICENSE BLOCK *****
- * Version: MPL 1.1/GPL 2.0/LGPL 2.1
- *
- * The contents of this file are subject to the Mozilla Public License Version
- * 1.1 (the "License"); you may not use this file except in compliance with
- * the License. You may obtain a copy of the License at
- * http://www.mozilla.org/MPL/
- *
- * Software distributed under the License is distributed on an "AS IS" basis,
- * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
- * for the specific language governing rights and limitations under the
- * License.
- *
- * The Original Code is Inspector Store Tests.
- *
- * The Initial Developer of the Original Code is
- * The Mozilla Foundation.
- * Portions created by the Initial Developer are Copyright (C) 2010
- * the Initial Developer. All Rights Reserved.
- *
- * Contributor(s):
- *   Mihai È˜ucan <mihai.sucan@gmail.com>
- *
- * Alternatively, the contents of this file may be used under the terms of
- * either the GNU General Public License Version 2 or later (the "GPL"), or
- * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
- * in which case the provisions of the GPL or the LGPL are applicable instead
- * of those above. If you wish to allow use of your version of this file only
- * under the terms of either the GPL or the LGPL, and not to allow others to
- * use your version of this file under the terms of the MPL, indicate your
- * decision by deleting the provisions above and replace them with the notice
- * and other provisions required by the GPL or the LGPL. If you do not delete
- * the provisions above, a recipient may use your version of this file under
- * the terms of any one of the MPL, the GPL or the LGPL.
- *
- * ***** END LICENSE BLOCK ***** */
-
-function test()
-{
-  ok(InspectorUI, "InspectorUI variable exists");
-  ok(!InspectorUI.inspecting, "Inspector is not highlighting");
-  is(InspectorStore.length, 0, "InspectorStore is empty");
-  ok(InspectorStore.isEmpty(), "InspectorStore is empty (confirmed)");
-  is(typeof InspectorStore.store, "object",
-    "InspectorStore.store is an object");
-
-  ok(InspectorStore.addStore("foo"), "addStore('foo') returns true");
-
-  is(InspectorStore.length, 1, "InspectorStore.length = 1");
-  ok(!InspectorStore.isEmpty(), "InspectorStore is not empty");
-  is(typeof InspectorStore.store.foo, "object", "store.foo is an object");
-
-  ok(InspectorStore.addStore("fooBar"), "addStore('fooBar') returns true");
-
-  is(InspectorStore.length, 2, "InspectorStore.length = 2");
-  is(typeof InspectorStore.store.fooBar, "object", "store.fooBar is an object");
-
-  ok(!InspectorStore.addStore("fooBar"), "addStore('fooBar') returns false");
-
-  ok(InspectorStore.deleteStore("fooBar"),
-    "deleteStore('fooBar') returns true");
-
-  is(InspectorStore.length, 1, "InspectorStore.length = 1");
-  ok(!InspectorStore.store.fooBar, "store.fooBar is deleted");
-
-  ok(!InspectorStore.deleteStore("fooBar"),
-    "deleteStore('fooBar') returns false");
-
-  ok(!InspectorStore.hasID("fooBar"), "hasID('fooBar') returns false");
-
-  ok(InspectorStore.hasID("foo"), "hasID('foo') returns true");
-
-  ok(InspectorStore.setValue("foo", "key1", "val1"), "setValue() returns true");
-
-  ok(!InspectorStore.setValue("fooBar", "key1", "val1"),
-    "setValue() returns false");
-
-  is(InspectorStore.getValue("foo", "key1"), "val1",
-    "getValue() returns the correct value");
-
-  is(InspectorStore.store.foo.key1, "val1", "store.foo.key1 = 'val1'");
-
-  ok(!InspectorStore.getValue("fooBar", "key1"),
-    "getValue() returns null for unknown store");
-
-  ok(!InspectorStore.getValue("fooBar", "key1"),
-    "getValue() returns null for unknown store");
-
-  ok(InspectorStore.deleteValue("foo", "key1"),
-    "deleteValue() returns true for known value");
-
-  ok(!InspectorStore.store.foo.key1, "deleteValue() removed the value.");
-
-  ok(!InspectorStore.deleteValue("fooBar", "key1"),
-    "deleteValue() returns false for unknown store.");
-
-  ok(!InspectorStore.deleteValue("foo", "key1"),
-    "deleteValue() returns false for unknown value.");
-
-  ok(InspectorStore.deleteStore("foo"), "deleteStore('foo') returns true");
-
-  ok(InspectorStore.isEmpty(), "InspectorStore is empty");
-}
-
diff --git a/browser/base/content/test/browser_inspector_tab_switch.js b/browser/base/content/test/browser_inspector_tab_switch.js
deleted file mode 100644
--- a/browser/base/content/test/browser_inspector_tab_switch.js
+++ /dev/null
@@ -1,179 +0,0 @@
-/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ts=2 et sw=2 tw=80: */
-/* ***** BEGIN LICENSE BLOCK *****
- * Version: MPL 1.1/GPL 2.0/LGPL 2.1
- *
- * The contents of this file are subject to the Mozilla Public License Version
- * 1.1 (the "License"); you may not use this file except in compliance with
- * the License. You may obtain a copy of the License at
- * http://www.mozilla.org/MPL/
- *
- * Software distributed under the License is distributed on an "AS IS" basis,
- * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
- * for the specific language governing rights and limitations under the
- * License.
- *
- * The Original Code is Inspector Tab Switch Tests.
- *
- * The Initial Developer of the Original Code is
- * The Mozilla Foundation.
- * Portions created by the Initial Developer are Copyright (C) 2010
- * the Initial Developer. All Rights Reserved.
- *
- * Contributor(s):
- *   Rob Campbell <rcampbell@mozilla.com>
- *   Mihai È˜ucan <mihai.sucan@gmail.com>
- *
- * Alternatively, the contents of this file may be used under the terms of
- * either the GNU General Public License Version 2 or later (the "GPL"), or
- * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
- * in which case the provisions of the GPL or the LGPL are applicable instead
- * of those above. If you wish to allow use of your version of this file only
- * under the terms of either the GPL or the LGPL, and not to allow others to
- * use your version of this file under the terms of the MPL, indicate your
- * decision by deleting the provisions above and replace them with the notice
- * and other provisions required by the GPL or the LGPL. If you do not delete
- * the provisions above, a recipient may use your version of this file under
- * the terms of any one of the MPL, the GPL or the LGPL.
- *
- * ***** END LICENSE BLOCK ***** */
-
-let div;
-let tab1;
-let tab2;
-let tab1window;
-
-function inspectorTabOpen1()
-{
-  ok(InspectorUI, "InspectorUI variable exists");
-  ok(!InspectorUI.inspecting, "Inspector is not highlighting");
-  ok(InspectorStore.isEmpty(), "InspectorStore is empty");
-
-  Services.obs.addObserver(inspectorUIOpen1, "inspector-opened", false);
-  InspectorUI.openInspectorUI();
-}
-
-function inspectorUIOpen1()
-{
-  Services.obs.removeObserver(inspectorUIOpen1, "inspector-opened", false);
-
-  // Make sure the inspector is open.
-  ok(InspectorUI.inspecting, "Inspector is highlighting");
-  ok(InspectorUI.isTreePanelOpen, "Inspector Tree Panel is open");
-  ok(!InspectorStore.isEmpty(), "InspectorStore is not empty");
-  is(InspectorStore.length, 1, "InspectorStore.length = 1");
-
-  // Highlight a node.
-  div = content.document.getElementsByTagName("div")[0];
-  InspectorUI.inspectNode(div);
-  is(InspectorUI.selection, div, "selection matches the div element");
-
-  // Open the second tab.
-  tab2 = gBrowser.addTab();
-  gBrowser.selectedTab = tab2;
-
-  gBrowser.selectedBrowser.addEventListener("load", function(evt) {
-    gBrowser.selectedBrowser.removeEventListener(evt.type, arguments.callee,
-      true);
-    waitForFocus(inspectorTabOpen2, content);
-  }, true);
-
-  content.location = "data:text/html,<p>tab 2: the inspector should close now";
-}
-
-function inspectorTabOpen2()
-{
-  // Make sure the inspector is closed.
-  ok(!InspectorUI.inspecting, "Inspector is not highlighting");
-  ok(!InspectorUI.isPanelOpen, "Inspector Tree Panel is closed");
-  is(InspectorStore.length, 1, "InspectorStore.length = 1");
-
-  // Activate the inspector again.
-  executeSoon(function() {
-  Services.obs.addObserver(inspectorUIOpen2, "inspector-opened", false);
-    InspectorUI.openInspectorUI();
-  });
-}
-
-function inspectorUIOpen2()
-{
-  Services.obs.removeObserver(inspectorUIOpen2, "inspector-opened", false);
-
-  // Make sure the inspector is open.
-  ok(InspectorUI.inspecting, "Inspector is highlighting");
-  ok(InspectorUI.isTreePanelOpen, "Inspector Tree Panel is open");
-  is(InspectorStore.length, 2, "InspectorStore.length = 2");
-
-  // Disable highlighting.
-  InspectorUI.toggleInspection();
-  ok(!InspectorUI.inspecting, "Inspector is not highlighting");
-
-  // Switch back to tab 1.
-  executeSoon(function() {
-    Services.obs.addObserver(inspectorFocusTab1, "inspector-opened", false);
-    gBrowser.selectedTab = tab1;
-  });
-}
-
-function inspectorFocusTab1()
-{
-  Services.obs.removeObserver(inspectorFocusTab1, "inspector-opened", false);
-
-  // Make sure the inspector is still open.
-  ok(InspectorUI.inspecting, "Inspector is highlighting");
-  ok(InspectorUI.isTreePanelOpen, "Inspector Tree Panel is open");
-  is(InspectorStore.length, 2, "InspectorStore.length = 2");
-  is(InspectorUI.selection, div, "selection matches the div element");
-
-  // Switch back to tab 2.
-  Services.obs.addObserver(inspectorFocusTab2, "inspector-opened", false);
-  gBrowser.selectedTab = tab2;
-}
-
-function inspectorFocusTab2()
-{
-  Services.obs.removeObserver(inspectorFocusTab2, "inspector-opened", false);
-
-  // Make sure the inspector is still open.
-  ok(!InspectorUI.inspecting, "Inspector is not highlighting");
-  ok(InspectorUI.isTreePanelOpen, "Inspector Tree Panel is open");
-  is(InspectorStore.length, 2, "InspectorStore.length = 2");
-  isnot(InspectorUI.selection, div, "selection does not match the div element");
-
-  // Remove tab 1.
-  tab1window = gBrowser.getBrowserForTab(tab1).contentWindow;
-  tab1window.addEventListener("pagehide", inspectorTabUnload1, false);
-  gBrowser.removeTab(tab1);
-}
-
-function inspectorTabUnload1(evt)
-{
-  tab1window.removeEventListener(evt.type, arguments.callee, false);
-  tab1window = tab1 = tab2 = div = null;
-
-  // Make sure the Inspector is still open and that the state is correct.
-  ok(!InspectorUI.inspecting, "Inspector is not highlighting");
-  ok(InspectorUI.isTreePanelOpen, "Inspector Tree Panel is open");
-  is(InspectorStore.length, 1, "InspectorStore.length = 1");
-
-  InspectorUI.closeInspectorUI();
-  gBrowser.removeCurrentTab();
-  finish();
-}
-
-function test()
-{
-  waitForExplicitFinish();
-
-  tab1 = gBrowser.addTab();
-  gBrowser.selectedTab = tab1;
-  gBrowser.selectedBrowser.addEventListener("load", function(evt) {
-    gBrowser.selectedBrowser.removeEventListener(evt.type, arguments.callee,
-      true);
-    waitForFocus(inspectorTabOpen1, content);
-  }, true);
-
-  content.location = "data:text/html,<p>tab switching tests for inspector" +
-    "<div>tab 1</div>";
-}
-
diff --git a/browser/base/content/test/browser_inspector_treePanel_input.html b/browser/base/content/test/browser_inspector_treePanel_input.html
deleted file mode 100644
--- a/browser/base/content/test/browser_inspector_treePanel_input.html
+++ /dev/null
@@ -1,33 +0,0 @@
-<!DOCTYPE html>
-<html xml:lang="en">
-  <head>
-    <meta charset="utf-8">
-    <title>Inspector tree panel test</title>
-    <style type="text/css"><!--
-      #duplicate { color: green }
-    --></style>
-    <script type="text/javascript"><!--
-      function fooBarBaz(arg1) {
-        return true; // do nothing
-      }
-    // --></script>
-  </head>
-  <body arbitrary:attribute="value">
-    <p>Inspector tree panel test.</p>
-
-    <div id="foo" class="foo bar baz" style="border:1px solid red; 
-      unknownProperty: unknownValue; color: withUnkownValue">
-      <unknownTag unknownAttribute="fooBar">
-        <p unknownAttribute="fooBar" data-test1="value">hello world!</p>
-      </unknownTag>
-    </div>
-
-    <div id="duplicate" id="duplicate" id="different" class="test" class="foo" 
-      fooBar="baz" fooBar="bazbaz">test</div>
-
-    <iframe src="data:text/html,&lt;div&gt;hello from an iframe!&lt;/div&gt;">no 
-      frames!</iframe>
-
-    <!-- hello world from a comment! -->
-  </body>
-</html>
diff --git a/browser/base/content/test/browser_inspector_treePanel_output.js b/browser/base/content/test/browser_inspector_treePanel_output.js
deleted file mode 100644
--- a/browser/base/content/test/browser_inspector_treePanel_output.js
+++ /dev/null
@@ -1,123 +0,0 @@
-/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ts=2 et sw=2 tw=80: */
-/* ***** BEGIN LICENSE BLOCK *****
- * Version: MPL 1.1/GPL 2.0/LGPL 2.1
- *
- * The contents of this file are subject to the Mozilla Public License Version
- * 1.1 (the "License"); you may not use this file except in compliance with
- * the License. You may obtain a copy of the License at
- * http://www.mozilla.org/MPL/
- *
- * Software distributed under the License is distributed on an "AS IS" basis,
- * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
- * for the specific language governing rights and limitations under the
- * License.
- *
- * The Original Code is Inspector iframe Tests.
- *
- * The Initial Developer of the Original Code is
- * The Mozilla Foundation.
- * Portions created by the Initial Developer are Copyright (C) 2010
- * the Initial Developer. All Rights Reserved.
- *
- * Contributor(s):
- *   Mihai È˜ucan <mihai.sucan@gmail.com>
- *   Rob Campbell <rcampbell@mozilla.com>
- *
- * Alternatively, the contents of this file may be used under the terms of
- * either the GNU General Public License Version 2 or later (the "GPL"), or
- * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
- * in which case the provisions of the GPL or the LGPL are applicable instead
- * of those above. If you wish to allow use of your version of this file only
- * under the terms of either the GPL or the LGPL, and not to allow others to
- * use your version of this file under the terms of the MPL, indicate your
- * decision by deleting the provisions above and replace them with the notice
- * and other provisions required by the GPL or the LGPL. If you do not delete
- * the provisions above, a recipient may use your version of this file under
- * the terms of any one of the MPL, the GPL or the LGPL.
- *
- * ***** END LICENSE BLOCK ***** */
-
-let doc = null;
-let xhr = null;
-let expectedResult = "";
-
-const TEST_URI = "http://mochi.test:8888/browser/browser/base/content/test/browser_inspector_treePanel_input.html";
-const RESULT_URI = "http://mochi.test:8888/browser/browser/base/content/test/browser_inspector_treePanel_result.html";
-
-function tabFocused()
-{
-  xhr = new XMLHttpRequest();
-  xhr.onreadystatechange = xhr_onReadyStateChange;
-  xhr.open("GET", RESULT_URI, true);
-  xhr.send(null);
-}
-
-function xhr_onReadyStateChange() {
-  if (xhr.readyState != 4) {
-    return;
-  }
-
-  is(xhr.status, 200, "xhr.status is 200");
-  ok(!!xhr.responseText, "xhr.responseText is available");
-  expectedResult = xhr.responseText.replace(/^\s+|\s+$/mg, '');
-  xhr = null;
-
-  Services.obs.addObserver(inspectorOpened, "inspector-opened", false);
-  InspectorUI.openInspectorUI();
-}
-
-function inspectorOpened()
-{
-  Services.obs.removeObserver(inspectorOpened, "inspector-opened", false);
-
-  ok(InspectorUI.inspecting, "Inspector is highlighting");
-  ok(InspectorUI.isTreePanelOpen, "Inspector Tree Panel is open");
-  InspectorUI.stopInspecting();
-  ok(!InspectorUI.inspecting, "Inspector is not highlighting");
-
-  let elements = doc.querySelectorAll("meta, script, style, p[unknownAttribute]");
-  for (let i = 0; i < elements.length; i++) {
-    InspectorUI.inspectNode(elements[i]);
-  }
-
-  let iframe = doc.querySelector("iframe");
-  ok(iframe, "Found the iframe tag");
-  ok(iframe.contentDocument, "Found the iframe.contentDocument");
-
-  let iframeDiv = iframe.contentDocument.querySelector("div");
-  ok(iframeDiv, "Found the div element inside the iframe");
-  InspectorUI.inspectNode(iframeDiv);
-
-  ok(InspectorUI.treePanelDiv, "InspectorUI.treePanelDiv is available");
-  is(InspectorUI.treePanelDiv.innerHTML.replace(/^\s+|\s+$/mg, ''),
-    expectedResult, "treePanelDiv.innerHTML is correct");
-  expectedResult = null;
-
-  Services.obs.addObserver(inspectorClosed, "inspector-closed", false);
-  InspectorUI.closeInspectorUI();
-}
-
-function inspectorClosed()
-{
-  Services.obs.removeObserver(inspectorClosed, "inspector-closed", false);
-
-  ok(!InspectorUI.inspecting, "Inspector is not highlighting");
-  ok(!InspectorUI.isTreePanelOpen, "Inspector Tree Panel is not open");
-
-  gBrowser.removeCurrentTab();
-  finish();
-}
-
-function test()
-{
-  waitForExplicitFinish();
-  gBrowser.selectedTab = gBrowser.addTab();
-  gBrowser.selectedBrowser.addEventListener("load", function(evt) {
-    gBrowser.selectedBrowser.removeEventListener(evt.type, arguments.callee, true);
-    doc = content.document;
-    waitForFocus(tabFocused, content);
-  }, true);
-  
-  content.location = TEST_URI;
-}
diff --git a/browser/base/content/test/browser_inspector_treePanel_result.html b/browser/base/content/test/browser_inspector_treePanel_result.html
deleted file mode 100644
--- a/browser/base/content/test/browser_inspector_treePanel_result.html
+++ /dev/null
@@ -1,8 +0,0 @@
-<div role="presentation" class="nodeBox htmlNodeBox containerNodeBox  repIgnore open"><div class="docType ">&lt;!DOCTYPE html&gt;</div><div role="presentation" class="nodeLabel "><img role="presentation" class="twisty "><span role="treeitem" aria-expanded="true" class="nodeLabelBox repTarget ">&lt;<span class="nodeTag ">html</span><span class="nodeAttr editGroup ">&nbsp;<span class="nodeName editable ">xml:lang</span>="<span class="nodeValue editable ">en</span>"</span><span class="nodeBracket editable insertBefore ">&gt;</span></span></div><div role="group" class="nodeChildBox "><div role="presentation" class="nodeBox containerNodeBox  repIgnore open"><div role="presentation" class="nodeLabel "><img role="presentation" class="twisty "><span role="treeitem" aria-expanded="true" class="nodeLabelBox repTarget ">&lt;<span class="nodeTag ">head</span><span class="nodeBracket editable insertBefore ">&gt;</span></span></div><div role="group" class="nodeChildBox "><div role="presentation" class="nodeBox emptyNodeBox  repIgnore"><div role="presentation" class="nodeLabel "><span role="treeitem" class="nodeLabelBox repTarget ">&lt;<span class="nodeTag ">meta</span><span class="nodeAttr editGroup ">&nbsp;<span class="nodeName editable ">charset</span>="<span class="nodeValue editable ">utf-8</span>"</span><span class="nodeBracket editable insertBefore ">&gt;</span></span></div></div><div role="presentation" class="nodeBox textNodeBox  repIgnore "><div role="presentation" class="nodeLabel "><span role="treeitem" class="nodeLabelBox repTarget ">&lt;<span class="nodeTag ">title</span><span class="nodeBracket editable insertBefore ">&gt;</span><span class="nodeText editable "><span class="  ">Inspector tree panel test</span></span>&lt;/<span class="nodeTag ">title</span>&gt;</span></div></div><div role="presentation" class="nodeBox containerNodeBox  repIgnore open"><div role="presentation" class="nodeLabel "><img role="presentation" class="twisty "><span role="treeitem" aria-expanded="true" class="nodeLabelBox repTarget ">&lt;<span class="nodeTag ">style</span><span class="nodeAttr editGroup ">&nbsp;<span class="nodeName editable ">type</span>="<span class="nodeValue editable ">text/css</span>"</span><span class="nodeBracket editable insertBefore ">&gt;</span></span></div><div role="group" class="nodeChildBox "><div role="presentation" class="nodeBox "><span class="nodeText editable "><span class="  ">&lt;!--
-#duplicate { color: green }
---&gt;</span></span></div></div><div role="presentation" class="nodeCloseLabel "><span class="nodeCloseLabelBox repTarget ">&lt;/<span class="nodeTag ">style</span>&gt;</span></div></div><div role="presentation" class="nodeBox containerNodeBox  repIgnore open"><div role="presentation" class="nodeLabel "><img role="presentation" class="twisty "><span role="treeitem" aria-expanded="true" class="nodeLabelBox repTarget ">&lt;<span class="nodeTag ">script</span><span class="nodeAttr editGroup ">&nbsp;<span class="nodeName editable ">type</span>="<span class="nodeValue editable ">text/javascript</span>"</span><span class="nodeBracket editable insertBefore ">&gt;</span></span></div><div role="group" class="nodeChildBox "><div role="presentation" class="nodeBox "><span class="nodeText editable "><span class="  ">&lt;!--
-function fooBarBaz(arg1) {
-return true; // do nothing
-}
-// --&gt;</span></span></div></div><div role="presentation" class="nodeCloseLabel "><span class="nodeCloseLabelBox repTarget ">&lt;/<span class="nodeTag ">script</span>&gt;</span></div></div></div><div role="presentation" class="nodeCloseLabel "><span class="nodeCloseLabelBox repTarget ">&lt;/<span class="nodeTag ">head</span>&gt;</span></div></div><div role="presentation" class="nodeBox containerNodeBox  repIgnore open"><div role="presentation" class="nodeLabel "><img role="presentation" class="twisty "><span role="treeitem" aria-expanded="true" class="nodeLabelBox repTarget ">&lt;<span class="nodeTag ">body</span><span class="nodeAttr editGroup ">&nbsp;<span class="nodeName editable ">arbitrary:attribute</span>="<span class="nodeValue editable ">value</span>"</span><span class="nodeBracket editable insertBefore ">&gt;</span></span></div><div role="group" class="nodeChildBox "><div role="presentation" class="nodeBox textNodeBox  repIgnore "><div role="presentation" class="nodeLabel "><span role="treeitem" class="nodeLabelBox repTarget ">&lt;<span class="nodeTag ">p</span><span class="nodeBracket editable insertBefore ">&gt;</span><span class="nodeText editable "><span class="  ">Inspector tree panel test.</span></span>&lt;/<span class="nodeTag ">p</span>&gt;</span></div></div><div role="presentation" class="nodeBox containerNodeBox  repIgnore open"><div role="presentation" class="nodeLabel "><img role="presentation" class="twisty "><span role="treeitem" aria-expanded="true" class="nodeLabelBox repTarget ">&lt;<span class="nodeTag ">div</span><span class="nodeAttr editGroup ">&nbsp;<span class="nodeName editable ">id</span>="<span class="nodeValue editable ">foo</span>"</span><span class="nodeAttr editGroup ">&nbsp;<span class="nodeName editable ">class</span>="<span class="nodeValue editable ">foo bar baz</span>"</span><span class="nodeAttr editGroup ">&nbsp;<span class="nodeName editable ">style</span>="<span class="nodeValue editable ">border:1px solid red;
-unknownProperty: unknownValue; color: withUnkownValue</span>"</span><span class="nodeBracket editable insertBefore ">&gt;</span></span></div><div role="group" class="nodeChildBox "><div role="presentation" class="nodeBox containerNodeBox  repIgnore open"><div role="presentation" class="nodeLabel "><img role="presentation" class="twisty "><span role="treeitem" aria-expanded="true" class="nodeLabelBox repTarget ">&lt;<span class="nodeTag ">unknowntag</span><span class="nodeAttr editGroup ">&nbsp;<span class="nodeName editable ">unknownattribute</span>="<span class="nodeValue editable ">fooBar</span>"</span><span class="nodeBracket editable insertBefore ">&gt;</span></span></div><div role="group" class="nodeChildBox "><div role="presentation" class="nodeBox textNodeBox  repIgnore"><div role="presentation" class="nodeLabel "><span role="treeitem" class="nodeLabelBox repTarget ">&lt;<span class="nodeTag ">p</span><span class="nodeAttr editGroup ">&nbsp;<span class="nodeName editable ">data-test1</span>="<span class="nodeValue editable ">value</span>"</span><span class="nodeAttr editGroup ">&nbsp;<span class="nodeName editable ">unknownattribute</span>="<span class="nodeValue editable ">fooBar</span>"</span><span class="nodeBracket editable insertBefore ">&gt;</span><span class="nodeText editable "><span class="  ">hello world!</span></span>&lt;/<span class="nodeTag ">p</span>&gt;</span></div></div></div><div role="presentation" class="nodeCloseLabel "><span class="nodeCloseLabelBox repTarget ">&lt;/<span class="nodeTag ">unknowntag</span>&gt;</span></div></div></div><div role="presentation" class="nodeCloseLabel "><span class="nodeCloseLabelBox repTarget ">&lt;/<span class="nodeTag ">div</span>&gt;</span></div></div><div role="presentation" class="nodeBox textNodeBox  repIgnore "><div role="presentation" class="nodeLabel "><span role="treeitem" class="nodeLabelBox repTarget ">&lt;<span class="nodeTag ">div</span><span class="nodeAttr editGroup ">&nbsp;<span class="nodeName editable ">id</span>="<span class="nodeValue editable ">duplicate</span>"</span><span class="nodeAttr editGroup ">&nbsp;<span class="nodeName editable ">class</span>="<span class="nodeValue editable ">test</span>"</span><span class="nodeAttr editGroup ">&nbsp;<span class="nodeName editable ">foobar</span>="<span class="nodeValue editable ">baz</span>"</span><span class="nodeBracket editable insertBefore ">&gt;</span><span class="nodeText editable "><span class="  ">test</span></span>&lt;/<span class="nodeTag ">div</span>&gt;</span></div></div><div role="presentation" class="nodeBox containerNodeBox  repIgnore open"><div role="presentation" class="nodeLabel "><img role="presentation" class="twisty "><span role="treeitem" aria-expanded="true" class="nodeLabelBox repTarget ">&lt;<span class="nodeTag ">iframe</span><span class="nodeAttr editGroup ">&nbsp;<span class="nodeName editable ">src</span>="<span class="nodeValue editable ">data:text/html,&lt;div&gt;hello from an iframe!&lt;/div&gt;</span>"</span><span class="nodeBracket editable insertBefore ">&gt;</span></span></div><div role="group" class="nodeChildBox "><div role="presentation" class="nodeBox containerNodeBox  repIgnore open"><div role="presentation" class="nodeLabel "><img role="presentation" class="twisty "><span role="treeitem" aria-expanded="true" class="nodeLabelBox repTarget ">&lt;<span class="nodeTag ">html</span><span class="nodeBracket editable insertBefore ">&gt;</span></span></div><div role="group" class="nodeChildBox "><div role="presentation" class="nodeBox textNodeBox  repIgnore "><div role="presentation" class="nodeLabel "><span role="treeitem" class="nodeLabelBox repTarget ">&lt;<span class="nodeTag ">head</span><span class="nodeBracket editable insertBefore ">&gt;</span><span class="nodeText editable "><span class="  "></span></span>&lt;/<span class="nodeTag ">head</span>&gt;</span></div></div><div role="presentation" class="nodeBox containerNodeBox  repIgnore open"><div role="presentation" class="nodeLabel "><img role="presentation" class="twisty "><span role="treeitem" aria-expanded="true" class="nodeLabelBox repTarget ">&lt;<span class="nodeTag ">body</span><span class="nodeBracket editable insertBefore ">&gt;</span></span></div><div role="group" class="nodeChildBox "><div role="presentation" class="nodeBox textNodeBox  repIgnore selected"><div role="presentation" class="nodeLabel "><span role="treeitem" class="nodeLabelBox repTarget ">&lt;<span class="nodeTag ">div</span><span class="nodeBracket editable insertBefore ">&gt;</span><span class="nodeText editable "><span class="  ">hello from an iframe!</span></span>&lt;/<span class="nodeTag ">div</span>&gt;</span></div></div></div><div role="presentation" class="nodeCloseLabel "><span class="nodeCloseLabelBox repTarget ">&lt;/<span class="nodeTag ">body</span>&gt;</span></div></div></div><div role="presentation" class="nodeCloseLabel "><span class="nodeCloseLabelBox repTarget ">&lt;/<span class="nodeTag ">html</span>&gt;</span></div></div></div><div role="presentation" class="nodeCloseLabel "><span class="nodeCloseLabelBox repTarget ">&lt;/<span class="nodeTag ">iframe</span>&gt;</span></div></div><div role="presentation" class="nodeBox nodeComment ">&lt;!--<span class="nodeComment editable "> hello world from a comment! </span>--&gt;</div></div><div role="presentation" class="nodeCloseLabel "><span class="nodeCloseLabelBox repTarget ">&lt;/<span class="nodeTag ">body</span>&gt;</span></div></div></div><div role="presentation" class="nodeCloseLabel "><span class="nodeCloseLabelBox repTarget ">&lt;/<span class="nodeTag ">html</span>&gt;</span></div></div>
diff --git a/browser/base/content/test/browser_inspector_treeSelection.js b/browser/base/content/test/browser_inspector_treeSelection.js
deleted file mode 100644
--- a/browser/base/content/test/browser_inspector_treeSelection.js
+++ /dev/null
@@ -1,112 +0,0 @@
-/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ts=2 et sw=2 tw=80: */
-/* ***** BEGIN LICENSE BLOCK *****
- * Version: MPL 1.1/GPL 2.0/LGPL 2.1
- *
- * The contents of this file are subject to the Mozilla Public License Version
- * 1.1 (the "License"); you may not use this file except in compliance with
- * the License. You may obtain a copy of the License at
- * http://www.mozilla.org/MPL/
- *
- * Software distributed under the License is distributed on an "AS IS" basis,
- * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
- * for the specific language governing rights and limitations under the
- * License.
- *
- * The Original Code is Inspector Tree Selection Tests.
- *
- * The Initial Developer of the Original Code is
- * The Mozilla Foundation.
- * Portions created by the Initial Developer are Copyright (C) 2010
- * the Initial Developer. All Rights Reserved.
- *
- * Contributor(s):
- *   Rob Campbell <rcampbell@mozilla.com>
- *
- * Alternatively, the contents of this file may be used under the terms of
- * either the GNU General Public License Version 2 or later (the "GPL"), or
- * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
- * in which case the provisions of the GPL or the LGPL are applicable instead
- * of those above. If you wish to allow use of your version of this file only
- * under the terms of either the GPL or the LGPL, and not to allow others to
- * use your version of this file under the terms of the MPL, indicate your
- * decision by deleting the provisions above and replace them with the notice
- * and other provisions required by the GPL or the LGPL. If you do not delete
- * the provisions above, a recipient may use your version of this file under
- * the terms of any one of the MPL, the GPL or the LGPL.
- *
- * ***** END LICENSE BLOCK ***** */
-
-let doc;
-let h1;
-
-function createDocument()
-{
-  let div = doc.createElement("div");
-  let h1 = doc.createElement("h1");
-  let p1 = doc.createElement("p");
-  let p2 = doc.createElement("p");
-  doc.title = "Inspector Tree Selection Test";
-  h1.textContent = "Inspector Tree Selection Test";
-  p1.textContent = "This is some example text";
-  p2.textContent = "Lorem ipsum dolor sit amet, consectetur adipisicing " +
-    "elit, sed do eiusmod tempor incididunt ut labore et dolore magna " +
-    "aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco " +
-    "laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure " +
-    "dolor in reprehenderit in voluptate velit esse cillum dolore eu " +
-    "fugiat nulla pariatur. Excepteur sint occaecat cupidatat non " +
-    "proident, sunt in culpa qui officia deserunt mollit anim id est laborum.";
-  div.appendChild(h1);
-  div.appendChild(p1);
-  div.appendChild(p2);
-  // doc.body.addEventListener("DOMSubtreeModified", , false);
-  doc.body.appendChild(div);
-  setupSelectionTests();
-}
-
-function setupSelectionTests()
-{
-  h1 = doc.querySelectorAll("h1")[0];
-  ok(h1, "we have the header node");
-  Services.obs.addObserver(runSelectionTests, "inspector-opened", false);
-  InspectorUI.openInspectorUI();
-}
-
-function runSelectionTests()
-{
-  Services.obs.removeObserver(runSelectionTests, "inspector-opened", false);
-  InspectorUI.stopInspecting();
-  document.addEventListener("popupshown", performTestComparisons, false);
-  InspectorUI.inspectNode(h1);
-}
-
-function performTestComparisons(evt)
-{
-  if (evt.target.id != "highlighter-panel")
-    return true;
-  document.removeEventListener("popupshown", performTestComparisons, false);
-  is(h1, InspectorUI.selection, "selection matches node");
-  ok(InspectorUI.highlighter.isHighlighting, "panel is highlighting");
-  is(h1, InspectorUI.highlighter.highlitNode, "highlighter highlighting correct node");
-  finishUp();
-}
-
-function finishUp() {
-  InspectorUI.closeInspectorUI();
-  gBrowser.removeCurrentTab();
-  finish();
-}
-
-function test()
-{
-  waitForExplicitFinish();
-  gBrowser.selectedTab = gBrowser.addTab();
-  gBrowser.selectedBrowser.addEventListener("load", function() {
-    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
-    doc = content.document;
-    waitForFocus(createDocument, content);
-  }, true);
-  
-  content.location = "data:text/html,basic tests for inspector";
-}
-
diff --git a/browser/base/content/test/inspector/Makefile.in b/browser/base/content/test/inspector/Makefile.in
new file mode 100644
--- /dev/null
+++ b/browser/base/content/test/inspector/Makefile.in
@@ -0,0 +1,60 @@
+# ***** BEGIN LICENSE BLOCK *****
+# Version: MPL 1.1/GPL 2.0/LGPL 2.1
+#
+# The contents of this file are subject to the Mozilla Public License Version
+# 1.1 (the "License"); you may not use this file except in compliance with
+# the License. You may obtain a copy of the License at
+# http://www.mozilla.org/MPL/
+#
+# Software distributed under the License is distributed on an "AS IS" basis,
+# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+# for the specific language governing rights and limitations under the
+# License.
+#
+# The Original Code is mozilla.org code.
+#
+# The Initial Developer of the Original Code is
+# Mozilla Foundation.
+# Portions created by the Initial Developer are Copyright (C) 2007
+# the Initial Developer. All Rights Reserved.
+#
+# Contributor(s):
+#
+# Alternatively, the contents of this file may be used under the terms of
+# either of the GNU General Public License Version 2 or later (the "GPL"),
+# or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+# in which case the provisions of the GPL or the LGPL are applicable instead
+# of those above. If you wish to allow use of your version of this file only
+# under the terms of either the GPL or the LGPL, and not to allow others to
+# use your version of this file under the terms of the MPL, indicate your
+# decision by deleting the provisions above and replace them with the notice
+# and other provisions required by the GPL or the LGPL. If you do not delete
+# the provisions above, a recipient may use your version of this file under
+# the terms of any one of the MPL, the GPL or the LGPL.
+#
+# ***** END LICENSE BLOCK *****
+
+DEPTH		= ../../../../..
+topsrcdir	= @top_srcdir@
+srcdir		= @srcdir@
+VPATH		= @srcdir@
+relativesrcdir  = browser/base/content/test/inspector
+
+include $(DEPTH)/config/autoconf.mk
+include $(topsrcdir)/config/rules.mk
+
+_BROWSER_FILES = \
+		browser_inspector_initialization.js \
+		browser_inspector_treeSelection.js \
+		browser_inspector_highlighter.js \
+		browser_inspector_iframeTest.js \
+		browser_inspector_scrolling.js \
+		browser_inspector_store.js \
+		browser_inspector_tab_switch.js \
+		browser_inspector_treePanel_output.js \
+		browser_inspector_treePanel_input.html \
+		browser_inspector_treePanel_result.html \
+		$(NULL)
+
+libs::	$(_BROWSER_FILES)
+	$(INSTALL) $(foreach f,$^,"$f") $(DEPTH)/_tests/testing/mochitest/browser/$(relativesrcdir)
diff --git a/browser/base/content/test/inspector/browser_inspector_highlighter.js b/browser/base/content/test/inspector/browser_inspector_highlighter.js
new file mode 100644
--- /dev/null
+++ b/browser/base/content/test/inspector/browser_inspector_highlighter.js
@@ -0,0 +1,125 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=2 et sw=2 tw=80: */
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is Inspector Highlighter Tests.
+ *
+ * The Initial Developer of the Original Code is
+ * The Mozilla Foundation.
+ * Portions created by the Initial Developer are Copyright (C) 2010
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Rob Campbell <rcampbell@mozilla.com>
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+let doc;
+let h1;
+
+function createDocument()
+{
+  let div = doc.createElement("div");
+  let h1 = doc.createElement("h1");
+  let p1 = doc.createElement("p");
+  let p2 = doc.createElement("p");
+  let div2 = doc.createElement("div");
+  let p3 = doc.createElement("p");
+  doc.title = "Inspector Tree Selection Test";
+  h1.textContent = "Inspector Tree Selection Test";
+  p1.textContent = "This is some example text";
+  p2.textContent = "Lorem ipsum dolor sit amet, consectetur adipisicing " +
+    "elit, sed do eiusmod tempor incididunt ut labore et dolore magna " +
+    "aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco " +
+    "laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure " +
+    "dolor in reprehenderit in voluptate velit esse cillum dolore eu " +
+    "fugiat nulla pariatur. Excepteur sint occaecat cupidatat non " +
+    "proident, sunt in culpa qui officia deserunt mollit anim id est laborum.";
+  p3.textContent = "Lorem ipsum dolor sit amet, consectetur adipisicing " +
+    "elit, sed do eiusmod tempor incididunt ut labore et dolore magna " +
+    "aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco " +
+    "laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure " +
+    "dolor in reprehenderit in voluptate velit esse cillum dolore eu " +
+    "fugiat nulla pariatur. Excepteur sint occaecat cupidatat non " +
+    "proident, sunt in culpa qui officia deserunt mollit anim id est laborum.";
+  div.appendChild(h1);
+  div.appendChild(p1);
+  div.appendChild(p2);
+  div2.appendChild(p3);
+  doc.body.appendChild(div);
+  doc.body.appendChild(div2);
+  setupHighlighterTests();
+}
+
+function setupHighlighterTests()
+{
+  h1 = doc.querySelectorAll("h1")[0];
+  ok(h1, "we have the header node");
+  Services.obs.addObserver(runSelectionTests, "inspector-opened", false);
+  InspectorUI.toggleInspectorUI();
+}
+
+function runSelectionTests()
+{
+  info("we received the inspector-opened notification");
+  Services.obs.removeObserver(runSelectionTests, "inspector-opened", false);
+  executeSoon(function() {
+    Services.obs.addObserver(performTestComparisons, "inspector-highlighting", false);
+    EventUtils.synthesizeMouse(h1, 2, 2, {type: "mousemove"}, content);
+  });
+}
+
+function performTestComparisons(evt)
+{
+  info("we received the inspector-highlighting notification");
+  Services.obs.removeObserver(performTestComparisons, "inspector-highlighting", false);
+  InspectorUI.stopInspecting();
+  ok(InspectorUI.highlighter.isHighlighting, "highlighter is highlighting");
+  is(InspectorUI.highlighter.highlitNode, h1, "highlighter matches selection")
+  is(InspectorUI.selection, h1, "selection matches node");
+  is(InspectorUI.selection, InspectorUI.highlighter.highlitNode, "selection matches highlighter");
+  executeSoon(finishUp);
+}
+
+function finishUp() {
+  InspectorUI.closeInspectorUI();
+  gBrowser.removeCurrentTab();
+  finish();
+}
+
+function test()
+{
+  waitForExplicitFinish();
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", function() {
+    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
+    doc = content.document;
+    waitForFocus(createDocument, content);
+  }, true);
+
+  content.location = "data:text/html,basic tests for inspector";
+}
+
diff --git a/browser/base/content/test/inspector/browser_inspector_iframeTest.js b/browser/base/content/test/inspector/browser_inspector_iframeTest.js
new file mode 100644
--- /dev/null
+++ b/browser/base/content/test/inspector/browser_inspector_iframeTest.js
@@ -0,0 +1,142 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=2 et sw=2 tw=80: */
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is Inspector iframe Tests.
+ *
+ * The Initial Developer of the Original Code is
+ * The Mozilla Foundation.
+ * Portions created by the Initial Developer are Copyright (C) 2010
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Rob Campbell <rcampbell@mozilla.com>
+ *   Mihai È˜ucan <mihai.sucan@gmail.com>
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+let doc;
+let div1;
+let div2;
+let iframe1;
+let iframe2;
+let highlighterFrame;
+
+function createDocument()
+{
+  doc.title = "Inspector iframe Tests";
+
+  iframe1 = doc.createElement('iframe');
+
+  iframe1.addEventListener("load", function () {
+    iframe1.removeEventListener("load", arguments.callee, false);
+
+    div1 = iframe1.contentDocument.createElement('div');
+    div1.textContent = 'little div';
+    iframe1.contentDocument.body.appendChild(div1);
+
+    iframe2 = iframe1.contentDocument.createElement('iframe');
+
+    iframe2.addEventListener('load', function () {
+      iframe2.removeEventListener("load", arguments.callee, false);
+
+      div2 = iframe2.contentDocument.createElement('div');
+      div2.textContent = 'nested div';
+      iframe2.contentDocument.body.appendChild(div2);
+
+      setupIframeTests();
+    }, false);
+
+    iframe2.src = 'data:text/html,nested iframe';
+    iframe1.contentDocument.body.appendChild(iframe2);
+  }, false);
+
+  iframe1.src = 'data:text/html,little iframe';
+  doc.body.appendChild(iframe1);
+}
+
+function moveMouseOver(aElement)
+{
+  EventUtils.synthesizeMouse(aElement, 2, 2, {type: "mousemove"},
+    aElement.ownerDocument.defaultView);
+}
+
+function setupIframeTests()
+{
+  Services.obs.addObserver(runIframeTests, "inspector-opened", false);
+  InspectorUI.openInspectorUI();
+}
+
+function runIframeTests()
+{
+  Services.obs.removeObserver(runIframeTests, "inspector-opened", false);
+  Services.obs.addObserver(performTestComparisons1, "inspector-highlighting", false);
+  highlighterFrame = InspectorUI.highlighter.iframe;
+  executeSoon(moveMouseOver.bind(this, div1));
+}
+
+function performTestComparisons1()
+{
+  Services.obs.removeObserver(performTestComparisons1, "inspector-highlighting", false);
+  Services.obs.addObserver(performTestComparisons2, "inspector-highlighting", false);
+
+  is(InspectorUI.selection, div1, "selection matches div1 node");
+  is(InspectorUI.highlighter.highlitNode, div1, "highlighter matches selection");
+
+  executeSoon(moveMouseOver.bind(this, div2));
+}
+
+function performTestComparisons2()
+{
+  Services.obs.removeObserver(performTestComparisons2, "inspector-highlighting", false);
+
+  is(InspectorUI.selection, div2, "selection matches div2 node");
+  is(InspectorUI.highlighter.highlitNode, div2, "highlighter matches selection");
+
+  finishUp();
+}
+
+function finishUp() {
+  InspectorUI.closeInspectorUI(true);
+
+  doc = div1 = div2 = iframe1 = iframe2 = highlighterFrame = null;
+  gBrowser.removeCurrentTab();
+  finish();
+}
+
+function test()
+{
+  waitForExplicitFinish();
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", function() {
+    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
+    doc = content.document;
+    waitForFocus(createDocument, content);
+  }, true);
+
+  content.location = "data:text/html,iframe tests for inspector";
+}
+
diff --git a/browser/base/content/test/inspector/browser_inspector_initialization.js b/browser/base/content/test/inspector/browser_inspector_initialization.js
new file mode 100644
--- /dev/null
+++ b/browser/base/content/test/inspector/browser_inspector_initialization.js
@@ -0,0 +1,83 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=2 et sw=2 tw=80: */
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is Inspector Initializationa and Shutdown Tests.
+ *
+ * The Initial Developer of the Original Code is
+ * The Mozilla Foundation.
+ * Portions created by the Initial Developer are Copyright (C) 2010
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Rob Campbell <rcampbell@mozilla.com>
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+let doc;
+
+function startInspectorTests()
+{
+  ok(InspectorUI, "InspectorUI variable exists");
+  Services.obs.addObserver(runInspectorTests, "inspector-opened", false);
+  InspectorUI.toggleInspectorUI();
+}
+
+function runInspectorTests()
+{
+  Services.obs.removeObserver(runInspectorTests, "inspector-opened", false);
+  Services.obs.addObserver(finishInspectorTests, "inspector-closed", false);
+  let iframe = document.getElementById("inspector-tree-iframe");
+  is(InspectorUI.treeIFrame, iframe, "Inspector IFrame matches");
+  ok(InspectorUI.inspecting, "Inspector is inspecting");
+  ok(InspectorUI.isTreePanelOpen, "Inspector Tree Panel is open");
+  ok(InspectorUI.highlighter, "Highlighter is up");
+  executeSoon(function() { InspectorUI.closeInspectorUI(true) });
+}
+
+function finishInspectorTests()
+{
+  Services.obs.removeObserver(finishInspectorTests, "inspector-closed", false);
+  ok(!InspectorUI.highlighter, "Highlighter is gone");
+  ok(!InspectorUI.isTreePanelOpen, "Inspector Tree Panel is closed");
+  ok(!InspectorUI.inspecting, "Inspector is not inspecting");
+  gBrowser.removeCurrentTab();
+  finish();
+}
+
+function test()
+{
+  waitForExplicitFinish();
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", function() {
+    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
+    doc = content.document;
+    waitForFocus(startInspectorTests, content);
+  }, true);
+
+  content.location = "data:text/html,basic tests for inspector";
+}
+
diff --git a/browser/base/content/test/inspector/browser_inspector_scrolling.js b/browser/base/content/test/inspector/browser_inspector_scrolling.js
new file mode 100644
--- /dev/null
+++ b/browser/base/content/test/inspector/browser_inspector_scrolling.js
@@ -0,0 +1,115 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=2 et sw=2 tw=80: */
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is Inspector iframe Tests.
+ *
+ * The Initial Developer of the Original Code is
+ * The Mozilla Foundation.
+ * Portions created by the Initial Developer are Copyright (C) 2010
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Rob Campbell <rcampbell@mozilla.com>
+ *   Mihai È˜ucan <mihai.sucan@gmail.com>
+ *   Julian Viereck <jviereck@mozilla.com>
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+let doc;
+let div;
+let iframe;
+
+function createDocument()
+{
+  doc.title = "Inspector scrolling Tests";
+
+  iframe = doc.createElement("iframe");
+
+  iframe.addEventListener("load", function () {
+    iframe.removeEventListener("load", arguments.callee, false);
+
+    div = iframe.contentDocument.createElement("div");
+    div.textContent = "big div";
+    div.setAttribute("style", "height:500px; width:500px; border:1px solid gray;");
+    iframe.contentDocument.body.appendChild(div);
+    toggleInspector();
+  }, false);
+
+  iframe.src = "data:text/html,foo bar";
+  doc.body.appendChild(iframe);
+}
+
+function toggleInspector()
+{
+  Services.obs.addObserver(inspectNode, "inspector-opened", false);
+  InspectorUI.toggleInspectorUI();
+}
+
+function inspectNode()
+{
+  Services.obs.removeObserver(inspectNode, "inspector-opened", false);
+  Services.obs.addObserver(performScrollingTest, "inspector-highlighting", false);
+
+  executeSoon(function() { InspectorUI.inspectNode(div) });
+}
+
+function performScrollingTest()
+{
+  Services.obs.removeObserver(performScrollingTest, "inspector-highlighting", false);
+
+  let documentElement = InspectorUI.highlighter.iframeDoc.documentElement;
+  let highlighterWindow = InspectorUI.highlighter.iframe.contentWindow;
+  let divRect = iframe.getBoundingClientRect();
+
+  EventUtils.synthesizeMouseScroll(div, 10, 10,
+    {axis:"vertical", delta:50, type:"MozMousePixelScroll"},
+    iframe.contentWindow);
+
+  gBrowser.selectedBrowser.addEventListener("scroll", function() {
+    gBrowser.selectedBrowser.removeEventListener("scroll", arguments.callee, false);
+
+    is(iframe.contentDocument.body.scrollTop, 50, "inspected iframe scrolled");
+
+    div = iframe = doc = null;
+    InspectorUI.closeInspectorUI();
+    gBrowser.removeCurrentTab();
+    finish();
+  }, false);
+}
+
+function test()
+{
+  waitForExplicitFinish();
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", function() {
+    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
+    doc = content.document;
+    waitForFocus(createDocument, content);
+  }, true);
+
+  content.location = "data:text/html,mouse scrolling test for inspector";
+}
diff --git a/browser/base/content/test/inspector/browser_inspector_store.js b/browser/base/content/test/inspector/browser_inspector_store.js
new file mode 100644
--- /dev/null
+++ b/browser/base/content/test/inspector/browser_inspector_store.js
@@ -0,0 +1,106 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=2 et sw=2 tw=80: */
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is Inspector Store Tests.
+ *
+ * The Initial Developer of the Original Code is
+ * The Mozilla Foundation.
+ * Portions created by the Initial Developer are Copyright (C) 2010
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Mihai È˜ucan <mihai.sucan@gmail.com>
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+function test()
+{
+  ok(InspectorUI, "InspectorUI variable exists");
+  ok(!InspectorUI.inspecting, "Inspector is not highlighting");
+  is(InspectorStore.length, 0, "InspectorStore is empty");
+  ok(InspectorStore.isEmpty(), "InspectorStore is empty (confirmed)");
+  is(typeof InspectorStore.store, "object",
+    "InspectorStore.store is an object");
+
+  ok(InspectorStore.addStore("foo"), "addStore('foo') returns true");
+
+  is(InspectorStore.length, 1, "InspectorStore.length = 1");
+  ok(!InspectorStore.isEmpty(), "InspectorStore is not empty");
+  is(typeof InspectorStore.store.foo, "object", "store.foo is an object");
+
+  ok(InspectorStore.addStore("fooBar"), "addStore('fooBar') returns true");
+
+  is(InspectorStore.length, 2, "InspectorStore.length = 2");
+  is(typeof InspectorStore.store.fooBar, "object", "store.fooBar is an object");
+
+  ok(!InspectorStore.addStore("fooBar"), "addStore('fooBar') returns false");
+
+  ok(InspectorStore.deleteStore("fooBar"),
+    "deleteStore('fooBar') returns true");
+
+  is(InspectorStore.length, 1, "InspectorStore.length = 1");
+  ok(!InspectorStore.store.fooBar, "store.fooBar is deleted");
+
+  ok(!InspectorStore.deleteStore("fooBar"),
+    "deleteStore('fooBar') returns false");
+
+  ok(!InspectorStore.hasID("fooBar"), "hasID('fooBar') returns false");
+
+  ok(InspectorStore.hasID("foo"), "hasID('foo') returns true");
+
+  ok(InspectorStore.setValue("foo", "key1", "val1"), "setValue() returns true");
+
+  ok(!InspectorStore.setValue("fooBar", "key1", "val1"),
+    "setValue() returns false");
+
+  is(InspectorStore.getValue("foo", "key1"), "val1",
+    "getValue() returns the correct value");
+
+  is(InspectorStore.store.foo.key1, "val1", "store.foo.key1 = 'val1'");
+
+  ok(!InspectorStore.getValue("fooBar", "key1"),
+    "getValue() returns null for unknown store");
+
+  ok(!InspectorStore.getValue("fooBar", "key1"),
+    "getValue() returns null for unknown store");
+
+  ok(InspectorStore.deleteValue("foo", "key1"),
+    "deleteValue() returns true for known value");
+
+  ok(!InspectorStore.store.foo.key1, "deleteValue() removed the value.");
+
+  ok(!InspectorStore.deleteValue("fooBar", "key1"),
+    "deleteValue() returns false for unknown store.");
+
+  ok(!InspectorStore.deleteValue("foo", "key1"),
+    "deleteValue() returns false for unknown value.");
+
+  ok(InspectorStore.deleteStore("foo"), "deleteStore('foo') returns true");
+
+  ok(InspectorStore.isEmpty(), "InspectorStore is empty");
+}
+
diff --git a/browser/base/content/test/inspector/browser_inspector_tab_switch.js b/browser/base/content/test/inspector/browser_inspector_tab_switch.js
new file mode 100644
--- /dev/null
+++ b/browser/base/content/test/inspector/browser_inspector_tab_switch.js
@@ -0,0 +1,180 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=2 et sw=2 tw=80: */
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is Inspector Tab Switch Tests.
+ *
+ * The Initial Developer of the Original Code is
+ * The Mozilla Foundation.
+ * Portions created by the Initial Developer are Copyright (C) 2010
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Rob Campbell <rcampbell@mozilla.com>
+ *   Mihai È˜ucan <mihai.sucan@gmail.com>
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+let div;
+let tab1;
+let tab2;
+let tab1window;
+
+function inspectorTabOpen1()
+{
+  ok(InspectorUI, "InspectorUI variable exists");
+  ok(!InspectorUI.inspecting, "Inspector is not highlighting");
+  ok(InspectorStore.isEmpty(), "InspectorStore is empty");
+
+  Services.obs.addObserver(inspectorUIOpen1, "inspector-opened", false);
+  InspectorUI.openInspectorUI();
+}
+
+function inspectorUIOpen1()
+{
+  Services.obs.removeObserver(inspectorUIOpen1, "inspector-opened", false);
+
+  // Make sure the inspector is open.
+  ok(InspectorUI.inspecting, "Inspector is highlighting");
+  ok(InspectorUI.isTreePanelOpen, "Inspector Tree Panel is open");
+  ok(!InspectorStore.isEmpty(), "InspectorStore is not empty");
+  is(InspectorStore.length, 1, "InspectorStore.length = 1");
+
+  // Highlight a node.
+  div = content.document.getElementsByTagName("div")[0];
+  InspectorUI.inspectNode(div);
+  is(InspectorUI.selection, div, "selection matches the div element");
+
+  // Open the second tab.
+  tab2 = gBrowser.addTab();
+  gBrowser.selectedTab = tab2;
+
+  gBrowser.selectedBrowser.addEventListener("load", function(evt) {
+    gBrowser.selectedBrowser.removeEventListener(evt.type, arguments.callee,
+      true);
+    waitForFocus(inspectorTabOpen2, content);
+  }, true);
+
+  content.location = "data:text/html,<p>tab 2: the inspector should close now";
+}
+
+function inspectorTabOpen2()
+{
+  // Make sure the inspector is closed.
+  ok(!InspectorUI.inspecting, "Inspector is not highlighting");
+  ok(!InspectorUI.isPanelOpen, "Inspector Tree Panel is closed");
+  is(InspectorStore.length, 1, "InspectorStore.length = 1");
+
+  // Activate the inspector again.
+  executeSoon(function() {
+    Services.obs.addObserver(inspectorUIOpen2, "inspector-opened", false);
+    InspectorUI.openInspectorUI();
+  });
+}
+
+function inspectorUIOpen2()
+{
+  Services.obs.removeObserver(inspectorUIOpen2, "inspector-opened", false);
+
+  // Make sure the inspector is open.
+  ok(InspectorUI.inspecting, "Inspector is highlighting");
+  ok(InspectorUI.isTreePanelOpen, "Inspector Tree Panel is open");
+  is(InspectorStore.length, 2, "InspectorStore.length = 2");
+
+  // Disable highlighting.
+  InspectorUI.toggleInspection();
+  ok(!InspectorUI.inspecting, "Inspector is not highlighting");
+
+  // Switch back to tab 1.
+  executeSoon(function() {
+    Services.obs.addObserver(inspectorFocusTab1, "inspector-opened", false);
+    gBrowser.selectedTab = tab1;
+  });
+}
+
+function inspectorFocusTab1()
+{
+  Services.obs.removeObserver(inspectorFocusTab1, "inspector-opened", false);
+
+  // Make sure the inspector is still open.
+  ok(InspectorUI.inspecting, "Inspector is highlighting");
+  ok(InspectorUI.isTreePanelOpen, "Inspector Tree Panel is open");
+  is(InspectorStore.length, 2, "InspectorStore.length = 2");
+  is(InspectorUI.selection, div, "selection matches the div element");
+
+  // Switch back to tab 2.
+  Services.obs.addObserver(inspectorFocusTab2, "inspector-opened", false);
+  gBrowser.selectedTab = tab2;
+}
+
+function inspectorFocusTab2()
+{
+  Services.obs.removeObserver(inspectorFocusTab2, "inspector-opened", false);
+
+  // Make sure the inspector is still open.
+  ok(!InspectorUI.inspecting, "Inspector is not highlighting");
+  ok(InspectorUI.isTreePanelOpen, "Inspector Tree Panel is open");
+  is(InspectorStore.length, 2, "InspectorStore.length = 2");
+  isnot(InspectorUI.selection, div, "selection does not match the div element");
+
+  // Remove tab 1.
+  tab1window = gBrowser.getBrowserForTab(tab1).contentWindow;
+  tab1window.addEventListener("pagehide", inspectorTabUnload1, false);
+  gBrowser.removeTab(tab1);
+}
+
+function inspectorTabUnload1(evt)
+{
+  dump("inspectorTabUnload1\n");
+  tab1window.removeEventListener(evt.type, arguments.callee, false);
+  tab1window = tab1 = tab2 = div = null;
+
+  // Make sure the Inspector is still open and that the state is correct.
+  ok(!InspectorUI.inspecting, "Inspector is not highlighting");
+  ok(InspectorUI.isTreePanelOpen, "Inspector Tree Panel is open");
+  is(InspectorStore.length, 1, "InspectorStore.length = 1");
+
+  InspectorUI.closeInspectorUI();
+  gBrowser.removeCurrentTab();
+  finish();
+}
+
+function test()
+{
+  waitForExplicitFinish();
+
+  tab1 = gBrowser.addTab();
+  gBrowser.selectedTab = tab1;
+  gBrowser.selectedBrowser.addEventListener("load", function(evt) {
+    gBrowser.selectedBrowser.removeEventListener(evt.type, arguments.callee,
+      true);
+    waitForFocus(inspectorTabOpen1, content);
+  }, true);
+
+  content.location = "data:text/html,<p>tab switching tests for inspector" +
+    "<div>tab 1</div>";
+}
+
diff --git a/browser/base/content/test/inspector/browser_inspector_treePanel_input.html b/browser/base/content/test/inspector/browser_inspector_treePanel_input.html
new file mode 100644
--- /dev/null
+++ b/browser/base/content/test/inspector/browser_inspector_treePanel_input.html
@@ -0,0 +1,33 @@
+<!DOCTYPE html>
+<html xml:lang="en">
+  <head>
+    <meta charset="utf-8">
+    <title>Inspector tree panel test</title>
+    <style type="text/css"><!--
+      #duplicate { color: green }
+    --></style>
+    <script type="text/javascript"><!--
+      function fooBarBaz(arg1) {
+        return true; // do nothing
+      }
+    // --></script>
+  </head>
+  <body arbitrary:attribute="value">
+    <p>Inspector tree panel test.</p>
+
+    <div id="foo" class="foo bar baz" style="border:1px solid red;
+      unknownProperty: unknownValue; color: withUnkownValue">
+      <unknownTag unknownAttribute="fooBar">
+        <p unknownAttribute="fooBar" data-test1="value">hello world!</p>
+      </unknownTag>
+    </div>
+
+    <div id="duplicate" id="duplicate" id="different" class="test" class="foo"
+      fooBar="baz" fooBar="bazbaz">test</div>
+
+    <iframe src="data:text/html,&lt;div&gt;hello from an iframe!&lt;/div&gt;">no
+      frames!</iframe>
+
+    <!-- hello world from a comment! -->
+  </body>
+</html>
diff --git a/browser/base/content/test/inspector/browser_inspector_treePanel_output.js b/browser/base/content/test/inspector/browser_inspector_treePanel_output.js
new file mode 100644
--- /dev/null
+++ b/browser/base/content/test/inspector/browser_inspector_treePanel_output.js
@@ -0,0 +1,123 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=2 et sw=2 tw=80: */
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is Inspector iframe Tests.
+ *
+ * The Initial Developer of the Original Code is
+ * The Mozilla Foundation.
+ * Portions created by the Initial Developer are Copyright (C) 2010
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Mihai È˜ucan <mihai.sucan@gmail.com>
+ *   Rob Campbell <rcampbell@mozilla.com>
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+let doc = null;
+let xhr = null;
+let expectedResult = "";
+
+const TEST_URI = "http://mochi.test:8888/browser/browser/base/content/test/inspector/browser_inspector_treePanel_input.html";
+const RESULT_URI = "http://mochi.test:8888/browser/browser/base/content/test/inspector/browser_inspector_treePanel_result.html";
+
+function tabFocused()
+{
+  xhr = new XMLHttpRequest();
+  xhr.onreadystatechange = xhr_onReadyStateChange;
+  xhr.open("GET", RESULT_URI, true);
+  xhr.send(null);
+}
+
+function xhr_onReadyStateChange() {
+  if (xhr.readyState != 4) {
+    return;
+  }
+
+  is(xhr.status, 200, "xhr.status is 200");
+  ok(!!xhr.responseText, "xhr.responseText is available");
+  expectedResult = xhr.responseText.replace(/^\s+|\s+$/mg, '');
+  xhr = null;
+
+  Services.obs.addObserver(inspectorOpened, "inspector-opened", false);
+  InspectorUI.openInspectorUI();
+}
+
+function inspectorOpened()
+{
+  Services.obs.removeObserver(inspectorOpened, "inspector-opened", false);
+
+  ok(InspectorUI.inspecting, "Inspector is highlighting");
+  ok(InspectorUI.isTreePanelOpen, "Inspector Tree Panel is open");
+  InspectorUI.stopInspecting();
+  ok(!InspectorUI.inspecting, "Inspector is not highlighting");
+
+  let elements = doc.querySelectorAll("meta, script, style, p[unknownAttribute]");
+  for (let i = 0; i < elements.length; i++) {
+    InspectorUI.inspectNode(elements[i]);
+  }
+
+  let iframe = doc.querySelector("iframe");
+  ok(iframe, "Found the iframe tag");
+  ok(iframe.contentDocument, "Found the iframe.contentDocument");
+
+  let iframeDiv = iframe.contentDocument.querySelector("div");
+  ok(iframeDiv, "Found the div element inside the iframe");
+  InspectorUI.inspectNode(iframeDiv);
+
+  ok(InspectorUI.treePanelDiv, "InspectorUI.treePanelDiv is available");
+  is(InspectorUI.treePanelDiv.innerHTML.replace(/^\s+|\s+$/mg, ''),
+    expectedResult, "treePanelDiv.innerHTML is correct");
+  expectedResult = null;
+
+  Services.obs.addObserver(inspectorClosed, "inspector-closed", false);
+  InspectorUI.closeInspectorUI();
+}
+
+function inspectorClosed()
+{
+  Services.obs.removeObserver(inspectorClosed, "inspector-closed", false);
+
+  ok(!InspectorUI.inspecting, "Inspector is not highlighting");
+  ok(!InspectorUI.isTreePanelOpen, "Inspector Tree Panel is not open");
+
+  gBrowser.removeCurrentTab();
+  finish();
+}
+
+function test()
+{
+  waitForExplicitFinish();
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", function(evt) {
+    gBrowser.selectedBrowser.removeEventListener(evt.type, arguments.callee, true);
+    doc = content.document;
+    waitForFocus(tabFocused, content);
+  }, true);
+
+  content.location = TEST_URI;
+}
diff --git a/browser/base/content/test/inspector/browser_inspector_treePanel_result.html b/browser/base/content/test/inspector/browser_inspector_treePanel_result.html
new file mode 100644
--- /dev/null
+++ b/browser/base/content/test/inspector/browser_inspector_treePanel_result.html
@@ -0,0 +1,8 @@
+<div role="presentation" class="nodeBox htmlNodeBox containerNodeBox  repIgnore open"><div class="docType ">&lt;!DOCTYPE html&gt;</div><div role="presentation" class="nodeLabel "><img role="presentation" class="twisty "><span role="treeitem" aria-expanded="true" class="nodeLabelBox repTarget ">&lt;<span class="nodeTag ">html</span><span class="nodeAttr editGroup ">&nbsp;<span class="nodeName editable ">xml:lang</span>="<span class="nodeValue editable ">en</span>"</span><span class="nodeBracket editable insertBefore ">&gt;</span></span></div><div role="group" class="nodeChildBox "><div role="presentation" class="nodeBox containerNodeBox  repIgnore open"><div role="presentation" class="nodeLabel "><img role="presentation" class="twisty "><span role="treeitem" aria-expanded="true" class="nodeLabelBox repTarget ">&lt;<span class="nodeTag ">head</span><span class="nodeBracket editable insertBefore ">&gt;</span></span></div><div role="group" class="nodeChildBox "><div role="presentation" class="nodeBox emptyNodeBox  repIgnore"><div role="presentation" class="nodeLabel "><span role="treeitem" class="nodeLabelBox repTarget ">&lt;<span class="nodeTag ">meta</span><span class="nodeAttr editGroup ">&nbsp;<span class="nodeName editable ">charset</span>="<span class="nodeValue editable ">utf-8</span>"</span><span class="nodeBracket editable insertBefore ">&gt;</span></span></div></div><div role="presentation" class="nodeBox textNodeBox  repIgnore "><div role="presentation" class="nodeLabel "><span role="treeitem" class="nodeLabelBox repTarget ">&lt;<span class="nodeTag ">title</span><span class="nodeBracket editable insertBefore ">&gt;</span><span class="nodeText editable "><span class="  ">Inspector tree panel test</span></span>&lt;/<span class="nodeTag ">title</span>&gt;</span></div></div><div role="presentation" class="nodeBox containerNodeBox  repIgnore open"><div role="presentation" class="nodeLabel "><img role="presentation" class="twisty "><span role="treeitem" aria-expanded="true" class="nodeLabelBox repTarget ">&lt;<span class="nodeTag ">style</span><span class="nodeAttr editGroup ">&nbsp;<span class="nodeName editable ">type</span>="<span class="nodeValue editable ">text/css</span>"</span><span class="nodeBracket editable insertBefore ">&gt;</span></span></div><div role="group" class="nodeChildBox "><div role="presentation" class="nodeBox "><span class="nodeText editable "><span class="  ">&lt;!--
+#duplicate { color: green }
+--&gt;</span></span></div></div><div role="presentation" class="nodeCloseLabel "><span class="nodeCloseLabelBox repTarget ">&lt;/<span class="nodeTag ">style</span>&gt;</span></div></div><div role="presentation" class="nodeBox containerNodeBox  repIgnore open"><div role="presentation" class="nodeLabel "><img role="presentation" class="twisty "><span role="treeitem" aria-expanded="true" class="nodeLabelBox repTarget ">&lt;<span class="nodeTag ">script</span><span class="nodeAttr editGroup ">&nbsp;<span class="nodeName editable ">type</span>="<span class="nodeValue editable ">text/javascript</span>"</span><span class="nodeBracket editable insertBefore ">&gt;</span></span></div><div role="group" class="nodeChildBox "><div role="presentation" class="nodeBox "><span class="nodeText editable "><span class="  ">&lt;!--
+function fooBarBaz(arg1) {
+return true; // do nothing
+}
+// --&gt;</span></span></div></div><div role="presentation" class="nodeCloseLabel "><span class="nodeCloseLabelBox repTarget ">&lt;/<span class="nodeTag ">script</span>&gt;</span></div></div></div><div role="presentation" class="nodeCloseLabel "><span class="nodeCloseLabelBox repTarget ">&lt;/<span class="nodeTag ">head</span>&gt;</span></div></div><div role="presentation" class="nodeBox containerNodeBox  repIgnore open"><div role="presentation" class="nodeLabel "><img role="presentation" class="twisty "><span role="treeitem" aria-expanded="true" class="nodeLabelBox repTarget ">&lt;<span class="nodeTag ">body</span><span class="nodeAttr editGroup ">&nbsp;<span class="nodeName editable ">arbitrary:attribute</span>="<span class="nodeValue editable ">value</span>"</span><span class="nodeBracket editable insertBefore ">&gt;</span></span></div><div role="group" class="nodeChildBox "><div role="presentation" class="nodeBox textNodeBox  repIgnore "><div role="presentation" class="nodeLabel "><span role="treeitem" class="nodeLabelBox repTarget ">&lt;<span class="nodeTag ">p</span><span class="nodeBracket editable insertBefore ">&gt;</span><span class="nodeText editable "><span class="  ">Inspector tree panel test.</span></span>&lt;/<span class="nodeTag ">p</span>&gt;</span></div></div><div role="presentation" class="nodeBox containerNodeBox  repIgnore open"><div role="presentation" class="nodeLabel "><img role="presentation" class="twisty "><span role="treeitem" aria-expanded="true" class="nodeLabelBox repTarget ">&lt;<span class="nodeTag ">div</span><span class="nodeAttr editGroup ">&nbsp;<span class="nodeName editable ">id</span>="<span class="nodeValue editable ">foo</span>"</span><span class="nodeAttr editGroup ">&nbsp;<span class="nodeName editable ">class</span>="<span class="nodeValue editable ">foo bar baz</span>"</span><span class="nodeAttr editGroup ">&nbsp;<span class="nodeName editable ">style</span>="<span class="nodeValue editable ">border:1px solid red;
+unknownProperty: unknownValue; color: withUnkownValue</span>"</span><span class="nodeBracket editable insertBefore ">&gt;</span></span></div><div role="group" class="nodeChildBox "><div role="presentation" class="nodeBox containerNodeBox  repIgnore open"><div role="presentation" class="nodeLabel "><img role="presentation" class="twisty "><span role="treeitem" aria-expanded="true" class="nodeLabelBox repTarget ">&lt;<span class="nodeTag ">unknowntag</span><span class="nodeAttr editGroup ">&nbsp;<span class="nodeName editable ">unknownattribute</span>="<span class="nodeValue editable ">fooBar</span>"</span><span class="nodeBracket editable insertBefore ">&gt;</span></span></div><div role="group" class="nodeChildBox "><div role="presentation" class="nodeBox textNodeBox  repIgnore"><div role="presentation" class="nodeLabel "><span role="treeitem" class="nodeLabelBox repTarget ">&lt;<span class="nodeTag ">p</span><span class="nodeAttr editGroup ">&nbsp;<span class="nodeName editable ">data-test1</span>="<span class="nodeValue editable ">value</span>"</span><span class="nodeAttr editGroup ">&nbsp;<span class="nodeName editable ">unknownattribute</span>="<span class="nodeValue editable ">fooBar</span>"</span><span class="nodeBracket editable insertBefore ">&gt;</span><span class="nodeText editable "><span class="  ">hello world!</span></span>&lt;/<span class="nodeTag ">p</span>&gt;</span></div></div></div><div role="presentation" class="nodeCloseLabel "><span class="nodeCloseLabelBox repTarget ">&lt;/<span class="nodeTag ">unknowntag</span>&gt;</span></div></div></div><div role="presentation" class="nodeCloseLabel "><span class="nodeCloseLabelBox repTarget ">&lt;/<span class="nodeTag ">div</span>&gt;</span></div></div><div role="presentation" class="nodeBox textNodeBox  repIgnore "><div role="presentation" class="nodeLabel "><span role="treeitem" class="nodeLabelBox repTarget ">&lt;<span class="nodeTag ">div</span><span class="nodeAttr editGroup ">&nbsp;<span class="nodeName editable ">id</span>="<span class="nodeValue editable ">duplicate</span>"</span><span class="nodeAttr editGroup ">&nbsp;<span class="nodeName editable ">class</span>="<span class="nodeValue editable ">test</span>"</span><span class="nodeAttr editGroup ">&nbsp;<span class="nodeName editable ">foobar</span>="<span class="nodeValue editable ">baz</span>"</span><span class="nodeBracket editable insertBefore ">&gt;</span><span class="nodeText editable "><span class="  ">test</span></span>&lt;/<span class="nodeTag ">div</span>&gt;</span></div></div><div role="presentation" class="nodeBox containerNodeBox  repIgnore open"><div role="presentation" class="nodeLabel "><img role="presentation" class="twisty "><span role="treeitem" aria-expanded="true" class="nodeLabelBox repTarget ">&lt;<span class="nodeTag ">iframe</span><span class="nodeAttr editGroup ">&nbsp;<span class="nodeName editable ">src</span>="<span class="nodeValue editable ">data:text/html,&lt;div&gt;hello from an iframe!&lt;/div&gt;</span>"</span><span class="nodeBracket editable insertBefore ">&gt;</span></span></div><div role="group" class="nodeChildBox "><div role="presentation" class="nodeBox containerNodeBox  repIgnore open"><div role="presentation" class="nodeLabel "><img role="presentation" class="twisty "><span role="treeitem" aria-expanded="true" class="nodeLabelBox repTarget ">&lt;<span class="nodeTag ">html</span><span class="nodeBracket editable insertBefore ">&gt;</span></span></div><div role="group" class="nodeChildBox "><div role="presentation" class="nodeBox textNodeBox  repIgnore "><div role="presentation" class="nodeLabel "><span role="treeitem" class="nodeLabelBox repTarget ">&lt;<span class="nodeTag ">head</span><span class="nodeBracket editable insertBefore ">&gt;</span><span class="nodeText editable "><span class="  "></span></span>&lt;/<span class="nodeTag ">head</span>&gt;</span></div></div><div role="presentation" class="nodeBox containerNodeBox  repIgnore open"><div role="presentation" class="nodeLabel "><img role="presentation" class="twisty "><span role="treeitem" aria-expanded="true" class="nodeLabelBox repTarget ">&lt;<span class="nodeTag ">body</span><span class="nodeBracket editable insertBefore ">&gt;</span></span></div><div role="group" class="nodeChildBox "><div role="presentation" class="nodeBox textNodeBox  repIgnore selected"><div role="presentation" class="nodeLabel "><span role="treeitem" class="nodeLabelBox repTarget ">&lt;<span class="nodeTag ">div</span><span class="nodeBracket editable insertBefore ">&gt;</span><span class="nodeText editable "><span class="  ">hello from an iframe!</span></span>&lt;/<span class="nodeTag ">div</span>&gt;</span></div></div></div><div role="presentation" class="nodeCloseLabel "><span class="nodeCloseLabelBox repTarget ">&lt;/<span class="nodeTag ">body</span>&gt;</span></div></div></div><div role="presentation" class="nodeCloseLabel "><span class="nodeCloseLabelBox repTarget ">&lt;/<span class="nodeTag ">html</span>&gt;</span></div></div></div><div role="presentation" class="nodeCloseLabel "><span class="nodeCloseLabelBox repTarget ">&lt;/<span class="nodeTag ">iframe</span>&gt;</span></div></div><div role="presentation" class="nodeBox nodeComment ">&lt;!--<span class="nodeComment editable "> hello world from a comment! </span>--&gt;</div></div><div role="presentation" class="nodeCloseLabel "><span class="nodeCloseLabelBox repTarget ">&lt;/<span class="nodeTag ">body</span>&gt;</span></div></div></div><div role="presentation" class="nodeCloseLabel "><span class="nodeCloseLabelBox repTarget ">&lt;/<span class="nodeTag ">html</span>&gt;</span></div></div>
diff --git a/browser/base/content/test/inspector/browser_inspector_treeSelection.js b/browser/base/content/test/inspector/browser_inspector_treeSelection.js
new file mode 100644
--- /dev/null
+++ b/browser/base/content/test/inspector/browser_inspector_treeSelection.js
@@ -0,0 +1,110 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=2 et sw=2 tw=80: */
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is Inspector Tree Selection Tests.
+ *
+ * The Initial Developer of the Original Code is
+ * The Mozilla Foundation.
+ * Portions created by the Initial Developer are Copyright (C) 2010
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Rob Campbell <rcampbell@mozilla.com>
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+let doc;
+let h1;
+
+function createDocument()
+{
+  let div = doc.createElement("div");
+  let h1 = doc.createElement("h1");
+  let p1 = doc.createElement("p");
+  let p2 = doc.createElement("p");
+  doc.title = "Inspector Tree Selection Test";
+  h1.textContent = "Inspector Tree Selection Test";
+  p1.textContent = "This is some example text";
+  p2.textContent = "Lorem ipsum dolor sit amet, consectetur adipisicing " +
+    "elit, sed do eiusmod tempor incididunt ut labore et dolore magna " +
+    "aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco " +
+    "laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure " +
+    "dolor in reprehenderit in voluptate velit esse cillum dolore eu " +
+    "fugiat nulla pariatur. Excepteur sint occaecat cupidatat non " +
+    "proident, sunt in culpa qui officia deserunt mollit anim id est laborum.";
+  div.appendChild(h1);
+  div.appendChild(p1);
+  div.appendChild(p2);
+  doc.body.appendChild(div);
+  setupSelectionTests();
+}
+
+function setupSelectionTests()
+{
+  h1 = doc.querySelectorAll("h1")[0];
+  ok(h1, "we have the header node");
+  Services.obs.addObserver(runSelectionTests, "inspector-opened", false);
+  InspectorUI.openInspectorUI();
+}
+
+function runSelectionTests()
+{
+  info("inspector-opened received");
+  Services.obs.removeObserver(runSelectionTests, "inspector-opened", false);
+  Services.obs.addObserver(performTestComparisons, "inspector-highlighting", false);
+  executeSoon(function() { InspectorUI.inspectNode(h1) });
+}
+
+function performTestComparisons(evt)
+{
+  info("inspector-highlighting received");
+  Services.obs.removeObserver(performTestComparisons, "inspector-highlighting", false);
+  is(h1, InspectorUI.selection, "selection matches node");
+  ok(InspectorUI.highlighter.isHighlighting, "highlighter is highlighting");
+  is(InspectorUI.highlighter.highlitNode, h1, "highlighter highlighting correct node");
+  finishUp();
+}
+
+function finishUp() {
+  InspectorUI.closeInspectorUI(true);
+  gBrowser.removeCurrentTab();
+  finish();
+}
+
+function test()
+{
+  waitForExplicitFinish();
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", function() {
+    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
+    doc = content.document;
+    waitForFocus(createDocument, content);
+  }, true);
+
+  content.location = "data:text/html,basic tests for inspector";
+}
+
diff --git a/browser/base/jar.mn b/browser/base/jar.mn
--- a/browser/base/jar.mn
+++ b/browser/base/jar.mn
@@ -23,16 +23,17 @@ browser.jar:
         content/browser/aboutHome-restore-icon-small.png    (content/aboutHome-restore-icon-small.png)
         content/browser/aboutRobots-icon.png          (content/aboutRobots-icon.png)
         content/browser/aboutRobots-widget-left.png   (content/aboutRobots-widget-left.png)
 *       content/browser/browser.css                   (content/browser.css)
 *       content/browser/browser.js                    (content/browser.js)
 *       content/browser/browser.xul                   (content/browser.xul)
 *       content/browser/browser-tabPreviews.xml       (content/browser-tabPreviews.xml)
 *       content/browser/fullscreen-video.xhtml        (content/fullscreen-video.xhtml)
+        content/browser/highlighter.xhtml             (content/highlighter.xhtml)
 *       content/browser/inspector.html                (content/inspector.html)
 *       content/browser/scratchpad.xul                (content/scratchpad.xul)
 *       content/browser/scratchpad.js                 (content/scratchpad.js)
 *       content/browser/pageinfo/pageInfo.xul         (content/pageinfo/pageInfo.xul)
 *       content/browser/pageinfo/pageInfo.js          (content/pageinfo/pageInfo.js)
 *       content/browser/pageinfo/pageInfo.css         (content/pageinfo/pageInfo.css)
 *       content/browser/pageinfo/pageInfo.xml         (content/pageinfo/pageInfo.xml)
 *       content/browser/pageinfo/feeds.js             (content/pageinfo/feeds.js)
diff --git a/browser/themes/gnomestripe/browser/highlighter.css b/browser/themes/gnomestripe/browser/highlighter.css
new file mode 100644
--- /dev/null
+++ b/browser/themes/gnomestripe/browser/highlighter.css
@@ -0,0 +1,104 @@
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is the Mozilla Inspector Module.
+ *
+ * The Initial Developer of the Original Code is
+ * The Mozilla Foundation.
+ * Portions created by the Initial Developer are Copyright (C) 2011
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Rob Campbell <rcampbell@mozilla.com> (original author)
+ *   Paul Rouget <paul@mozilla.com>
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+body {
+  margin: 0;
+  overflow: hidden;
+}
+
+#close-button {
+  background-image: url("KUI-close.png");
+  border: none;
+  padding: 0;
+  width: 24px;
+  height: 24px;
+  position: fixed;
+  top: 12px;
+  right: 12px;
+  z-index: 1;
+  cursor: pointer;
+}
+
+.veil {
+  background-color: rgba(0, 0, 0, 0.5);
+}
+
+.veil, #veil-middlebox, #veil-transparentbox {
+  -moz-transition: 0.1s;
+  -moz-transition-timing-function: linear;
+}
+
+#veil-container {
+  position: absolute;
+  top: 0;
+  left: 0;
+  width: 100%;
+  height: 100%;
+}
+
+#veil {
+  width: 100%;
+  height: 100%;
+  display: -moz-box;
+  -moz-box-orient: vertical;
+}
+
+#veil-topbox, #veil-bottombox {
+  width: 100%;
+}
+
+#veil-bottombox {
+  -moz-box-flex: 1;
+}
+
+#veil-middlebox {
+  display: -moz-box;
+  -moz-box-orient: horizontal;
+}
+
+#veil-leftbox, #veil-rightbox {
+  height: 100%;
+}
+
+#veil-rightbox {
+  -moz-box-flex: 1;
+}
+
+#veil {
+  vertical-align: top;
+}
diff --git a/browser/themes/gnomestripe/browser/jar.mn b/browser/themes/gnomestripe/browser/jar.mn
--- a/browser/themes/gnomestripe/browser/jar.mn
+++ b/browser/themes/gnomestripe/browser/jar.mn
@@ -12,16 +12,17 @@ browser.jar:
   skin/classic/browser/actionicon-tab.png
 * skin/classic/browser/browser.css                    (browser.css)
 * skin/classic/browser/engineManager.css              (engineManager.css)
   skin/classic/browser/fullscreen-video.css
   skin/classic/browser/inspector.css
   skin/classic/browser/Geolocation-16.png
   skin/classic/browser/Geolocation-64.png
   skin/classic/browser/Go-arrow.png
+* skin/classic/browser/highlighter.css
   skin/classic/browser/identity.png
   skin/classic/browser/Info.png
   skin/classic/browser/KUI-close.png
   skin/classic/browser/monitor.png
   skin/classic/browser/monitor_16-10.png
 * skin/classic/browser/pageInfo.css
   skin/classic/browser/pageInfo.png
   skin/classic/browser/page-livemarks.png
diff --git a/browser/themes/pinstripe/browser/highlighter.css b/browser/themes/pinstripe/browser/highlighter.css
new file mode 100644
--- /dev/null
+++ b/browser/themes/pinstripe/browser/highlighter.css
@@ -0,0 +1,104 @@
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is the Mozilla Inspector Module.
+ *
+ * The Initial Developer of the Original Code is
+ * The Mozilla Foundation.
+ * Portions created by the Initial Developer are Copyright (C) 2011
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Rob Campbell <rcampbell@mozilla.com> (original author)
+ *   Paul Rouget <paul@mozilla.com>
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+body {
+  margin: 0;
+  overflow: hidden;
+}
+
+#close-button {
+  background-image: url("KUI-close.png");
+  border: none;
+  padding: 0;
+  width: 24px;
+  height: 24px;
+  position: fixed;
+  top: 12px;
+  right: 12px;
+  z-index: 1;
+  cursor: pointer;
+}
+
+.veil {
+  background-color: rgba(0, 0, 0, 0.5);
+}
+
+.veil, #veil-middlebox, #veil-transparentbox {
+  -moz-transition: 0.1s;
+  -moz-transition-timing-function: linear;
+}
+
+#veil-container {
+  position: absolute;
+  top: 0;
+  left: 0;
+  width: 100%;
+  height: 100%;
+}
+
+#veil {
+  width: 100%;
+  height: 100%;
+  display: -moz-box;
+  -moz-box-orient: vertical;
+}
+
+#veil-topbox, #veil-bottombox {
+  width: 100%;
+}
+
+#veil-bottombox {
+  -moz-box-flex: 1;
+}
+
+#veil-middlebox {
+  display: -moz-box;
+  -moz-box-orient: horizontal;
+}
+
+#veil-leftbox, #veil-rightbox {
+  height: 100%;
+}
+
+#veil-rightbox {
+  -moz-box-flex: 1;
+}
+
+#veil {
+  vertical-align: top;
+}
diff --git a/browser/themes/pinstripe/browser/jar.mn b/browser/themes/pinstripe/browser/jar.mn
--- a/browser/themes/pinstripe/browser/jar.mn
+++ b/browser/themes/pinstripe/browser/jar.mn
@@ -10,16 +10,17 @@ browser.jar:
 #endif
   skin/classic/browser/actionicon-tab.png
 * skin/classic/browser/browser.css                          (browser.css)
 * skin/classic/browser/engineManager.css                    (engineManager.css)
   skin/classic/browser/fullscreen-video.css
   skin/classic/browser/Geolocation-16.png
   skin/classic/browser/Geolocation-64.png
   skin/classic/browser/Go-arrow.png
+* skin/classic/browser/highlighter.css
   skin/classic/browser/home.png
   skin/classic/browser/hud-style-check-box-checked.png
   skin/classic/browser/hud-style-check-box-empty.png
   skin/classic/browser/hud-style-dropmarker-double-arrows.png
   skin/classic/browser/hud-style-expander-closed.png
   skin/classic/browser/hud-style-expander-open.png
   skin/classic/browser/hud-style-new-folder-plus-sign.png
   skin/classic/browser/hud-style-twisties.png
diff --git a/browser/themes/winstripe/browser/highlighter.css b/browser/themes/winstripe/browser/highlighter.css
new file mode 100644
--- /dev/null
+++ b/browser/themes/winstripe/browser/highlighter.css
@@ -0,0 +1,105 @@
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is the Mozilla Inspector Module.
+ *
+ * The Initial Developer of the Original Code is
+ * The Mozilla Foundation.
+ * Portions created by the Initial Developer are Copyright (C) 2011
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Rob Campbell <rcampbell@mozilla.com> (original author)
+ *   Paul Rouget <paul@mozilla.com>
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+body {
+  margin: 0;
+  overflow: hidden;
+}
+
+#close-button {
+  background-image: url("KUI-close.png");
+  border: none;
+  padding: 0;
+  width: 24px;
+  height: 24px;
+  position: fixed;
+  top: 12px;
+  right: 12px;
+  z-index: 1;
+  cursor: pointer;
+}
+
+.veil {
+  background-color: rgba(0, 0, 0, 0.5);
+}
+
+.veil, #veil-middlebox, #veil-transparentbox {
+  -moz-transition: 0.1s;
+  -moz-transition-timing-function: linear;
+}
+
+#veil-container {
+  position: absolute;
+  top: 0;
+  left: 0;
+  width: 100%;
+  height: 100%;
+}
+
+#veil {
+  width: 100%;
+  height: 100%;
+  display: -moz-box;
+  -moz-box-orient: vertical;
+}
+
+#veil-topbox, #veil-bottombox {
+  width: 100%;
+}
+
+#veil-bottombox {
+  -moz-box-flex: 1;
+}
+
+#veil-middlebox {
+  display: -moz-box;
+  -moz-box-orient: horizontal;
+}
+
+#veil-leftbox, #veil-rightbox {
+  height: 100%;
+}
+
+#veil-rightbox {
+  -moz-box-flex: 1;
+}
+
+#veil {
+  vertical-align: top;
+}
+
diff --git a/browser/themes/winstripe/browser/jar.mn b/browser/themes/winstripe/browser/jar.mn
--- a/browser/themes/winstripe/browser/jar.mn
+++ b/browser/themes/winstripe/browser/jar.mn
@@ -14,16 +14,17 @@ browser.jar:
         skin/classic/browser/actionicon-tab.png
         skin/classic/browser/appmenu-icons.png
         skin/classic/browser/appmenu-dropmarker.png
 *       skin/classic/browser/browser.css                             (browser.css)
 *       skin/classic/browser/engineManager.css                       (engineManager.css)
         skin/classic/browser/fullscreen-video.css
         skin/classic/browser/Geolocation-16.png
         skin/classic/browser/Geolocation-64.png
+*       skin/classic/browser/highlighter.css
         skin/classic/browser/Info.png                                (Info.png)
         skin/classic/browser/identity.png                            (identity.png)
         skin/classic/browser/keyhole-forward-mask.svg
         skin/classic/browser/KUI-background.png
         skin/classic/browser/KUI-close.png
         skin/classic/browser/mainwindow-dropdown-arrow.png
         skin/classic/browser/pageInfo.css
         skin/classic/browser/pageInfo.png                            (pageInfo.png)
@@ -128,16 +129,17 @@ browser.jar:
         skin/classic/aero/browser/actionicon-tab.png                 (actionicon-tab.png)
         skin/classic/aero/browser/appmenu-dropmarker.png
         skin/classic/aero/browser/appmenu-icons.png
 *       skin/classic/aero/browser/browser.css                        (browser-aero.css)
 *       skin/classic/aero/browser/engineManager.css                  (engineManager.css)
         skin/classic/aero/browser/fullscreen-video.css
         skin/classic/aero/browser/Geolocation-16.png
         skin/classic/aero/browser/Geolocation-64.png
+*       skin/classic/aero/browser/highlighter.css
         skin/classic/aero/browser/Info.png                           (Info-aero.png)
         skin/classic/aero/browser/identity.png                       (identity-aero.png)
         skin/classic/aero/browser/keyhole-forward-mask.svg
         skin/classic/aero/browser/KUI-background.png
         skin/classic/aero/browser/KUI-close.png
         skin/classic/aero/browser/mainwindow-dropdown-arrow.png      (mainwindow-dropdown-arrow-aero.png)
         skin/classic/aero/browser/pageInfo.css
         skin/classic/aero/browser/pageInfo.png                       (pageInfo-aero.png)
