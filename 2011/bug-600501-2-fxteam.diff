# HG changeset patch
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1314189754 -10800
# Node ID 9bb83f0c8dab313da7fb5d562df1a4d715ab07c4
# Parent  18288bc1b3a16a6a8e3c14a3033caf1c5a403d15
Bug 600501 - Implement support for removed() callback (notificationbox)

diff --git a/toolkit/content/tests/chrome/test_notificationbox.xul b/toolkit/content/tests/chrome/test_notificationbox.xul
--- a/toolkit/content/tests/chrome/test_notificationbox.xul
+++ b/toolkit/content/tests/chrome/test_notificationbox.xul
@@ -44,16 +44,34 @@ function testtag_notificationbox(nb)
   ise(nb.removeAllNotifications(false), undefined, "initial removeAllNotifications");
   testtag_notificationbox_State(nb, "initial removeAllNotifications", null, 0);
   ise(nb.removeAllNotifications(true), undefined, "initial removeAllNotifications immediate");
   testtag_notificationbox_State(nb, "initial removeAllNotifications immediate", null, 0);
 
   runTimedTests(tests, -1, nb, null);
 }
 
+var notification_last_event, notification_last_event_item;
+function notification_eventCallback(event)
+{
+  notification_last_event = event;
+  notification_last_event_item = this;
+}
+
+function testtag_notification_eventCallback(expectedEvent, ntf, testName)
+{
+  SimpleTest.is(notification_last_event, expectedEvent,
+                testName + ": event name");
+  SimpleTest.is(notification_last_event_item, ntf,
+                testName + ": event item");
+
+  notification_last_event = null;
+  notification_last_event_item = null;
+}
+
 var tests =
 [
   {
     test: function(nb, ntf) {
       // append a new notification
       var ntf = nb.appendNotification("Notification", "note", "happy.png",
                                       nb.PRIORITY_INFO_LOW, testtag_notificationbox_buttons);
       ise(ntf && ntf.localName == "notification", true, "append notification");
@@ -85,16 +103,43 @@ var tests =
       // try removing the notification again to make sure an exception occurs
       var exh = false;
       try {
         nb.removeNotification(ntf);
       } catch (ex) { exh = true; }
       ise(exh, true, "removeNotification again");
       testtag_notificationbox_State(nb, "removeNotification again", null, 0);
 
+    }
+  },
+  {
+    test: function(nb, ntf) {
+      // append a new notification, but now with an event callback
+      var ntf = nb.appendNotification("Notification", "note", "happy.png",
+                                      nb.PRIORITY_INFO_LOW,
+                                      testtag_notificationbox_buttons,
+                                      notification_eventCallback);
+      ise(ntf && ntf.localName == "notification", true, "append notification with callback");
+      return ntf;
+    },
+    result: function(nb, ntf) {
+      testtag_notificationbox_State(nb, "append with callback", ntf, 1);
+      return ntf;
+    }
+  },
+  {
+    test: function(nb, ntf) {
+      nb.removeNotification(ntf);
+      return ntf;
+    },
+    result: function(nb, ntf) {
+      testtag_notificationbox_State(nb, "removeNotification with callback",
+                                    null, 0);
+
+      testtag_notification_eventCallback("removed", ntf, "removeNotification()");
       return [1, null];
     }
   },
   {
     repeat: true,
     test: function(nb, arr) {
       var idx = arr[0];
       var ntf = arr[1];
diff --git a/toolkit/content/widgets/notification.xml b/toolkit/content/widgets/notification.xml
--- a/toolkit/content/widgets/notification.xml
+++ b/toolkit/content/widgets/notification.xml
@@ -72,16 +72,17 @@
       </method>
 
       <method name="appendNotification">
         <parameter name="aLabel"/>
         <parameter name="aValue"/>
         <parameter name="aImage"/>
         <parameter name="aPriority"/>
         <parameter name="aButtons"/>
+        <parameter name="aEventCallback"/>
         <body>
           <![CDATA[
             if (aPriority < this.PRIORITY_INFO_LOW ||
                 aPriority > this.PRIORITY_CRITICAL_BLOCK)
               throw "Invalid notification priority " + aPriority;
 
             // check for where the notification should be inserted according to
             // priority. If two are equal, the existing one appears on top.
@@ -94,16 +95,17 @@
             }
 
             const XULNS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
             var newitem = document.createElementNS(XULNS, "notification");
             newitem.setAttribute("label", aLabel);
             newitem.setAttribute("value", aValue);
             if (aImage)
               newitem.setAttribute("image", aImage);
+            newitem.eventCallback = aEventCallback;
 
             if (aButtons) {
               for (var b = 0; b < aButtons.length; b++) {
                 var button = aButtons[b];
                 var buttonElem = document.createElementNS(XULNS, "button");
                 buttonElem.setAttribute("label", button.label);
                 buttonElem.setAttribute("accesskey", button.accessKey);
 
@@ -143,39 +145,50 @@
       <method name="removeNotification">
         <parameter name="aItem"/>
         <parameter name="aSkipAnimation"/>
         <body>
           <![CDATA[
             if (aItem == this.currentNotification)
               this.removeCurrentNotification(aSkipAnimation);
             else if (aItem != this._closedNotification)
-              this.removeChild(aItem);
+              this._removeNotificationElement(aItem);
             return aItem;
           ]]>
         </body>
       </method>
 
+      <method name="_removeNotificationElement">
+        <parameter name="aChild"/>
+        <body>
+          <![CDATA[
+            if (aChild.eventCallback)
+              aChild.eventCallback("removed");
+            this.removeChild(aChild);
+          ]]>
+        </body>
+      </method>
+
       <method name="removeCurrentNotification">
         <parameter name="aSkipAnimation"/>
         <body>
           <![CDATA[
             this._showNotification(this.currentNotification, false, aSkipAnimation);
           ]]>
         </body>
       </method>
 
       <method name="removeAllNotifications">
         <parameter name="aImmediate"/>
         <body>
           <![CDATA[
             var notifications = this.allNotifications;
             for (var n = notifications.length - 1; n >= 0; n--) {
               if (aImmediate)
-                this.removeChild(notifications[n]);
+                this._removeNotificationElement(notifications[n]);
               else
                 this.removeNotification(notifications[n]);
             }
             this.currentNotification = null;
 
             // Must clear up any currently animating notification
             if (aImmediate)
               this._finishAnimation();
@@ -223,17 +236,17 @@
             }
             else {
               this._closedNotification = aNotification;
               var notifications = this.allNotifications;
               var idx = notifications.length - 1;
               this.currentNotification = (idx >= 0) ? notifications[idx] : null;
 
               if (skipAnimation) {
-                this.removeChild(this._closedNotification);
+                this._removeNotificationElement(this._closedNotification);
                 this._closedNotification = null;
                 this._setBlockingState(this.currentNotification);
                 return;
               }
 
               aNotification.style.marginTop = -height + "px";
               aNotification.style.opacity = 0;
             }
@@ -243,17 +256,17 @@
         </body>
       </method>
 
       <method name="_finishAnimation">
         <body><![CDATA[
           if (this._animating) {
             this._animating = false;
             if (this._closedNotification) {
-              this.removeChild(this._closedNotification);
+              this._removeNotificationElement(this._closedNotification);
               this._closedNotification = null;
             }
             this._setBlockingState(this.currentNotification);
           }
         ]]></body>
       </method>
 
       <method name="_setBlockingState">
