diff --git a/toolkit/components/console/hudservice/HUDService.jsm b/toolkit/components/console/hudservice/HUDService.jsm
--- a/toolkit/components/console/hudservice/HUDService.jsm
+++ b/toolkit/components/console/hudservice/HUDService.jsm
@@ -1128,16 +1128,18 @@ function HUD_SERVICE()
 
   // These methods access the "this" object, but they're registered as
   // event listeners. So we hammer in the "this" binding.
   this.onTabClose = this.onTabClose.bind(this);
   this.onWindowUnload = this.onWindowUnload.bind(this);
 
   // Remembers the last console height, in pixels.
   this.lastConsoleHeight = Services.prefs.getIntPref("devtools.hud.height");
+
+  this.suspended = true;
 };
 
 HUD_SERVICE.prototype =
 {
   /**
    * L10N shortcut function
    *
    * @param string aName
@@ -1312,28 +1314,36 @@ HUD_SERVICE.prototype =
    * Deactivate a HeadsUpDisplay for the given tab context.
    *
    * @param nsIDOMWindow aContext
    * @param aAnimated animate closing the web console?
    * @returns void
    */
   deactivateHUDForContext: function HS_deactivateHUDForContext(aContext, aAnimated)
   {
-    let window = aContext.linkedBrowser.contentWindow;
+    let browser = aContext.linkedBrowser;
+    let window = browser.contentWindow;
     let nBox = aContext.ownerDocument.defaultView.
       getNotificationBox(window);
     let hudId = "hud_" + nBox.id;
     let displayNode = nBox.querySelector("#" + hudId);
 
     if (hudId in this.hudReferences && displayNode) {
       if (!aAnimated) {
         this.storeHeight(hudId);
       }
 
       this.unregisterDisplay(displayNode);
+
+      let listener = browser._WebConsoleProgressListener;
+      if (listener) {
+        browser.webProgress.removeProgressListener(listener);
+        delete browser._WebConsoleProgressListener;
+      }
+
       window.focus();
     }
   },
 
   /**
    * Clear the specified HeadsUpDisplay
    *
    * @param string|nsIDOMNode aHUD
@@ -1674,16 +1684,18 @@ HUD_SERVICE.prototype =
     this.defaultGlobalConsolePrefs = this.storage.defaultGlobalConsolePrefs;
 
     // begin observing HTTP traffic
     this.startHTTPObservation();
 
     HUDWindowObserver.init();
     HUDConsoleObserver.init();
     ConsoleAPIObserver.init();
+
+    this.suspended = false;
   },
 
   /**
    * Suspend Web Console activity. This is called when all Web Consoles are
    * closed.
    *
    * @returns void
    */
@@ -1695,16 +1707,18 @@ HUD_SERVICE.prototype =
     // delete the storage as it holds onto channels
     delete this.storage;
     delete this.defaultFilterPrefs;
     delete this.defaultGlobalConsolePrefs;
 
     HUDWindowObserver.uninit();
     HUDConsoleObserver.uninit();
     ConsoleAPIObserver.shutdown();
+
+    this.suspended = true;
   },
 
   /**
    * Shutdown all HeadsUpDisplays on xpcom-shutdown
    *
    * @returns void
    */
   shutdown: function HS_shutdown()
@@ -2388,45 +2402,24 @@ HUD_SERVICE.prototype =
     2: "typeException", // JSREPORT_EXCEPTION
     4: "typeError", // JSREPORT_STRICT | JSREPORT_ERROR
     5: "typeStrict", // JSREPORT_STRICT | JSREPORT_WARNING
     8: "typeError", // JSREPORT_STRICT_MODE_ERROR
     13: "typeWarning", // JSREPORT_STRICT_MODE_ERROR | JSREPORT_WARNING | JSREPORT_ERROR
   },
 
   /**
-   * Closes the Console, if any, that resides on the given tab.
-   *
-   * @param nsIDOMNode aTab
-   *        The tab on which to close the console.
-   * @returns void
-   */
-  closeConsoleOnTab: function HS_closeConsoleOnTab(aTab)
-  {
-    let xulDocument = aTab.ownerDocument;
-    let xulWindow = xulDocument.defaultView;
-    let gBrowser = xulWindow.gBrowser;
-    let linkedBrowser = aTab.linkedBrowser;
-    let notificationBox = gBrowser.getNotificationBox(linkedBrowser);
-    let hudId = "hud_" + notificationBox.getAttribute("id");
-    let outputNode = xulDocument.getElementById(hudId);
-    if (outputNode != null) {
-      this.unregisterDisplay(outputNode);
-    }
-  },
-
-  /**
    * onTabClose event handler function
    *
    * @param aEvent
    * @returns void
    */
   onTabClose: function HS_onTabClose(aEvent)
   {
-    this.closeConsoleOnTab(aEvent.target);
+    this.deactivateHUDForContext(aEvent.target, false);
   },
 
   /**
    * Called whenever a browser window closes. Cleans up any consoles still
    * around.
    *
    * @param nsIDOMEvent aEvent
    *        The dispatched event.
@@ -2434,17 +2427,17 @@ HUD_SERVICE.prototype =
    */
   onWindowUnload: function HS_onWindowUnload(aEvent)
   {
     let gBrowser = aEvent.target.defaultView.gBrowser;
     let tabContainer = gBrowser.tabContainer;
 
     let tab = tabContainer.firstChild;
     while (tab != null) {
-      this.closeConsoleOnTab(tab);
+      this.deactivateHUDForContext(tab, false);
       tab = tab.nextSibling;
     }
   },
 
   /**
    * windowInitializer - checks what Gecko app is running and inits the HUD
    *
    * @param nsIDOMWindow aContentWindow
@@ -2533,16 +2526,25 @@ HUD_SERVICE.prototype =
 
     // Need a "===" comparison because backstagepass objects have strange
     // behavior with ==
     if (consoleGlobal !== nativeConsoleGlobal)
       this.logWarningAboutReplacedAPI(hudId);
 
     // register the controller to handle "select all" properly
     this.createController(xulWindow);
+
+    if (!_browser._WebConsoleProgressListener) {
+      let listener = new ConsoleProgressListener(hudId);
+
+      _browser.webProgress.addProgressListener(listener,
+        Ci.nsIWebProgress.NOTIFY_STATE_ALL);
+
+      _browser._WebConsoleProgressListener = listener;
+    }
   },
 
   /**
    * Adds the command controller to the XUL window if it's not already present.
    *
    * @param nsIDOMWindow aWindow
    *        The browser XUL window.
    * @returns void
@@ -5544,16 +5546,98 @@ HUDConsoleObserver = {
 
       default:
         HUDService.reportPageError(CATEGORY_JS, aSubject);
         return;
     }
   }
 };
 
+/**
+ * A WebProgressListener that listens for location changes, to update HUDService
+ * state information on page navigation.
+ *
+ * @constructor
+ * @param string aHudId
+ *        The HeadsUpDisplay ID.
+ */
+function ConsoleProgressListener(aHudId)
+{
+  this.hudId = aHudId;
+}
+
+ConsoleProgressListener.prototype = {
+  QueryInterface: XPCOMUtils.generateQI([Ci.nsIWebProgressListener,
+                                         Ci.nsISupportsWeakReference]),
+
+  onStateChange: function CPL_onStateChange(aProgress, aRequest, aState,
+                                            aStatus)
+  {
+    if (HUDService.suspended ||
+        !(aState & Ci.nsIWebProgressListener.STATE_START)) {
+      return;
+    }
+
+    let uri = null;
+    if (aRequest instanceof Ci.imgIRequest) {
+      let imgIRequest = aRequest.QueryInterface(Ci.imgIRequest);
+      uri = imgIRequest.URI;
+    }
+    else if (aRequest instanceof Ci.nsIChannel) {
+      let nsIChannel = aRequest.QueryInterface(Ci.nsIChannel);
+      uri = nsIChannel.URI;
+    }
+
+    if (!uri || !uri.schemeIs("file") && !uri.schemeIs("ftp")) {
+      return;
+    }
+
+    let outputNode = HUDService.hudReferences[this.hudId].outputNode;
+
+    let chromeDocument = outputNode.ownerDocument;
+    let msgNode = chromeDocument.createElementNS(HTML_NS, "html:span");
+
+    // Create the clickable URL part of the message.
+    let linkNode = chromeDocument.createElementNS(HTML_NS, "html:span");
+    linkNode.appendChild(chromeDocument.createTextNode(uri.spec));
+    linkNode.classList.add("hud-clickable");
+    linkNode.classList.add("webconsole-msg-url");
+
+    linkNode.addEventListener("mousedown", function(aEvent) {
+      this._startX = aEvent.clientX;
+      this._startY = aEvent.clientY;
+    }, false);
+
+    linkNode.addEventListener("click", function(aEvent) {
+      if (aEvent.detail == 1 && aEvent.button == 0 &&
+          this._startX == aEvent.clientX && this._startY == aEvent.clientY) {
+        let viewSourceUtils = chromeDocument.defaultView.gViewSourceUtils;
+        viewSourceUtils.viewSource(uri.spec, null, chromeDocument);
+      }
+    }, false);
+
+    msgNode.appendChild(linkNode);
+
+    let messageNode = ConsoleUtils.createMessageNode(chromeDocument,
+                                                     CATEGORY_NETWORK,
+                                                     SEVERITY_LOG,
+                                                     msgNode,
+                                                     null,
+                                                     null,
+                                                     uri.spec);
+
+    ConsoleUtils.outputMessageNode(messageNode, this.hudId);
+  },
+
+  onLocationChange: function() {},
+  onStatusChange: function() {},
+  onProgressChange: function() {},
+  onSecurityChange: function() {},
+};
+
 ///////////////////////////////////////////////////////////////////////////
 // appName
 ///////////////////////////////////////////////////////////////////////////
 
 /**
  * Get the app's name so we can properly dispatch app-specific
  * methods per API call
  * @returns Gecko application name
diff --git a/toolkit/components/console/hudservice/tests/browser/Makefile.in b/toolkit/components/console/hudservice/tests/browser/Makefile.in
--- a/toolkit/components/console/hudservice/tests/browser/Makefile.in
+++ b/toolkit/components/console/hudservice/tests/browser/Makefile.in
@@ -110,16 +110,17 @@ _BROWSER_TEST_FILES = \
 	browser_webconsole_bug_597460_filter_scroll.js \
 	browser_webconsole_console_extras.js \
 	browser_webconsole_bug_598357_jsterm_output.js \
 	browser_webconsole_bug_603750_websocket.js \
 	browser_webconsole_abbreviate_source_url.js \
 	browser_webconsole_view_source.js \
 	browser_webconsole_bug_602572_log_bodies_checkbox.js \
 	browser_webconsole_bug_614793_jsterm_scroll.js \
+	browser_webconsole_bug_595223_file_uri.js \
 	head.js \
 	$(NULL)
 
 _BROWSER_TEST_PAGES = \
 	test-console.html \
 	test-network.html \
 	test-network-request.html \
 	test-mutation.html \
diff --git a/toolkit/components/console/hudservice/tests/browser/browser_webconsole_bug_595223_file_uri.js b/toolkit/components/console/hudservice/tests/browser/browser_webconsole_bug_595223_file_uri.js
new file mode 100644
--- /dev/null
+++ b/toolkit/components/console/hudservice/tests/browser/browser_webconsole_bug_595223_file_uri.js
@@ -0,0 +1,45 @@
+/* vim:set ts=2 sw=2 sts=2 et: */
+/* ***** BEGIN LICENSE BLOCK *****
+ * Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/
+ *
+ * Contributor(s):
+ *   Mihai Sucan <mihai.sucan@gmail.com>
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+const TEST_FILE = "test-network.html";
+
+function tabLoad(aEvent) {
+  browser.removeEventListener(aEvent.type, arguments.callee, true);
+
+  openConsole();
+
+  let hudId = HUDService.getHudIdByWindow(content);
+  hud = HUDService.hudReferences[hudId];
+
+  browser.addEventListener("load", tabReload, true);
+
+  content.location.reload();
+}
+
+function tabReload(aEvent) {
+  browser.removeEventListener(aEvent.type, arguments.callee, true);
+
+  let textContent = hud.outputNode.textContent;
+  isnot(textContent.indexOf("test-network.html"), -1,
+        "found test-network.html");
+  isnot(textContent.indexOf("test-image.png"), -1, "found test-image.png");
+  isnot(textContent.indexOf("testscript.js"), -1, "found testscript.js");
+  isnot(textContent.indexOf("running network console logging tests"), -1,
+        "found the console.log() message from testscript.js");
+
+  finishTest();
+}
+
+function test() {
+  let rootDir = getResolvedURI(getRootDirectory(gTestPath));
+
+  addTab(rootDir.spec + TEST_FILE);
+  browser.addEventListener("load", tabLoad, true);
+}
