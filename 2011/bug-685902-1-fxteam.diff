# HG changeset patch
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1317404049 -10800
# Node ID 3575796b3cc9a5dd5df6f88d27896c94d41a00b2
# Parent  83a6f75b92f433be6e54ba6582788ed4aa085f9f
Bug 685902 - part 2 - Improve csshtmltree speeds by adding a has[Un]matchedSelectors() method

diff --git a/browser/devtools/styleinspector/CssHtmlTree.jsm b/browser/devtools/styleinspector/CssHtmlTree.jsm
--- a/browser/devtools/styleinspector/CssHtmlTree.jsm
+++ b/browser/devtools/styleinspector/CssHtmlTree.jsm
@@ -146,30 +146,30 @@ XPCOMUtils.defineLazyGetter(CssHtmlTree,
   let mainWindow = Services.wm.getMostRecentWindow("navigator:browser");
   return mainWindow.getComputedStyle(mainWindow.gBrowser).direction;
 });
 
 XPCOMUtils.defineLazyGetter(CssHtmlTree, "_strings", function() Services.strings
     .createBundle("chrome://browser/locale/styleinspector.properties"));
 
 CssHtmlTree.prototype = {
+  _matchedProperties: null,
+  _unmatchedProperties: null,
+
   htmlComplete: false,
 
   // Used for cancelling timeouts in the style filter.
   filterChangedTimeout: null,
 
   // The search filter
   searchField: null,
   
   // Reference to the "Only user Styles" checkbox.
   onlyUserStylesCheckbox: null,
 
-  // Holds the ID of the panelRefresh timeout.
-  _panelRefreshTimeout: null,
-
   get showOnlyUserStyles()
   {
     return this.onlyUserStylesCheckbox.checked;
   },
 
   /**
    * Update the highlighted element. The CssHtmlTree panel will show the style
    * information for the given element.
@@ -177,81 +177,50 @@ CssHtmlTree.prototype = {
    */
   highlight: function CssHtmlTree_highlight(aElement)
   {
     if (this.viewedElement == aElement) {
       return;
     }
 
     this.viewedElement = aElement;
+    this._unmatchedProperties = null;
+    this._matchedProperties = null;
 
     CssHtmlTree.processTemplate(this.templatePath, this.path, this);
 
     if (this.htmlComplete) {
       this.refreshPanel();
     } else {
       CssHtmlTree.processTemplate(this.templateRoot, this.root, this);
 
-      // We use a setTimeout loop to display the properties in batches of 15 at a
-      // time. This results in a perceptibly more responsive UI.
-      let i = 0;
-      let batchSize = 15;
-      let max = CssHtmlTree.propertyNames.length - 1;
-      function displayProperties() {
-        if (this.viewedElement == aElement && this.panel.isOpen()) {
-          // Display the next 15 properties
-          for (let step = i + batchSize; i < step && i <= max; i++) {
-            let name = CssHtmlTree.propertyNames[i];
-            let propView = new PropertyView(this, name);
-            CssHtmlTree.processTemplate(this.templateProperty,
-              this.propertyContainer, propView, true);
-            propView.refreshMatchedSelectors();
-            propView.refreshUnmatchedSelectors();
-            this.propertyViews.push(propView);
-          }
-          if (i < max) {
-            // There are still some properties to display. We loop here to display
-            // the next batch of 15.
-            this.win.setTimeout(displayProperties.bind(this), 50);
-          } else {
-            this.htmlComplete = true;
-            Services.obs.notifyObservers(null, "StyleInspector-populated", null);
-          }
-        }
+      for (let i = 0, n = CssHtmlTree.propertyNames.length; i < n; i++) {
+        let name = CssHtmlTree.propertyNames[i];
+        let propView = new PropertyView(this, name);
+        CssHtmlTree.processTemplate(this.templateProperty,
+          this.propertyContainer, propView, true);
+        propView.refreshMatchedSelectors();
+        propView.refreshUnmatchedSelectors();
+        this.propertyViews.push(propView);
       }
-      this.win.setTimeout(displayProperties.bind(this), 50);
+
+      this.htmlComplete = true;
+      Services.obs.notifyObservers(null, "StyleInspector-populated", null);
     }
   },
 
   /**
    * Refresh the panel content.
    */
   refreshPanel: function CssHtmlTree_refreshPanel()
   {
-    this.win.clearTimeout(this._panelRefreshTimeout);
-
-    // We use a setTimeout loop to display the properties in batches of 15 at a
-    // time. This results in a perceptibly more responsive UI.
-    let i = 0;
-    let batchSize = 15;
-    let max = this.propertyViews.length - 1;
-    function refreshView() {
-      // Refresh the next 15 property views
-      for (let step = i + batchSize; i < step && i <= max; i++) {
-        this.propertyViews[i].refresh();
-      }
-      if (i < max) {
-        // There are still some property views to refresh. We loop here to
-        // display the next batch of 15.
-        this._panelRefreshTimeout = this.win.setTimeout(refreshView.bind(this), 0);
-      } else {
-        Services.obs.notifyObservers(null, "StyleInspector-populated", null);
-      }
-    }
-    this._panelRefreshTimeout = this.win.setTimeout(refreshView.bind(this), 0);
+    this.propertyViews.forEach(function(aView) {
+      aView.refresh();
+    });
+    Services.obs.notifyObservers(null, "StyleInspector-populated", null);
   },
 
   /**
    * Called when the user clicks on a parent element in the "current element"
    * path.
    *
    * @param {Event} aEvent the DOM Event object.
    */
@@ -296,17 +265,17 @@ CssHtmlTree.prototype = {
    * matched selectors, and we do not display UA styles. If .checked is false we
    * do display even properties with no matched selectors, and we include the UA
    * styles.
    *
    * @param {Event} aEvent the DOM Event object.
    */
   onlyUserStylesChanged: function CssHtmltree_onlyUserStylesChanged(aEvent)
   {
-    this.cssLogic.reset();
+    this._matchedProperties = null;
 
     this.cssLogic.sourceFilter = this.showOnlyUserStyles ?
                                  CssLogic.FILTER.ALL :
                                  CssLogic.FILTER.UA;
 
     this.refreshPanel();
   },
 
@@ -345,16 +314,46 @@ CssHtmlTree.prototype = {
         CssHtmlTree.propertyNames.push(prop);
       }
     }
 
     CssHtmlTree.propertyNames.sort();
     CssHtmlTree.propertyNames.push.apply(CssHtmlTree.propertyNames,
       mozProps.sort());
   },
+
+  /**
+   * Get a list of properties that have matched selectors.
+   *
+   * @return {object} the object maps property names (keys) to booleans (values)
+   * that tell if the given property has matched selectors or not.
+   */
+  get matchedProperties()
+  {
+    if (!this._matchedProperties) {
+      this._matchedProperties =
+        this.cssLogic.hasMatchedSelectors(CssHtmlTree.propertyNames);
+    }
+    return this._matchedProperties;
+  },
+
+  /**
+   * Get a list of properties that have no matched selectors.
+   *
+   * @return {object} the object maps property names (keys) to booleans (values)
+   * that tell if the given property has unmatched selectors or not.
+   */
+  get unmatchedProperties()
+  {
+    if (!this._unmatchedProperties) {
+      this._unmatchedProperties =
+        this.cssLogic.hasUnmatchedSelectors(CssHtmlTree.propertyNames);
+    }
+    return this._unmatchedProperties;
+  },
 };
 
 /**
  * A container to give easy access to property data from the template engine.
  *
  * @constructor
  * @param {CssHtmlTree} aTree the CssHtmlTree instance we are working with.
  * @param {string} aName the CSS property name for which this PropertyView
@@ -437,25 +436,25 @@ PropertyView.prototype = {
     return this.tree.cssLogic.getPropertyInfo(this.name);
   },
 
   /**
    * Does the property have any matched selectors?
    */
   get hasMatchedSelectors()
   {
-    return this.propertyInfo.hasMatchedSelectors();
+    return this.tree.matchedProperties[this.name];
   },
 
   /**
    * Does the property have any unmatched selectors?
    */
   get hasUnmatchedSelectors()
   {
-    return this.propertyInfo.hasUnmatchedSelectors();
+    return this.tree.unmatchedProperties[this.name];
   },
 
   /**
    * Should this property be visible?
    */
   get visible()
   {
     if (this.tree.showOnlyUserStyles && !this.hasMatchedSelectors) {
diff --git a/browser/devtools/styleinspector/CssLogic.jsm b/browser/devtools/styleinspector/CssLogic.jsm
--- a/browser/devtools/styleinspector/CssLogic.jsm
+++ b/browser/devtools/styleinspector/CssLogic.jsm
@@ -146,33 +146,33 @@ CssLogic.prototype = {
   // Used for tracking unique CssSheet/CssRule/CssSelector objects, in a run of
   // processMatchedSelectors().
   _passId: 0,
 
   // Used for tracking matched CssSelector objects, such that we can skip them
   // in processUnmatchedSelectors().
   _matchId: 0,
 
+  _matchedRules: null,
   _matchedSelectors: null,
   _unmatchedSelectors: null,
 
   domUtils: Cc["@mozilla.org/inspector/dom-utils;1"].getService(Ci.inIDOMUtils),
 
   /**
    * Reset various properties
    */
   reset: function CssLogic_reset()
   {
     this._propertyInfos = {};
     this._ruleCount = 0;
     this._sheetIndex = 0;
     this._sheets = {};
     this._sheetsCached = false;
-    this._passId = 0;
-    this._matchId = 0;
+    this._matchedRules = null;
     this._matchedSelectors = null;
     this._unmatchedSelectors = null;
   },
 
   /**
    * Focus on a new element - remove the style caches.
    *
    * @param {nsIDOMElement} aViewedElement the element the user has highlighted
@@ -197,16 +197,17 @@ CssLogic.prototype = {
 
       // Hunt down top level stylesheets, and cache them.
       this._cacheSheets();
     } else {
       // Clear cached data in the CssPropertyInfo objects.
       this._propertyInfos = {};
     }
 
+    this._matchedRules = null;
     this._matchedSelectors = null;
     this._unmatchedSelectors = null;
     let win = this.viewedDocument.defaultView;
     this._computedStyle = win.getComputedStyle(this.viewedElement, "");
   },
 
   /**
    * Get the source filter.
@@ -239,16 +240,17 @@ CssLogic.prototype = {
     this._ruleCount = ruleCount;
 
     // Full update is needed because the this.processMatchedSelectors() method
     // skips UA stylesheets if the filter does not allow such sheets.
     let needFullUpdate = (oldValue == CssLogic.FILTER.UA ||
         aValue == CssLogic.FILTER.UA);
 
     if (needFullUpdate) {
+      this._matchedRules = null;
       this._matchedSelectors = null;
       this._unmatchedSelectors = null;
       this._propertyInfos = {};
     } else {
       // Update the CssPropertyInfo objects.
       for each (let propertyInfo in this._propertyInfos) {
         propertyInfo.needRefilter = true;
       }
@@ -306,29 +308,29 @@ CssLogic.prototype = {
    */
   _cacheSheet: function CssLogic_cacheSheet(aDomSheet)
   {
     if (aDomSheet.disabled) {
       return;
     }
 
     // Only work with stylesheets that have their media allowed.
-    if (!CssLogic.sheetMediaAllowed(aDomSheet)) {
+    if (!this.mediaMatches(aDomSheet)) {
       return;
     }
 
     // Cache the sheet.
-    let cssSheet = this.getSheet(aDomSheet, false, this._sheetIndex++);
+    let cssSheet = this.getSheet(aDomSheet, this._sheetIndex++);
     if (cssSheet._passId != this._passId) {
       cssSheet._passId = this._passId;
 
       // Find import rules.
       Array.prototype.forEach.call(aDomSheet.cssRules, function(aDomRule) {
         if (aDomRule.type == Ci.nsIDOMCSSRule.IMPORT_RULE && aDomRule.styleSheet &&
-            CssLogic.sheetMediaAllowed(aDomRule)) {
+            this.mediaMatches(aDomRule)) {
           this._cacheSheet(aDomRule.styleSheet);
         }
       }, this);
     }
   },
 
   /**
    * Retrieve the list of stylesheets in the document.
@@ -352,53 +354,53 @@ CssLogic.prototype = {
   },
 
   /**
    * Retrieve a CssSheet object for a given a CSSStyleSheet object. If the
    * stylesheet is already cached, you get the existing CssSheet object,
    * otherwise the new CSSStyleSheet object is cached.
    *
    * @param {CSSStyleSheet} aDomSheet the CSSStyleSheet object you want.
-   * @param {boolean} aSystemSheet tells if the stylesheet is a browser-provided
-   * sheet or not.
    * @param {number} aIndex the index, within the document, of the stylesheet.
    *
    * @return {CssSheet} the CssSheet object for the given CSSStyleSheet object.
    */
-  getSheet: function CL_getSheet(aDomSheet, aSystemSheet, aIndex)
+  getSheet: function CL_getSheet(aDomSheet, aIndex)
   {
-    let cacheId = aSystemSheet ? "1" : "0";
+    let cacheId = "";
 
     if (aDomSheet.href) {
-      cacheId += aDomSheet.href;
+      cacheId = aDomSheet.href;
     } else if (aDomSheet.ownerNode && aDomSheet.ownerNode.ownerDocument) {
-      cacheId += aDomSheet.ownerNode.ownerDocument.location;
+      cacheId = aDomSheet.ownerNode.ownerDocument.location;
     }
 
     let sheet = null;
     let sheetFound = false;
 
     if (cacheId in this._sheets) {
       for (let i = 0, numSheets = this._sheets[cacheId].length; i < numSheets; i++) {
         sheet = this._sheets[cacheId][i];
-        if (sheet.domSheet == aDomSheet) {
-          sheet.index = aIndex;
+        if (sheet.domSheet === aDomSheet) {
+          if (aIndex != -1) {
+            sheet.index = aIndex;
+          }
           sheetFound = true;
           break;
         }
       }
     }
 
     if (!sheetFound) {
       if (!(cacheId in this._sheets)) {
         this._sheets[cacheId] = [];
       }
 
-      sheet = new CssSheet(this, aDomSheet, aSystemSheet, aIndex);
-      if (sheet.sheetAllowed && !aSystemSheet) {
+      sheet = new CssSheet(this, aDomSheet, aIndex);
+      if (sheet.sheetAllowed && !sheet.systemSheet) {
         this._ruleCount += sheet.ruleCount;
       }
 
       this._sheets[cacheId].push(sheet);
     }
 
     return sheet;
   },
@@ -482,68 +484,43 @@ CssLogic.prototype = {
         this._matchedSelectors.forEach(function(aValue) {
           aCallback.call(aScope, aValue[0], aValue[1]);
           aValue[0]._cssRule._passId = this._passId;
         }, this);
       }
       return;
     }
 
+    if (!this._matchedRules) {
+      this.hasMatchedSelectors([]);
+    }
+
     this._matchedSelectors = [];
     this._unmatchedSelectors = null;
     this._passId++;
-    this._matchId++;
 
     let element = this.viewedElement;
-    let filter = this.sourceFilter;
-    let sheetIndex = 0;
-    let domRules = null;
     do {
-      try {
-        domRules = this.domUtils.getCSSStyleRules(element);
-      } catch (ex) {
-        Services.console.
-            logStringMessage("CssLogic_processMatchedSelectors error: " + ex);
-        continue;
-      }
-
-      let status = (this.viewedElement == element) ?
+      let status = (this.viewedElement === element) ?
           CssLogic.STATUS.MATCHED : CssLogic.STATUS.PARENT_MATCH;
 
-      for (let i = 0, numRules = domRules.Count(); i < numRules; i++) {
-        let domRule = domRules.GetElementAt(i);
-        if (domRule.type !== Ci.nsIDOMCSSRule.STYLE_RULE) {
-          continue;
-        }
-
-        let domSheet = domRule.parentStyleSheet;
-        let systemSheet = CssLogic.isSystemStyleSheet(domSheet);
-        if (filter !== CssLogic.FILTER.UA && systemSheet) {
-          continue;
-        }
-
-        let sheet = this.getSheet(domSheet, systemSheet, sheetIndex);
-        let rule = sheet.getRule(domRule);
+      for (let i = 0; i < this._matchedRules.length; i++) {
+        let rule = this._matchedRules[i];
 
         rule.selectors.forEach(function (aSelector) {
           if (aSelector._matchId !== this._matchId &&
               element.mozMatchesSelector(aSelector)) {
             aSelector._matchId = this._matchId;
             this._matchedSelectors.push([ aSelector, status ]);
             if (aCallback) {
               aCallback.call(aScope, aSelector, status);
             }
           }
         }, this);
 
-        if (sheet._passId !== this._passId) {
-          sheetIndex++;
-          sheet._passId = this._passId;
-        }
-
         if (rule._passId !== this._passId) {
           rule._passId = this._passId;
         }
       }
 
       // Add element.style information.
       if (element.style.length > 0) {
         let rule = new CssRule(null, { style: element.style }, element);
@@ -569,107 +546,207 @@ CssLogic.prototype = {
    *
    * @param {function} aCallback the function you want to execute for each of
    * the unmatched selectors.
    * @param {object} aScope the scope you want for the callback function. aScope
    * will be the this object when aCallback executes.
    */
   processUnmatchedSelectors: function CL_processUnmatchedSelectors(aCallback, aScope)
   {
-    if (!this._matchedSelectors) {
-      this.processMatchedSelectors();
-    }
     if (this._unmatchedSelectors) {
       if (aCallback) {
         this._unmatchedSelectors.forEach(aCallback, aScope);
       }
       return;
     }
+    if (!this._matchedSelectors) {
+      this.processMatchedSelectors();
+    }
 
     this._unmatchedSelectors = [];
 
     this.forEachSheet(function (aSheet) {
       // We do not show unmatched selectors from system stylesheets
-      if (aSheet.systemSheet) {
+      if (aSheet.systemSheet || aSheet.disabled || !aSheet.mediaMatches) {
         return;
       }
 
       aSheet.forEachRule(function (aRule) {
-        if (!this.viewedElement.mozMatchesSelector(aRule._domRule.selectorText)) {
-          aRule.selectors.forEach(function (aSelector) {
-            if (aSelector._matchId != this._matchId) {
-              this._unmatchedSelectors.push(aSelector);
-              if (aCallback) {
-                aCallback.call(aScope, aSelector);
-              }
+        aRule.selectors.forEach(function (aSelector) {
+          if (aSelector._matchId !== this._matchId) {
+            this._unmatchedSelectors.push(aSelector);
+            if (aCallback) {
+              aCallback.call(aScope, aSelector);
             }
-          }, this);
-        }
+          }
+        }, this);
       }, this);
     }, this);
   },
 
   /**
    * Returns true if the current element has CssSelector objects that match the
    * highlighted element or its parent elements. If aCallback is provided then
    * the domRules for the element are passed to the callback function.
    *
    * @param {function} [aCallback] Simple callback method
    */
-  hasMatchedSelectors: function CL_hasMatchedSelectors(aCallback)
+  hasMatchedSelectors: function CL_hasMatchedSelectors(aProperties)
   {
+    let result = {};
+    let propertiesFilter = function(aRule, aProperty) {
+      if (aRule.getPropertyValue(aProperty)) {
+        // We just need to find if a rule has this property while it matches
+        // the viewedElement.
+        result[aProperty] = true;
+        return false;
+      }
+      return true;
+    };
+
+    if (this._matchedRules) {
+      if (aProperties.length > 0) {
+        this._matchedRules.some(function(aRule) {
+          aProperties = aProperties.filter(propertiesFilter.bind(this, aRule));
+          return aProperties.length == 0;
+        }, this);
+      }
+
+      return result;
+    }
+
     let domRules;
     let element = this.viewedElement;
-    let matched = false;
+    let filter = this.sourceFilter;
+
+    let sheetIndex = 0;
+    this._matchId++;
+    this._passId++;
+
+    this._matchedRules = [];
 
     do {
       try {
         domRules = this.domUtils.getCSSStyleRules(element);
       } catch (ex) {
         Services.console.
-            logStringMessage("CssLogic_hasMatchedSelectors error: " + ex);
+          logStringMessage("CssLogic_hasMatchedSelectors error: " + ex);
         continue;
       }
 
-      if (domRules.Count() && (!aCallback || aCallback(domRules))) {
-        matched = true;
-        break;
+      for (let i = 0, n = domRules.Count(); i < n; i++) {
+        let domRule = domRules.GetElementAt(i);
+        if (domRule.type !== Ci.nsIDOMCSSRule.STYLE_RULE) {
+          continue;
+        }
+
+        let sheet = this.getSheet(domRule.parentStyleSheet, -1);
+        if (sheet._passId !== this._passId) {
+          sheet.index = sheetIndex++;
+          sheet._passId = this._passId;
+        }
+
+        if (filter !== CssLogic.FILTER.UA && sheet.systemSheet) {
+          continue;
+        }
+
+        let rule = sheet.getRule(domRule);
+        rule._matchId = this._matchId;
+        rule._passId = this._passId;
+
+        this._matchedRules.push(rule);
+
+        if (aProperties.length > 0) {
+          aProperties = aProperties.filter(propertiesFilter.bind(this, rule));
+        }
       }
+    } while ((element = element.parentNode) &&
+             element.nodeType === Ci.nsIDOMNode.ELEMENT_NODE);
 
-    } while ((element = element.parentNode) &&
-        element.nodeType === Ci.nsIDOMNode.ELEMENT_NODE);
-
-    return matched;
+    return result;
   },
 
   /**
    * Returns true if the current element does not have CssSelector objects that
    * match the highlighted element or its parent elements.
    *
    * @param {String} aProperty The CSS property to check against
    */
-  hasUnmatchedSelectors: function CL_hasUnmatchedSelectors(aProperty)
+  hasUnmatchedSelectors: function CL_hasUnmatchedSelectors(aProperties)
   {
-    if (!this._unmatchedSelectors) {
-      this.processMatchedSelectors();
+    if (!this._matchedRules) {
+      this.hasMatchedSelectors([]);
     }
 
-    return this.forSomeSheets(function (aSheet) {
+    let ruleHasUnmatchedSelector = function(aRule) {
+      let element = this.viewedElement;
+      let selectors = aRule.selectors;
+      do {
+        selectors = selectors.filter(function(aSelector) {
+          return !element.mozMatchesSelector(aSelector);
+        });
+
+        if (selectors.length == 0) {
+          break;
+        }
+      } while ((element = element.parentNode) &&
+               element.nodeType === Ci.nsIDOMNode.ELEMENT_NODE);
+
+      return selectors.length > 0;
+    }.bind(this);
+
+    let result = {};
+
+    this.forSomeSheets(function (aSheet) {
       // We do not show unmatched selectors from system stylesheets
-      if (aSheet.systemSheet) {
+      if (aSheet.systemSheet || aSheet.disabled || !aSheet.mediaMatches) {
         return false;
       }
 
       return aSheet.forSomeRules(function (aRule) {
-        if (aRule.getPropertyValue(aProperty) &&
-            !this.viewedElement.mozMatchesSelector(aRule._domRule.selectorText)) {
-          return true;
+        let unmatched = aRule._matchId !== this._matchId ||
+                        ruleHasUnmatchedSelector(aRule);
+        if (!unmatched) {
+          return false;
         }
+
+        aProperties = aProperties.filter(function(aProperty) {
+          if (!aRule.getPropertyValue(aProperty)) {
+            // Keep this property for the next rule. We need to find a rule
+            // which has the property.
+            return true;
+          }
+
+          result[aProperty] = unmatched;
+
+          // Keep this property if the rule matched. We need to find if a rule
+          // has this property while it doesn't match the viewedElement.
+          return !unmatched;
+        });
+
+        return aProperties.length == 0;
       }, this);
     }, this);
+
+    aProperties.forEach(function(aProperty) { result[aProperty] = false; });
+
+    return result;
+  },
+
+  /**
+   * Tells if the given DOM CSS object matches the current view media.
+   *
+   * @return {boolean} true if the DOM CSS object matches the current view
+   * media, or false otherwise.
+   */
+  mediaMatches: function CL_mediaMatches(aDomObject)
+  {
+    let mediaText = aDomObject.media.mediaText;
+    return !mediaText || this.viewedDocument.defaultView.
+                         matchMedia(mediaText).matches;
   },
 };
 
 /**
  * If the element has an id, return '#id'. Otherwise return 'tagname[n]' where
  * n is the index of this element in its siblings.
  * <p>A technically more 'correct' output from the no-id case might be:
  * 'tagname:nth-of-type(n)' however this is unlikely to be more understood
@@ -762,62 +839,29 @@ CssLogic.isSystemStyleSheet = function C
   if (url.substr(0, 7) === "chrome:") return true;
   if (url === "XPCSafeJSObjectWrapper.cpp") return true;
   if (url.substr(0, 6) === "about:") return true;
 
   return false;
 };
 
 /**
- * Check if the given DOM CSS object holds an allowed media. Currently we only
- * allow media screen or all.
- *
- * @param {CSSStyleSheet|CSSImportRule|CSSMediaRule} aDomObject the
- * DOM object you want checked.
- * @return {boolean} true if the media description is allowed, or false
- * otherwise.
- */
-CssLogic.sheetMediaAllowed = function CssLogic_sheetMediaAllowed(aDomObject)
-{
-  let result = false;
-  let media = aDomObject.media;
-
-  if (media.length > 0) {
-    let mediaItem = null;
-    for (let m = 0, mediaLen = media.length; m < mediaLen; m++) {
-      mediaItem = media.item(m).toLowerCase();
-      if (mediaItem === CssLogic.MEDIA.SCREEN ||
-          mediaItem === CssLogic.MEDIA.ALL) {
-        result = true;
-        break;
-      }
-    }
-  } else {
-    result = true;
-  }
-
-  return result;
-};
-
-/**
  * A safe way to access cached bits of information about a stylesheet.
  *
  * @constructor
  * @param {CssLogic} aCssLogic pointer to the CssLogic instance working with
  * this CssSheet object.
  * @param {CSSStyleSheet} aDomSheet reference to a DOM CSSStyleSheet object.
- * @param {boolean} aSystemSheet tells if the stylesheet is system-provided.
  * @param {number} aIndex tells the index/position of the stylesheet within the
  * main document.
  */
-function CssSheet(aCssLogic, aDomSheet, aSystemSheet, aIndex)
+function CssSheet(aCssLogic, aDomSheet, aIndex)
 {
   this._cssLogic = aCssLogic;
   this.domSheet = aDomSheet;
-  this.systemSheet = aSystemSheet;
   this.index = this.systemSheet ? -100 * aIndex : aIndex;
 
   // Cache of the sheets href. Cached by the getter.
   this._href = null;
   // Short version of href for use in select boxes etc. Cached by getter.
   this._shortSource = null;
 
   // null for uncached.
@@ -826,16 +870,45 @@ function CssSheet(aCssLogic, aDomSheet, 
   // Cached CssRules from the given stylesheet.
   this._rules = {};
 
   this._ruleCount = -1;
 }
 
 CssSheet.prototype = {
   _passId: null,
+  _systemSheet: null,
+  _mediaMatches: null,
+
+  /**
+   * Tells if the stylesheet is provided by the browser or not.
+   *
+   * @return {boolean} true if this is a browser-provided stylesheet, or false
+   * otherwise.
+   */
+  get systemSheet()
+  {
+    if (this._systemSheet === null) {
+      this._systemSheet = CssLogic.isSystemStyleSheet(this.domSheet);
+    }
+    return this._systemSheet;
+  },
+
+  get disabled()
+  {
+    return this.domSheet.disabled;
+  },
+
+  get mediaMatches()
+  {
+    if (this._mediaMatches === null) {
+      this._mediaMatches = this._cssLogic.mediaMatches(this.domSheet);
+    }
+    return this._mediaMatches;
+  },
 
   /**
    * Get a source for a stylesheet, taking into account embedded stylesheets
    * for which we need to use document.defaultView.location.href rather than
    * sheet.href
    *
    * @return {string} the address of the stylesheet.
    */
@@ -942,17 +1015,17 @@ CssSheet.prototype = {
     let cacheId = aDomRule.type + aDomRule.selectorText;
 
     let rule = null;
     let ruleFound = false;
 
     if (cacheId in this._rules) {
       for (let i = 0, rulesLen = this._rules[cacheId].length; i < rulesLen; i++) {
         rule = this._rules[cacheId][i];
-        if (rule._domRule == aDomRule) {
+        if (rule._domRule === aDomRule) {
           ruleFound = true;
           break;
         }
       }
     }
 
     if (!ruleFound) {
       if (!(cacheId in this._rules)) {
@@ -984,17 +1057,17 @@ CssSheet.prototype = {
     let ruleCount = 0;
     let domRules = this.domSheet.cssRules;
 
     function _iterator(aDomRule) {
       if (aDomRule.type == Ci.nsIDOMCSSRule.STYLE_RULE) {
         aCallback.call(aScope, this.getRule(aDomRule));
         ruleCount++;
       } else if (aDomRule.type == Ci.nsIDOMCSSRule.MEDIA_RULE &&
-          aDomRule.cssRules && CssLogic.sheetMediaAllowed(aDomRule)) {
+          aDomRule.cssRules && this._cssLogic.mediaMatches(aDomRule)) {
         Array.prototype.forEach.call(aDomRule.cssRules, _iterator, this);
       }
     }
 
     Array.prototype.forEach.call(domRules, _iterator, this);
 
     this._ruleCount = ruleCount;
   },
@@ -1015,17 +1088,17 @@ CssSheet.prototype = {
    */
   forSomeRules: function CssSheet_forSomeRules(aCallback, aScope)
   {
     let domRules = this.domSheet.cssRules;
     function _iterator(aDomRule) {
       if (aDomRule.type == Ci.nsIDOMCSSRule.STYLE_RULE) {
         return aCallback.call(aScope, this.getRule(aDomRule));
       } else if (aDomRule.type == Ci.nsIDOMCSSRule.MEDIA_RULE &&
-          aDomRule.cssRules && CssLogic.sheetMediaAllowed(aDomRule)) {
+          aDomRule.cssRules && this._cssLogic.mediaMatches(aDomRule)) {
         return Array.prototype.some.call(aDomRule.cssRules, _iterator, this);
       }
     }
     return Array.prototype.some.call(domRules, _iterator, this);
   },
 
   toString: function CssSheet_toString()
   {
@@ -1373,18 +1446,16 @@ function CssPropertyInfo(aCssLogic, aPro
   this._matchedRuleCount = 0;
 
   // An array holding CssSelectorInfo objects for each of the matched selectors
   // that are inside a CSS rule. Only rules that hold the this.property are
   // counted. This includes rules that come from filtered stylesheets (those
   // that have sheetAllowed = false).
   this._matchedSelectors = null;
   this._unmatchedSelectors = null;
-  this._hasMatchedSelectors = null;
-  this._hasUnmatchedSelectors = null;
 }
 
 CssPropertyInfo.prototype = {
   /**
    * Retrieve the computed style value for the current property, for the
    * highlighted element.
    *
    * @return {string} the computed style value for the current property, for the
@@ -1473,59 +1544,16 @@ CssPropertyInfo.prototype = {
     } else if (this.needRefilter) {
       this._refilterSelectors();
     }
 
     return this._unmatchedSelectors;
   },
 
   /**
-   * Does the property have any matched selectors?
-   */
-  hasMatchedSelectors: function CssPropertyInfo_hasMatchedSelectors()
-  {
-    if (this._hasMatchedSelectors === null) {
-      this._hasMatchedSelectors = this._cssLogic.hasMatchedSelectors(function(aDomRules) {
-        for (let i = 0; i < aDomRules.Count(); i++) {
-          let domRule = aDomRules.GetElementAt(i);
-
-          if (domRule.type !== Ci.nsIDOMCSSRule.STYLE_RULE) {
-            continue;
-          }
-
-          let domSheet = domRule.parentStyleSheet;
-          let systemSheet = CssLogic.isSystemStyleSheet(domSheet);
-          let filter = this._cssLogic.sourceFilter;
-          if (filter !== CssLogic.FILTER.UA && systemSheet) {
-            continue;
-          }
-
-          if (domRule.style.getPropertyValue(this.property)) {
-            return true;
-          }
-        }
-        return false;
-      }.bind(this));
-    }
-
-    return this._hasMatchedSelectors;
-  },
-
-  /**
-   * Does the property have any unmatched selectors?
-   */
-  hasUnmatchedSelectors: function CssPropertyInfo_hasUnmatchedSelectors()
-  {
-    if (this._hasUnmatchedSelectors === null) {
-      this._hasUnmatchedSelectors = this._cssLogic.hasUnmatchedSelectors(this.property);
-    }
-    return this._hasUnmatchedSelectors;
-  },
-
-  /**
    * Find the selectors that match the highlighted element and its parents.
    * Uses CssLogic.processMatchedSelectors() to find the matched selectors,
    * passing in a reference to CssPropertyInfo._processMatchedSelector() to
    * create CssSelectorInfo objects, which we then sort
    * @private
    */
   _findMatchedSelectors: function CssPropertyInfo_findMatchedSelectors()
   {
