diff --git a/toolkit/components/prompts/src/nsPrompter.js b/toolkit/components/prompts/src/nsPrompter.js
--- a/toolkit/components/prompts/src/nsPrompter.js
+++ b/toolkit/components/prompts/src/nsPrompter.js
@@ -408,17 +408,21 @@ function openModalWindow(domWin, uri, ar
         domWin = Services.ww.activeWindow;
 
     // domWin may still be null here if there are _no_ windows open.
 
     // Note that we don't need to fire DOMWillOpenModalDialog and
     // DOMModalDialogClosed events here, wwatcher's OpenWindowJSInternal
     // will do that. Similarly for enterModalState / leaveModalState.
 
-    Services.ww.openWindow(domWin, uri, "_blank", "centerscreen,chrome,modal,titlebar", args);
+    try {
+      Services.ww.openWindow(domWin, uri, "_blank", "centerscreen,chrome,modal,titlebar", args);
+    } catch (ex) {
+      // The openWindow() call can fail when Firefox is about to quit.
+    }
 }
 
 function openTabPrompt(domWin, tabPrompt, args) {
     PromptUtils.fireDialogEvent(domWin, "DOMWillOpenModalDialog");
 
     let winUtils = domWin.QueryInterface(Ci.nsIInterfaceRequestor)
                          .getInterface(Ci.nsIDOMWindowUtils);
     winUtils.enterModalState();
@@ -498,17 +502,22 @@ Ci.nsIAuthPrompt2, Ci.nsIWritablePropert
         let prefValue = false;
         if (Services.prefs.getPrefType(prefName) == Services.prefs.PREF_BOOL)
             prefValue = Services.prefs.getBoolPref(prefName);
 
         let allowTabModal = this.allowTabModal && prefValue;
 
         if (allowTabModal && this.domWin) {
             let tabPrompt = PromptUtils.getTabModalPrompt(this.domWin);
-            if (tabPrompt) {
+            let docShell = this.domWin.top.QueryInterface(Ci.nsIInterfaceRequestor)
+                                      .getInterface(Ci.nsIWebNavigation)
+                                      .QueryInterface(Ci.nsIDocShell);
+            let chromeWin = docShell.chromeEventHandler.ownerDocument.defaultView;
+            let TabViewVisible = chromeWin.TabView ? chromeWin.TabView.isVisible() : false;
+            if (tabPrompt && !docShell.isInUnload && !TabViewVisible) {
                 openTabPrompt(this.domWin, tabPrompt, args);
                 return;
             }
         }
 
         // If we can't do a tab modal prompt, fallback to using a window-modal dialog.
         const COMMON_DIALOG = "chrome://global/content/commonDialog.xul";
         const SELECT_DIALOG = "chrome://global/content/selectDialog.xul";
