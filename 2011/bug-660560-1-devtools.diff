# HG changeset patch
# Date 1307036368 -10800
# User Mihai Sucan <mihai.sucan@gmail.com>
# Parent 117044f42385a458857c17d8ba923cce9ad2ef81
Bug 660560 - Scratchpad lacks indentation, pressing TAB key should indent code

diff --git a/browser/base/content/scratchpad.js b/browser/base/content/scratchpad.js
--- a/browser/base/content/scratchpad.js
+++ b/browser/base/content/scratchpad.js
@@ -624,16 +624,42 @@ var Scratchpad = {
     let chrome = Services.prefs.getBoolPref(DEVTOOLS_CHROME_ENABLED);
     if (chrome) {
       chromeContextMenu.removeAttribute("hidden");
       errorConsoleMenu.removeAttribute("hidden");
       errorConsoleCommand.removeAttribute("disabled");
       chromeContextCommand.removeAttribute("disabled");
     }
     this.insertIntro();
+
+    // Make the Tab key work.
+    this.textbox.addEventListener("keypress", this.onKeypress.bind(this), false);
+
+    this.textbox.focus();
+  },
+
+  /**
+   * The textbox keypress event handler which allows users to indent code using
+   * the Tab key.
+   *
+   * @param nsIDOMEvent aEvent
+   */
+  onKeypress: function SP_onKeypress(aEvent)
+  {
+    if (aEvent.keyCode != aEvent.DOM_VK_TAB || !this.textbox.value) {
+      return;
+    }
+
+    let firstPiece = this.textbox.value.substring(0, this.textbox.selectionStart);
+    let lastPiece = this.textbox.value.substring(this.textbox.selectionEnd);
+    this.textbox.value = firstPiece + "    " + lastPiece;
+
+    this.selectRange(firstPiece.length + 4, firstPiece.length + 4);
+
+    aEvent.preventDefault();
   },
 };
 
 XPCOMUtils.defineLazyGetter(Scratchpad, "strings", function () {
   return Services.strings.createBundle(SCRATCHPAD_L10N);
 });
 
 addEventListener("DOMContentLoaded", Scratchpad.onLoad.bind(Scratchpad), false);
diff --git a/browser/base/content/test/Makefile.in b/browser/base/content/test/Makefile.in
--- a/browser/base/content/test/Makefile.in
+++ b/browser/base/content/test/Makefile.in
@@ -195,16 +195,17 @@ _BROWSER_FILES = \
                  browser_scratchpad_initialization.js \
                  browser_scratchpad_contexts.js \
                  browser_scratchpad_tab_switch.js \
                  browser_scratchpad_execute_print.js \
                  browser_scratchpad_inspect.js \
                  browser_scratchpad_files.js \
                  browser_scratchpad_ui.js \
                  browser_scratchpad_bug_646070_chrome_context_pref.js \
+                 browser_scratchpad_bug_660560_tab.js \
                  browser_overflowScroll.js \
                  browser_locationBarExternalLoad.js \
                  browser_pageInfo.js \
                  browser_page_style_menu.js \
                  browser_pinnedTabs.js \
                  browser_plainTextLinks.js \
                  browser_pluginnotification.js \
                  browser_relatedTabs.js \
diff --git a/browser/base/content/test/browser_scratchpad_bug_660560_tab.js b/browser/base/content/test/browser_scratchpad_bug_660560_tab.js
new file mode 100644
--- /dev/null
+++ b/browser/base/content/test/browser_scratchpad_bug_660560_tab.js
@@ -0,0 +1,53 @@
+/* vim: set ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+// Reference to the Scratchpad chrome window object.
+let gScratchpadWindow;
+
+function test()
+{
+  waitForExplicitFinish();
+
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", function() {
+    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
+
+    ok(Scratchpad, "Scratchpad variable exists");
+
+    gScratchpadWindow = Scratchpad.openScratchpad();
+    gScratchpadWindow.addEventListener("load", runTests, false);
+  }, true);
+
+  content.location = "data:text/html,Scratchpad test for the Tab key, bug 660560";
+}
+
+function runTests()
+{
+  gScratchpadWindow.removeEventListener("load", arguments.callee, false);
+
+  let sp = gScratchpadWindow.Scratchpad;
+  ok(sp, "Scratchpad object exists in new window");
+
+  is(gScratchpadWindow.document.activeElement.localName, "textarea",
+     "The textbox has focus");
+
+  sp.textbox.value = "window.foo;";
+  sp.selectRange(1, 3);
+
+  EventUtils.synthesizeKey("VK_TAB", {}, gScratchpadWindow);
+
+  is(sp.textbox.value, "w    dow.foo;",
+     "Tab key added 4 spaces");
+
+  is(sp.textbox.selectionStart, 5,
+     "caret location is correct");
+
+  is(sp.textbox.selectionStart, sp.textbox.selectionEnd,
+     "caret location is correct, confirmed");
+
+  gScratchpadWindow.close();
+  gScratchpadWindow = null;
+  gBrowser.removeCurrentTab();
+  finish();
+}
