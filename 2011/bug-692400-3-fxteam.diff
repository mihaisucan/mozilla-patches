# HG changeset patch
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1319653409 -10800
# Node ID 79848d021025c9d3d2f1ce46bd156f3bf57f08f2
# Parent  5d7c2550a61e9e4c031dde19624fff8235e73db0
Bug 692400 - Style inspector appears to ignore inline styles

diff --git a/browser/devtools/styleinspector/CssHtmlTree.jsm b/browser/devtools/styleinspector/CssHtmlTree.jsm
--- a/browser/devtools/styleinspector/CssHtmlTree.jsm
+++ b/browser/devtools/styleinspector/CssHtmlTree.jsm
@@ -676,27 +676,27 @@ SelectorView.prototype = {
     } else {
       return this.text(aElement) + " \u2192 " + this.selectorInfo.value;
     }
   },
 
   text: function SelectorView_text(aElement) {
     let result = this.selectorInfo.selector.text;
     if (this.selectorInfo.elementStyle) {
-      if (this.tree.styleInspector.IUI) {
-        if (this.selectorInfo.sourceElement == this.tree.styleInspector.IUI.selection)
-        {
-          result = "this";
-        } else {
-          result = CssLogic.getShortName(this.selectorInfo.sourceElement);
-        }
+      let source = this.selectorInfo.sourceElement;
+      let IUI = this.tree.styleInspector.IUI;
+      if (IUI && IUI.selection == source) {
+        result = "this";
+      } else {
+        result = CssLogic.getShortName(source);
       }
+
       aElement.parentNode.querySelector(".rule-link > a").
         addEventListener("click", function(aEvent) {
-          this.tree.styleInspector.selectFromPath(this.selectorInfo.sourceElement);
+          this.tree.styleInspector.selectFromPath(source);
           aEvent.preventDefault();
         }.bind(this), false);
       result += ".style";
     }
 
     return result;
   },
 };
diff --git a/browser/devtools/styleinspector/CssLogic.jsm b/browser/devtools/styleinspector/CssLogic.jsm
--- a/browser/devtools/styleinspector/CssLogic.jsm
+++ b/browser/devtools/styleinspector/CssLogic.jsm
@@ -602,17 +602,18 @@ CssLogic.prototype = {
         }, this);
       }, this);
     }, this);
   },
 
   /**
    * Check if the highlighted element or it's parents have matched selectors.
    * If aCallback is provided then the domRules for the element are passed to
-   * the callback function.
+   * the callback function. When the element has .style properties, the callback
+   * receives {style: element.style}.
    *
    * @param {function} [aCallback] Simple callback method
    * @return {Boolean} true if the current element or it's parents have
    * matching CssSelector objects, false otherwise
    */
   hasMatchedSelectors: function CL_hasMatchedSelectors(aCallback)
   {
     let domRules;
@@ -623,21 +624,32 @@ CssLogic.prototype = {
       try {
         domRules = this.domUtils.getCSSStyleRules(element);
       } catch (ex) {
         Services.console.
             logStringMessage("CssLogic_hasMatchedSelectors error: " + ex);
         continue;
       }
 
+      // Check if the are DOM rules that we can consider as matched rules
+      // (depending on the callback).
       if (domRules.Count() && (!aCallback || aCallback(domRules))) {
         matched = true;
+      }
+
+      // Check if the element has any element.style properties that we can
+      // consider as "matched" (depending on the callback).
+      if (element.style.length > 0 &&
+          (!aCallback || aCallback({style: element.style}))) {
+        matched = true;
+      }
+
+      if (matched) {
         break;
       }
-
     } while ((element = element.parentNode) &&
         element.nodeType === Ci.nsIDOMNode.ELEMENT_NODE);
 
     return matched;
   },
 
   /**
    * Check if the highlighted element or it's parents have unmatched selectors.
@@ -1494,16 +1506,21 @@ CssPropertyInfo.prototype = {
    * 
    * @return {Boolean} true if the current element or it's parents have
    * matching CssSelector objects, false otherwise
    */
   hasMatchedSelectors: function CssPropertyInfo_hasMatchedSelectors()
   {
     if (this._hasMatchedSelectors === null) {
       this._hasMatchedSelectors = this._cssLogic.hasMatchedSelectors(function(aDomRules) {
+        if (!aDomRules.Count) {
+          // For element.style.
+          return !!aDomRules.style.getPropertyValue(this.property);
+        }
+
         for (let i = 0; i < aDomRules.Count(); i++) {
           let domRule = aDomRules.GetElementAt(i);
 
           if (domRule.type !== Ci.nsIDOMCSSRule.STYLE_RULE) {
             continue;
           }
 
           let domSheet = domRule.parentStyleSheet;
diff --git a/browser/devtools/styleinspector/test/browser/Makefile.in b/browser/devtools/styleinspector/test/browser/Makefile.in
--- a/browser/devtools/styleinspector/test/browser/Makefile.in
+++ b/browser/devtools/styleinspector/test/browser/Makefile.in
@@ -46,16 +46,17 @@ include $(DEPTH)/config/autoconf.mk
 include $(topsrcdir)/config/rules.mk
 
 _BROWSER_TEST_FILES = \
   browser_styleinspector.js \
   browser_styleinspector_webconsole.js \
   browser_bug683672.js \
   browser_styleinspector_bug_672746_default_styles.js \
   browser_styleinspector_bug_672744_search_filter.js \
+  browser_bug_692400_element_style.js \
   head.js \
   $(NULL)
 
 _BROWSER_TEST_PAGES = \
   browser_styleinspector_webconsole.htm \
   browser_bug683672.html \
   $(NULL)
 
diff --git a/browser/devtools/styleinspector/test/browser/browser_bug_692400_element_style.js b/browser/devtools/styleinspector/test/browser/browser_bug_692400_element_style.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/styleinspector/test/browser/browser_bug_692400_element_style.js
@@ -0,0 +1,84 @@
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+// Tests for selector text errors.
+
+let doc;
+let stylePanel;
+
+function createDocument()
+{
+  doc.body.innerHTML = "<div style='color:blue;'></div>";
+
+  doc.title = "Style Inspector Selector Text Test";
+  ok(window.StyleInspector, "StyleInspector exists");
+  stylePanel = new StyleInspector(window);
+
+
+  stylePanel.createPanel(false, function() {
+    Services.obs.addObserver(SI_checkText, "StyleInspector-populated", false);
+
+    let span = doc.querySelector("div");
+    ok(span, "captain, we have the test div");
+    stylePanel.open(span);
+  });
+}
+
+function SI_checkText()
+{
+  Services.obs.removeObserver(SI_checkText, "StyleInspector-populated", false);
+
+  let propertyView = null;
+  stylePanel.cssHtmlTree.propertyViews.some(function(aView) {
+    if (aView.name == "color") {
+      propertyView = aView;
+      return true;
+    }
+  });
+
+  ok(propertyView, "found PropertyView for color");
+
+  is(propertyView.hasMatchedSelectors, true, "hasMatchedSelectors is true");
+
+  propertyView.matchedExpanded = true;
+  propertyView.refreshMatchedSelectors();
+
+  let td = propertyView.matchedSelectorTable.querySelector("td.rule-text");
+  ok(td, "found the first table row");
+
+  let selector = propertyView.matchedSelectorViews[0];
+  ok(selector, "found the first matched selector view");
+
+  try {
+    is(td.textContent.trim(), selector.humanReadableText(td).trim(),
+      "selector text is correct");
+  } catch (ex) {
+    info("EXCEPTION: " + ex);
+    ok(false, "getting the selector text should not raise an exception");
+  }
+
+  Services.obs.addObserver(finishUp, "StyleInspector-closed", false);
+  stylePanel.close();
+}
+
+function finishUp()
+{
+  Services.obs.removeObserver(finishUp, "StyleInspector-closed", false);
+  doc = stylePanel = null;
+  gBrowser.removeCurrentTab();
+  finish();
+}
+
+function test()
+{
+  waitForExplicitFinish();
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", function onLoad(evt) {
+    gBrowser.selectedBrowser.removeEventListener(evt.type, onLoad, true);
+    doc = content.document;
+    waitForFocus(createDocument, content);
+  }, true);
+
+  content.location = "data:text/html,selector text test, bug 692400";
+}
