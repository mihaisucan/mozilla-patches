# HG changeset patch
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1369237147 -10800
#      Wed May 22 18:39:07 2013 +0300
# Node ID 4841624c11feac8c5c98cab2ec59936b405bc2e2
# Parent  c21ef3664c67003596ec57f0c3db51388998a5b1
Bug 874635 - Intermittent browser/devtools/webconsole/test/browser_bug_871156_ctrlw_close_tab.js | uncaught exception - TypeError: preview is undefined at resource://app/modules/WindowsPreviewPerTab.jsm:371; r=dao; try: -b do -p linux,linux64,macosx64,win32,win64 -u mochitests -t none

diff --git a/browser/modules/WindowsPreviewPerTab.jsm b/browser/modules/WindowsPreviewPerTab.jsm
--- a/browser/modules/WindowsPreviewPerTab.jsm
+++ b/browser/modules/WindowsPreviewPerTab.jsm
@@ -134,23 +134,21 @@ function snapRectAtScale(r, scale) {
  *        The TabWindow (see below) that owns the preview that this controls
  * @param tab
  *        The <tab> that this preview is associated with
  */
 function PreviewController(win, tab) {
   this.win = win;
   this.tab = tab;
   this.linkedBrowser = tab.linkedBrowser;
+  this.preview = this.win.createTabPreview(this);
 
   this.linkedBrowser.addEventListener("MozAfterPaint", this, false);
   this.tab.addEventListener("TabAttrModified", this, false);
 
-  // Cannot perform the lookup during construction. See TabWindow.newTab 
-  XPCOMUtils.defineLazyGetter(this, "preview", function () this.win.previewFromTab(this.tab));
-
   XPCOMUtils.defineLazyGetter(this, "canvasPreview", function () {
     let canvas = this.win.win.document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
     canvas.mozOpaque = true;
     return canvas;
   });
 
   XPCOMUtils.defineLazyGetter(this, "dirtyRegion",
     function () {
@@ -447,37 +445,41 @@ TabWindow.prototype = {
   },
   get height () {
     return this.win.innerHeight;
   },
 
   // Invoked when the given tab is added to this window
   newTab: function (tab) {
     let controller = new PreviewController(this, tab);
+    // It's OK to add the preview now while the favicon still loads.
+    this.previews.splice(tab._tPos, 0, controller.preview);
+    AeroPeek.addPreview(controller.preview);
+    // updateTitleAndTooltip relies on having controller.preview which is lazily resolved.
+    // Now that we've updated this.previews, it will resolve successfully.
+    controller.updateTitleAndTooltip();
+  },
+
+  createTabPreview: function (controller) {
     let docShell = this.win
                   .QueryInterface(Ci.nsIInterfaceRequestor)
                   .getInterface(Ci.nsIWebNavigation)
                   .QueryInterface(Ci.nsIDocShell);
     let preview = AeroPeek.taskbar.createTaskbarTabPreview(docShell, controller);
     preview.visible = AeroPeek.enabled;
-    preview.active = this.tabbrowser.selectedTab == tab;
+    preview.active = this.tabbrowser.selectedTab == controller.tab;
     // Grab the default favicon
     getFaviconAsImage(null, PrivateBrowsingUtils.isWindowPrivate(this.win), function (img) {
       // It is possible that we've already gotten the real favicon, so make sure
       // we have not set one before setting this default one.
       if (!preview.icon)
         preview.icon = img;
     });
 
-    // It's OK to add the preview now while the favicon still loads.
-    this.previews.splice(tab._tPos, 0, preview);
-    AeroPeek.addPreview(preview);
-    // updateTitleAndTooltip relies on having controller.preview which is lazily resolved.
-    // Now that we've updated this.previews, it will resolve successfully.
-    controller.updateTitleAndTooltip();
+    return preview;
   },
 
   // Invoked when the given tab is closed
   removeTab: function (tab) {
     let preview = this.previewFromTab(tab);
     preview.active = false;
     preview.visible = false;
     preview.move(null);
